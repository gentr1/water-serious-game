<!DOCTYPE html>
<html>
  <head>
    <title>SeGWADE</title>
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    
    
    <link rel="stylesheet" href="/styles/bootstrap.3.1.1.css">
    <link rel="stylesheet" href="/styles/importer.css">
    
	<link rel="stylesheet" href="/styles/handsontable.full.min.css">
    <!--Added this so the client has access to the csrf tag and it's grabbed first service side on every page -->
    <script type="text/javascript">
    window.SAILS_LOCALS = {
      _csrf: '<%= _csrf %>',
      me: <%- JSON.stringify(me) %>
    };
    var myuser = <%-JSON.stringify(me)%>
	var network = <%-JSON.stringify(network)%>
	//var input=[];
	//console.log(network);
    </script>
	
	
	
  </head>
  <body ng-app="DashboardModule" ng-controller="DashboardController">
	
    <!-- container = Fixed-width container container-fluid = full-width -->
    <div id="big-container" >
      <!-- Creates the navbar -->
      <nav id ="mynav" class="navbar navbar-default navbar-inverse" style="margin-left:15px;margin-right:15px;height:50px">
        <!-- This creates the mechanism for collapse button -->
        <button type="button" class="navbar-toggle" data-toggle="collapse" ng-init="navCollapsed = true" ng-click="navCollapsed = !navCollapsed">
        <!-- This controls the number of lines in the image when the nav collapse -->
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        </button>
        <!-- This is the brand on the left-hand side. -->
        <a class="navbar-brand" href="/#/"> SeGWADE</a>
        <!-- This is what is the above collapse button points to when the mark-up below is collapsed -->
        <div class="collapse navbar-collapse" ng-class="!navCollapsed && 'in'">
          <!-- This is what "styles" the li's as navbar items -->
          <ul class="nav navbar-nav navbar-right">
            <!-- navbar-right pulls this element right -->
            <!-- Using ng-show instead of ng-if because we need this mark-up to be in the dom when signup controller
            fires.  If it's not there (which it wouldn't be in the case of ng-if) then the scope of the signup
            controller will not be tied to this element. -->
			<li>
              <a id="netaccess" href="/seenetworks">networks</a>
            </li>
            <li>
              <a href="/logout">sign-out</a>
            </li>
            <!-- <a ng-controller="signinController" class="btn btn-default navbar-btn navbar-right" href="#" ng-if="!isAuthenticated">sign-in</a> -->
            <!-- Using ng-show instead of ng-if because we need this mark-up to be in the dom when signup controller
            fires.  If it's not there (which it wouldn't be in the case of ng-if) then the scope of the signup
            controller will not be tied to this element. -->
          </ul>
        </div>
      </nav>

      <h1 id="maintitle" align="center" style="height:39px;">EPANET network</h1>
	  <div style="width:100%; text-align:center;" align="center">
	  <form action="updatenetwork" enctype="multipart/form-data" method="post">
			
			<br><br>
			<div id="title-junctions"></div>
			  <div style="width:30%;" >
			  <div id=""><strong>Mininum pressure for junctions</strong></div>
			  <div id="tablemp" style="height:400px;overflow:auto;"></div>
			  </div>
			  <div style="width:100%;" >
			  <div><strong>Pipe diameters</strong></div>
			  <div id="table0" style="height:50px;overflow:auto;"></div>
			  </div>
			  <div style="width:100%;" >
			  <div><strong>Pipe diameters costs</strong></div>
			  <div id="table0c" style="height:50px;overflow:auto;"></div>
			  </div>
			  <div style="width:100%;" >
			  <div><strong>Min/Max of differential pressure</strong></div>
			  <div id="tablemm" style="height:50px;overflow:auto;"></div>
			  </div>
			   <div style="width:100%;" >
			  <div><strong>Min/Max of water age</strong></div>
			  <div id="tablemm2" style="height:50px;overflow:auto;"></div>
			  </div>
			  <div style="width:100%;" >
			  <div><strong>Min/Max of leakage</strong></div>
			  <div id="tablemm3" style="height:50px;overflow:auto;"></div>
			  </div>
			  <div style="width:30%;float:left;" >
			  <div id="nb_pumps"><strong>Pumps</strong></div>
			  <div id="table1" style="height:400px;overflow:auto;"></div>
			  </div>
			  <div style="width:40%;float:left;" >
			  <div id="nb_valves"><strong>Valves</strong></div>
			  <div id="table2" style="height:400px;overflow:auto;"></div>
			  </div>
			  <div style="width:30%;float:left;" >
			  <div id="nb_pipes"><strong>Pipes</strong></div>
			  <div id="table3" style="height:400px;overflow:auto;"></div>
			  </div>
			
			<input type="text" name="network-id" id ="network-id" style="visibility: hidden;" value="">
			<input type="text" name="network-pumps" id ="network-pumps" style="visibility: hidden;" value="">
			<input type="text" name="network-valves" id ="network-valves" style="visibility: hidden;" value="">
			<input type="text" name="network-pipes" id ="network-pipes" style="visibility: hidden;" value="">
			<input type="text" name="pipe-diameters" id ="pipe-diameters" style="visibility: hidden;" value="">
			<input type="text" name="pipe-diameters-costs" id ="pipe-diameters-costs" style="visibility: hidden;" value="">
			<input type="text" name="min-max-diff-pressure" id ="min-max-diff-pressure" style="visibility: hidden;" value="">
			<input type="text" name="min-max-age" id ="min-max-age" style="visibility: hidden;" value="">
			<input type="text" name="min-max-leakage" id ="min-max-leakage" style="visibility: hidden;" value="">
			<input type="text" name="network-junctions" id ="network-junctions" style="visibility: hidden;" value="">
			<input type="submit" id="ub" class="btn btn-lg btn-primary btn-block" value="Update"/>
		  <input type="hidden" name="_csrf" value="<%= _csrf %>" />
		</form>	  
    </div>
	  
	  
    </div>
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery-2.2.3.min.js"></script>
    <script src="/js/dependencies/Underscore.1.8.3.min.js"></script>
	
	<script src="/js/dependencies/handsontable.full.min.js"></script>
	
	<script>
	var title  = document.getElementById('maintitle');
	title.innerHTML="EPANET network: "+network['name'];
    var obj_junctions=network['junctions'];
	var obj_reservoirs=network['reservoirs'];
	var obj_tanks=network['tanks'];
	var backdrop_data=network['backdrop_data'];
	var obj_pipes=network['pipes'];
	var obj_pumps=network['pumps'];
	var list_pump_curves=network['pump_curves'];
	var obj_valves=network['valves'];
	var pipe_diameters = network['pipe_diameters'];
	var pipe_diameters_costs = network['pipe_diameters_costs'];
	var min_max_diff_pressure = network['min_max_diff_pressure'];
	var min_max_age = network['min_max_age'];
	var min_max_leakage = network['min_max_leakage'];
	//console.log(obj_junctions)
	var listPumps=[];//jQuery.makeArray(obj_pumps);
	for( var elem in obj_pumps) {
		var tmp={};
		tmp['ID']=elem;
		tmp['Mode']=obj_pumps[elem]['Parameters'][0];
		tmp['Status']=obj_pumps[elem]['Status'];
		tmp['Param']=obj_pumps[elem]['Parameters'][1];
		
		listPumps.push(tmp);
	}
	var listValves=[];//jQuery.makeArray(obj_pumps);
	for( var elem in obj_valves) {
		var tmp={};
		tmp['ID']=elem;
		tmp['Status']=obj_valves[elem]['Status'];
		tmp['Diameter']=parseInt(obj_valves[elem]['Diameter']);
		tmp['Type']=obj_valves[elem]['Type'];
		tmp['Setting']=obj_valves[elem]['Setting'];
		
		listValves.push(tmp);
	}
	var listPipes=[];//jQuery.makeArray(obj_pumps);
	for( var elem in obj_pipes) {
		var tmp={};
		tmp['ID']=elem;
		tmp['Status']=obj_pipes[elem]['Status'];
		tmp['Diameter']=obj_pipes[elem]['Diameter'];
		tmp['Replaceable']=obj_pipes[elem]['Replaceable'];				
		listPipes.push(tmp);
	}
	
	var listJunctions=[];//jQuery.makeArray(obj_pumps);
	for( var elem in obj_junctions) {
		var tmp={};
		tmp['ID']=elem;
		tmp['MinPressure']=obj_junctions[elem]['MinPressure'];		
		listJunctions.push(tmp);
	}
	
	var copy_diameters=[pipe_diameters.slice(0)];
	var copy_diameters_costs=[pipe_diameters_costs.slice(0)];
	//console.log(network)
	document.getElementById("network-id").value=network['id'];
	console.log(document.getElementById("network-id").value)
	document.getElementById("network-pumps").value=JSON.stringify(obj_pumps);
	document.getElementById("network-pipes").value=JSON.stringify(obj_pipes);
	document.getElementById("network-valves").value=JSON.stringify(obj_valves);
	document.getElementById("network-junctions").value=JSON.stringify(obj_junctions);
	document.getElementById("pipe-diameters").value=JSON.stringify(pipe_diameters);
	document.getElementById("pipe-diameters-costs").value=JSON.stringify(pipe_diameters_costs);
	document.getElementById("min-max-diff-pressure").value=JSON.stringify(min_max_diff_pressure);
	document.getElementById("min-max-age").value=JSON.stringify(min_max_age);
	document.getElementById("min-max-leakage").value=JSON.stringify(min_max_leakage);
	//obj_pumps=null;
	//console.log(listPumps)
	
	var $containermp = $("#tablemp");
	$containermp.handsontable({
	  data: listJunctions,
	  stretchH:"all",
	  //width: 400,
	  //height: 400,
	  startRows: 2,
	  startCols: 2,
	  colHeaders: true,
	  colHeaders: ['ID', 'MinPressure'],
	  columns: [
		{data: "ID",editor: false},
		{data: "MinPressure"}
	  ],
	  afterChange: function(changes, source) {
			var listChanged =this.getData();
			for (var i=0, j=listChanged.length; i<j; i++){
				if (obj_junctions.hasOwnProperty(listChanged[i][0])){
					
					obj_junctions[listChanged[i][0]]['MinPressure']=listChanged[i][1];
					//if (listChanged[i][0]=='J511'){console.log(listChanged[i][1])}
				}
			}							
			document.getElementById("network-junctions").value=JSON.stringify(obj_junctions);
			//console.log(document.getElementById("network-junctions").value.substring(0,100))
	  },
	  minSpareRows: 0
	});
	
	
	var copy_diameters=[pipe_diameters.slice(0)];
	var $container0 = $("#table0");
	$container0.handsontable({
	  data: copy_diameters,
	  stretchH: 'all',
	  //width: 400,
	  //height: 400,
	  startRows: 1,
	  startCols: 16,
	  rowHeaders: false,
	  colHeaders: false,
	  //rowHeaders: ['Diameters'],
	  //colWidths: [85],
	  afterChange: function(changes, source) {
			var listChanged =this.getData();
			pipe_diameters=[];
			for (var i=0, j=listChanged[0].length; i<j; i++){
				if (listChanged[0][i]!=null && listChanged[0][i]!=""){
					pipe_diameters.push(listChanged[0][i])
				}
				//console.log(pipe_diameters)
			}							
			document.getElementById("pipe-diameters").value=JSON.stringify(pipe_diameters);


	  },
	  minSpareRows: 0,
	  minSpareCols: 1
	});
	
	var copy_diameters_costs=[pipe_diameters_costs.slice(0)];
	var $container0c = $("#table0c");
	$container0c.handsontable({
	  data: copy_diameters_costs,
	  stretchH: 'all',
	  //width: 400,
	  //height: 400,
	  startRows: 1,
	  startCols: 16,
	  rowHeaders: false,
	  colHeaders: false,
	  //rowHeaders: ['Diameters'],
	  //colWidths: [85],
	  afterChange: function(changes, source) {
			var listChanged =this.getData();
			pipe_diameters_costs=[];
			for (var i=0, j=listChanged[0].length; i<j; i++){
				if (listChanged[0][i]!=null && listChanged[0][i]!=""){
					pipe_diameters_costs.push(listChanged[0][i])
				}
				//console.log(pipe_diameters)
			}							
			document.getElementById("pipe-diameters-costs").value=JSON.stringify(pipe_diameters_costs);


	  },
	  minSpareRows: 0,
	  minSpareCols: 1
	});
	
	var copy_min_max_diff_pressure=[min_max_diff_pressure.slice(0)];
	var $containermm = $("#tablemm");
	$containermm.handsontable({
	  data: copy_min_max_diff_pressure,
	  stretchH: 'all',
	  //width: 400,
	  //height: 400,
	  startRows: 1,
	  startCols: 2,
	  rowHeaders: false,
	  colHeaders: false,
	  //rowHeaders: ['Diameters'],
	  //colWidths: [85],
	  afterChange: function(changes, source) {
			var listChanged =this.getData();
			min_max_diff_pressure=[];
			for (var i=0, j=listChanged[0].length; i<j; i++){
				if(listChanged[0][i]=="0" || listChanged[0][i]==0){
					min_max_diff_pressure.push(listChanged[0][i])
				}
				else if (listChanged[0][i]!=null && listChanged[0][i]!=""){
					min_max_diff_pressure.push(listChanged[0][i])
				}
			}							
			document.getElementById("min-max-diff-pressure").value=JSON.stringify(min_max_diff_pressure);


	  },
	  minSpareRows: 0//,
	  //minSpareCols: 1
	});
	
	var copy_min_max_age=[min_max_age.slice(0)];
	var $containermm2 = $("#tablemm2");
	$containermm2.handsontable({
	  data: copy_min_max_age,
	  stretchH: 'all',
	  //width: 400,
	  //height: 400,
	  startRows: 1,
	  startCols: 2,
	  rowHeaders: false,
	  colHeaders: false,
	  //rowHeaders: ['Diameters'],
	  //colWidths: [85],
	  afterChange: function(changes, source) {
			var listChanged =this.getData();
			min_max_age=[];
			for (var i=0, j=listChanged[0].length; i<j; i++){
				if(listChanged[0][i]=="0" || listChanged[0][i]==0){
					min_max_age.push(listChanged[0][i])
				}
				else if (listChanged[0][i]!=null && listChanged[0][i]!=""){
					min_max_age.push(listChanged[0][i])
				}
			}							
			document.getElementById("min-max-age").value=JSON.stringify(min_max_age);


	  },
	  minSpareRows: 0//,
	  //minSpareCols: 1
	});
	
	var copy_min_max_leakage=[min_max_leakage.slice(0)];
	var $containermm3 = $("#tablemm3");
	$containermm3.handsontable({
	  data: copy_min_max_leakage,
	  stretchH: 'all',
	  //width: 400,
	  //height: 400,
	  startRows: 1,
	  startCols: 2,
	  rowHeaders: false,
	  colHeaders: false,
	  //rowHeaders: ['Diameters'],
	  //colWidths: [85],
	  afterChange: function(changes, source) {
			var listChanged =this.getData();
			min_max_leakage=[];
			for (var i=0, j=listChanged[0].length; i<j; i++){
				if(listChanged[0][i]=="0" || listChanged[0][i]==0){
					min_max_leakage.push(listChanged[0][i])
				}
				else if (listChanged[0][i]!=null && listChanged[0][i]!=""){
					min_max_leakage.push(listChanged[0][i])
				}
			}							
			document.getElementById("min-max-leakage").value=JSON.stringify(min_max_leakage);


	  },
	  minSpareRows: 0//,
	  //minSpareCols: 1
	});
					
	var $container = $("#table1");
	$container.handsontable({
	  data: listPumps,
	  stretchH:"all",
	  //width: 400,
	  //height: 400,
	  startRows: 1,
	  startCols: 4,
	  colHeaders: true,
	  colHeaders: ['ID', 'Status', 'Mode', 'Param'],
	  columns: [
		{data: "ID",editor: false},
		{data: "Status",type: 'checkbox', checkedTemplate: 'Open', uncheckedTemplate: 'Closed',label: {position: 'before',value: 'Open ? '}},
		{data: "Mode",type: 'dropdown', source: ['HEAD','FLOW']},
		{data: "Param",  type: 'autocomplete', source: list_pump_curves, strict: false}
	  ],
	  afterChange: function(changes, source) {
			var listChanged =this.getData();
			for (var i=0, j=listChanged.length; i<j; i++){
				if (obj_pumps.hasOwnProperty(listChanged[i][0])){
					obj_pumps[listChanged[i][0]]['Status']=listChanged[i][1];
					obj_pumps[listChanged[i][0]]['Parameters'][0]=listChanged[i][2];
					obj_pumps[listChanged[i][0]]['Parameters'][1]=listChanged[i][3];
				}
			}							
			document.getElementById("network-pumps").value=JSON.stringify(obj_pumps);

	  },
	  minSpareRows: 0
	});
	var $container2 = $("#table2");
	$container2.handsontable({
	  data: listValves,
	  stretchH:"all",
	  //width: 400,
	  //height: 400,
	  startRows: 1,
	  startCols: 5,
	  colHeaders: true,
	  colHeaders: ['ID', 'Status', 'Diameter', 'Type','Setting'],
	  columns: [
		{data: "ID",editor: false},
		{data: "Status",type: 'checkbox', checkedTemplate: 'Open', uncheckedTemplate: 'Closed',label: {position: 'before',value: 'Open ? '}},
		//{data: "Diameter", type: 'autocomplete', source: pipe_diameters, strict: false}, 
		{data: "Diameter", type: 'autocomplete', source: [0,36,48,60,72,84,96,108,120,132,144,156,168,180,192,204,999].map(String), strict: false}, 
		{data: "Type",type: 'dropdown', source: ["PRV","PSV","PBV","FCV","TCV","GPV"]},
		{data: "Setting"}
	  ],
	  afterChange: function(changes, source) {
			var listChanged =this.getData();
			//console.log(listChanged)
			for (var i=0, j=listChanged.length; i<j; i++){
				if (obj_valves.hasOwnProperty(listChanged[i][0])){
					obj_valves[listChanged[i][0]]['Status']=listChanged[i][1];
					obj_valves[listChanged[i][0]]['Diameter']=listChanged[i][2];
					obj_valves[listChanged[i][0]]['Type']=listChanged[i][3];
					obj_valves[listChanged[i][0]]['Setting']=listChanged[i][4];
				}
			}
			document.getElementById("network-valves").value=JSON.stringify(obj_valves);
	  },
	  minSpareRows: 0
	});
	var $container2 = $("#table3");
	$container2.handsontable({
	  data: listPipes,
	  stretchH:"all",
	  //renderAllRows: true,
	  //width: 400,
	  //height: 400,
	  startRows: 1,
	  startCols: 3,
	  colHeaders: true,
	  colHeaders: ['ID', 'Status', 'Diameter',"Replaceable"],
	  columns: [
		{data: "ID",editor: false},
		{data: "Status",type: 'checkbox', checkedTemplate: 'Open', uncheckedTemplate: 'Closed',label: {position: 'before',value: 'Open ? '}},
		//{data: "Diameter",type: 'autocomplete', source: [0,36,48,60,72,84,96,108,120,132,144,156,168,180,192,204,999].map(String), strict: false}, 
		{data: "Diameter", type: 'autocomplete', source: pipe_diameters, strict: false}, 
		{data: "Replaceable",type: 'checkbox'},
	  ],
	  afterChange: function(changes, source) {
			var listChanged =this.getData();
			//console.log(listChanged)
			for (var i=0, j=listChanged.length; i<j; i++){
				if (obj_pipes.hasOwnProperty(listChanged[i][0])){
					obj_pipes[listChanged[i][0]]['Status']=listChanged[i][1];
					obj_pipes[listChanged[i][0]]['Diameter']=listChanged[i][2];
					obj_pipes[listChanged[i][0]]['Replaceable']=listChanged[i][3];
				}
			}
			document.getElementById("network-pipes").value=JSON.stringify(obj_pipes);
			
	  },
	  minSpareRows: 0
	});
	
	</script>
  
  
  </body>
</html>
