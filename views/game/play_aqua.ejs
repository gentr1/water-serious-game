<!DOCTYPE html>
<html>
  <head>
    <title>SeGWADE | Welcome back, <%= me.name %>!</title>
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    
    <link rel="stylesheet" href="/styles/angular-toastr.css">
    <link rel="stylesheet" href="/styles/bootstrap.3.1.1.css">
    <link rel="stylesheet" href="/styles/handsontable.full.min.css">
    <link rel="stylesheet" href="/styles/importer.css">
   
    <!--Added this so the client has access to the csrf tag and it's grabbed first service side on every page -->
    <script type="text/javascript">
    window.SAILS_LOCALS = {
      _csrf: '<%= _csrf %>',
      me: <%- JSON.stringify(me) %>
    };
    var myuser = <%-JSON.stringify(me)%>
	var game = <%-JSON.stringify(game)%>
	var network = <%-JSON.stringify(network)%>
	//var input=[];
	//console.log(myuser);
    </script>
	
	<style>
	
.circular-menu {
  width: 250px;
  height: 250px;
  margin: 0 auto;
  position: relative;
  visibility:hidden;
}
.show.circular-menu{
	visibility:visible;
}


.circle {
  width: 250px;
  height: 250px;
  opacity: 0;
  
  -webkit-transform: scale(0);
  -moz-transform: scale(0);
  transform: scale(0);

  //-webkit-transition: all 0.4s ease-out;
  //-moz-transition: all 0.4s ease-out;
  //transition: all 0.4s ease-out;
}

.open.circle {
  opacity: 1;

  -webkit-transform: scale(1);
  -moz-transform: scale(1);
  transform: scale(1);
}

.circle a {
  text-decoration: none;
  
  color: #000000;
  //background: #dddddd;
  //display: block;
  //height: 40px;
  //width: 40px;
  //line-height: 40px;
  //margin-left: -20px;
  //margin-top: -20px;
  position: absolute;
  text-align: center;

}
.circle a:hover { 
    //background-color: gray;
	background-image: url("images/c4.png");
	background-repeat: no-repeat;
}


//.fb:hover{
//color: gray;
//}

//.li fb:hover { 
//   color: gray;
//} 

.menu-button {
  position: absolute;
  //top: calc(50% - 200px);
  //left: calc(50% - 200px);
  text-decoration: none;
  text-align: center;
   
  //border-radius: 80%;
  display: block;
  height: 450px;
  width: 200px;
  line-height: 40px;
  padding: 10px;
  background: #000000;
  visibility:hidden;
  -webkit-transform: scale(0);
  -moz-transform: scale(0);
  transform: scale(0);
  opacity: 0.8;
  //-webkit-transition: all 0.4s ease-out;
  //-moz-transition: all 0.4s ease-out;
  //transition: all 0.4s ease-out;
  //opacity: 0;
  -moz-box-shadow: -1px 1px 5px #ddd;
  -webkit-box-shadow: -1px 1px 5px #ddd;
  -o-box-shadow: -1px 1px 5px #ddd;
  box-shadow: -1px 1px 5px #ddd;
}
.open.menu-button{
	visibility:visible;
	//-webkit-transition: all 0.4s ease-out;
  //-moz-transition: all 0.4s ease-out;
  //transition: all 0.4s ease-out;
	-webkit-transform: scale(1);
  -moz-transform: scale(1);
  transform: scale(1);
}
#x0{
	visibility:hidden;
}


#slideout {
  background: #fff;
  box-shadow: 0 0 5px rgba(0,0,0,.3);
  color: #333;
  position: fixed;
  //top: 200px;
  right: -520px;
  width: 500px;
  -webkit-transition-duration: 0.3s;
  -moz-transition-duration: 0.3s;
  -o-transition-duration: 0.3s;
  transition-duration: 0.3s;
}
#slideout.on {
  right: 0;
}

.hide {
    display: none !important;
}

	</style>
	
  </head>
  <body ng-app="DashboardModule" ng-controller="DashboardController">
	
    <div id="big-container" >
     
      <nav id ="mynav" class="navbar navbar-default navbar-inverse" style="margin-left:15px;margin-right:15px;height:50px">
       
        <button type="button" class="navbar-toggle" data-toggle="collapse" ng-init="navCollapsed = true" ng-click="navCollapsed = !navCollapsed">
       
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        </button>
        
        <a class="navbar-brand" href="/#/"> SeGWADE</a>
		<a class="navbar-brand" href="#" id="welcometitle" style="color:#ffffff;font-size:16px;pointer-events: none;"></a>
        <div class="collapse navbar-collapse" ng-class="!navCollapsed && 'in'">
          
		  <ul class="nav navbar-nav navbar-right">
		    
            <li>
              <a id="gameaccess" href="/seegames" style="">games</a>
            </li>
			<li>
              <a href="/logout">sign-out</a>
            </li>
			<li>
              <a id="gameaccess" href="#" style="" onclick="displayhelp()"><i class="fa fa-info-circle fa-2x" aria-hidden="true" ></i></a>
            </li>
            
          </ul>
		  
        </div>
      </nav>

      <h1 id="maintitle" align="center" style="height:39px;">Serious Game for WDS Analysis, Design & Evaluation</h1>
	  
    </div>
	
	<div id="slideout">
		<ul  class="nav nav-tabs" role="tablist">
		<li role="presentation" class="active" ><a href="#pipes" aria-controls="pipes" role="tab" data-toggle="tab">Pipes</a></li>
		<li role="presentation" ><a href="#pumps" aria-controls="pumps" role="tab" data-toggle="tab">Pumps</a></li>
		<li role="presentation"><a href="#valves" aria-controls="messages" role="tab" data-toggle="tab">Valves</a></li>
		<li role="presentation"><a href="#junctions" aria-controls="junctions" role="tab" data-toggle="tab">Junctions</a></li>
		<li role="presentation"><a href="#reservoirs" aria-controls="reservoirs" role="tab" data-toggle="tab">Reservoirs</a></li>
		<li role="presentation"><a href="#tanks" aria-controls="tanks" role="tab" data-toggle="tab">Tanks</a></li>
	  </ul>

	  <!-- Tab panes -->
	  <div class="tab-content">
		<div role="tabpanel" class="tab-pane active" id="pipes"><div id="table1" style="height:400px;overflow:auto;"></div></div>
		<div role="tabpanel" class="tab-pane" id="pumps"><div id="table2" style="height:400px;overflow:auto;"></div></div>
		<div role="tabpanel" class="tab-pane" id="valves"><div id="table3" style="height:400px;overflow:auto;"></div></div>
		<div role="tabpanel" class="tab-pane" id="junctions"><div id="table4" style="height:400px;overflow:auto;"></div></div>
		<div role="tabpanel" class="tab-pane" id="reservoirs"><div id="table5" style="height:400px;overflow:auto;"></div></div>
		<div role="tabpanel" class="tab-pane" id="tanks"><div id="table6" style="height:400px;overflow:auto;"></div></div>
	  </div>
		
	</div>
	
	<div id="d3-container" style="position:absolute;z-index:10000;pointer-events: none;" ></div>
	<div id="d3-container2" style="position:absolute;z-index:10000;pointer-events: none;" ></div>
	<div id="info-win" style="position:absolute;z-index:10000;pointer-events: none;color:#ffffff" ></div>
	<div id="info-cost" style="position:absolute;z-index:10000;pointer-events: none;color:#ffffff" ></div>
	<div id="info-warning" style="position:absolute;z-index:10000;pointer-events: none;color:#ffffff" ></div>
	<div id="info-top" style="position:absolute;z-index:10000;pointer-events: none;color:#ffffff" ></div>
	<div id="3d-graph" align="center"></div>
	
	
	
	<a href="" class="menu-button" style="pointer-events: none;"> </a>
	<nav id ="mycm" class="circular-menu" style="position:absolute;">
		<a href="#" id ="x0" onclick="activate2(this)" style="position:relative;z-index:33000;" >
			<span class="fa-stack fa-2x" >
				<i class="fa fa-circle fa-stack-2x" style="color:#ffffff; opacity:1.0;"></i>
				<i class="fa fa-times-circle fa-stack-2x" style="color:#ff0000; opacity:1.0;"></i>
				
			</span>
	    </a>
		
		
		<div id="circle-parent" class="circle" style="z-index:32000;"></div>
		
	</nav>
	<div align="center">
	
	<input class="btn btn-warning " id="lowPriceB" type="button" value="Reset default" onclick="lowCostReset();"/>
	<input class="btn btn-warning " id="maxPriceB" type="button" value="Maximum pressure" onclick="maxCostReset();"/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Load :<select name="mySessionSelect" id="mySessionSelect" style="float:center"></select>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input class="btn btn-info" id="clickMe" type="button" value="Evaluate" onclick="requestComputation();"/>
	<input class="btn btn-danger" id="commit-btn" type="button" value="Commit" onclick="requestCommit();"/>&nbsp;&nbsp;<button id="closeb" type="button" class="btn btn-default">Spreadsheet</button>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a id="toupload" href="/network/uploader" class="btn btn-sm btn-success" style="visibility:hidden;z-index:40000">uploader</a>
	</div>
    <div align="center">Background color: <input type="radio" name="bcol" id="r1" value="male" checked=true> Black <input type="radio" id="r2" name="bcol" value="female"> White <span id="gds" style="visibility:hidden;">&nbsp;&nbsp;&nbsp; Graphics details: <input type="radio" name="gd" id="rgd1" value="medium" checked=true> Medium <input type="radio" id="rgd2" name="gd" value="high"> High</span><span id="extrap"> &nbsp;&nbsp;&nbsp; Junctions color: <input type="radio" name="cgd" id="crgd1" value="pressure" checked=true> Pressure<input type="radio" id="crgd2" name="cgd" value="age"> Age&nbsp;&nbsp;&nbsp; Pipes color: <input type="radio" name="pcgd" id="pcrgd1" value="pressure" checked=true> Status<input type="radio" id="pcrgd2" name="pcgd" value="age"> Leakage</span></div>
	<div id ="masterUI" style="position:absolute;visibility:hidden;">
	<input class="btn btn-xs btn-danger " id="resetWholeGame" type="button" value="Reset scores" onclick="resetWholeGame();"/>	 
	<input class="btn btn-xs btn-danger " id="endWholeGame" type="button" value="Show scores" onclick="endWholeGame();"/>	
	
	</div>
	<div id="score-message" style="position:absolute;visibility:hidden;z-index:40000"></div>
	
	<div id="high-score-table" style="position:absolute;visibility:hidden;z-index:40000" class="alert alert-warning alert-dismissible fade in" role="alert">
	  <button type="button" class="close" onclick="closeAlert();">
		<span aria-hidden="true">&times;</span>
	  </button>
	  <div id="list_hs"></div>
	</div>
	<div id="info-table" style="position:absolute;visibility:hidden;z-index:40000;" class="alert alert-info info-dismissible fade in" role="alert">
	  <button type="button" class="close" onclick="closeInfo();">
		<span aria-hidden="true">&times;</span>
	  </button>
	  <div id="list_info"></div>
	</div>
	
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery-2.2.3.min.js"></script>    
    <script src="/js/dependencies/three.min.js"></script>
    <script src="/js/dependencies/CanvasRenderer.js"></script>
    <script src="/js/dependencies/CatmullRomCurve3.js"></script>
    <script src="/js/dependencies/Detector.js"></script>
    <script src="/js/dependencies/LineCurve3.js"></script>
    <script src="/js/dependencies/OrbitControls.js"></script>
    <script src="/js/dependencies/Projector.js"></script>
    <script src="/js/dependencies/SkyShader.js"></script>
    <script src="/js/dependencies/THREE.MeshLine.js"></script>
    <script src="/js/dependencies/Underscore.1.8.3.min.js"></script>
    
	<script src="/js/dependencies/bootstrap.min.js"></script>
    <script src="/js/dependencies/d3.min.js"></script>
    <script src="/js/dependencies/stats.min.js"></script>
	<script src="/js/dependencies/handsontable.full.min.js"></script>

	<script>
	var server_maintenance=false;
	
	$('#closeb').click(function(){
		$('#slideout').toggleClass('on');
	});
	//$('a[data-toggle="tab"]').on('shown', function (e) {
		//$(e.target.hash + ' div.handsontable').handsontable('render');
		//console.log("tab pressed");
	//});
	$('a[href="#pipes"]').on('shown.bs.tab', function (e) {
      $('#table1').handsontable('render');
    }); 
	$('a[href="#pumps"]').on('shown.bs.tab', function (e) {
      $('#table2').handsontable('render');
    }); 
	$('a[href="#valves"]').on('shown.bs.tab', function (e) {
      $('#table3').handsontable('render');
    }); 
	$('a[href="#junctions"]').on('shown.bs.tab', function (e) {
      $('#table4').handsontable('render');
    }); 
	$('a[href="#reservoirs"]').on('shown.bs.tab', function (e) {
      $('#table5').handsontable('render');
    }); 
	$('a[href="#tanks"]').on('shown.bs.tab', function (e) {
      $('#table6').handsontable('render');
    }); 
	var mouseOverSpreadsheet=false;
	$('#slideout').on("mouseenter", function(){
		mouseOverSpreadsheet=true;
	});
	$('#slideout').on("mouseleave", function(){
		mouseOverSpreadsheet=false;
	});
	displayhelp();
	closeInfo();
	function displayhelp(){
		document.getElementById('info-table').style.top=100+"px";
		document.getElementById('info-table').style.left=100+"px";
		document.getElementById('info-table').style.width=400+"px";
		document.getElementById('info-table').style.visibility="visible";
		if (game.game_mode=='aqualibrium'){
			//console.log('help aqualibrium')
			var myinfo='<strong>Information</strong><br><br>'
			myinfo+='The goal of the Aqualibrium game is to change the diameters of the pipes in this network so as the minimise the difference of volume between the three reservoirs Res1, Res2, and Res2.<br>'
			myinfo+='(For more information, you can also watch the <a href="https://youtu.be/fmzFZFIjtTk" style="color:blue;text-decoration:underline;" target="_blank"><strong><i>video tutorial</i></strong>.</a>)<br><br>'
			myinfo+='<strong>Rotate camera</strong>: Left mouse button + mouse move<br>'
			myinfo+='<strong>Zoom in/out camera</strong>: mouse wheel or Z and X Keys<br>'
			myinfo+='<strong>Pan camera</strong>: Right mouse button + mouse move<br>'
			myinfo+='<strong>Change diameter of one pipe</strong>: Left click on a pipe a select a diameter and close the diameter selection window.<br>'
			myinfo+='<strong>Change diameter for a group of pipes</strong>: Leave Shift key pressed + Left click on a pipe to add/remove it to the selection, then select a diameter and close the diameter selection window.<br>'
			myinfo+='<strong>Reset pipes diameters to the start</strong>: Click the "Reset Default" button.<br>'
			myinfo+='<strong>Compute without saving result</strong>: Click the "Evaluate" button. <br>'
			myinfo+='<strong>Compute and save result</strong>: Click the "Commit" button. <br>'
			myinfo+='<strong>Load past result</strong>: click on one of the results in the select combo list.<br>'
			document.getElementById('list_info').innerHTML=myinfo;
		}
		
		
	}
	//$('#pumps').click(function (e) {
	//	e.preventDefault()
	//	$('#pumps').tab('show')
	//	console.log("pumps");
	//})
	//$('#pumps').tab('show');
	//var nn= 'output\\mehdi khoury.out'
	//console.log(nn.split('\\').pop().split('/').pop().split('.out')[0])
	var commit_timer=0;
	var commit_id;
	var myInterval;
	
	var default_coloring_node=true;
	var default_coloring_pipe=true;
	var updates_on=true;
	// setting up default values for UI color, number formatting, and detail level variables 
	var UIColor="black";
	var widget_color=0xffffff;
	
	if (game.game_mode=='aqualibrium'){
		UIColor="white";
		widget_color=0x000000;
		document.getElementById('r1').checked=false;
		document.getElementById('r2').checked=true;
	}
	
	var aqua_valid=false;
	
	var mycol="";
	if (UIColor=="black"){
		mycol="white";
	}
	else if (UIColor=="white"){
		mycol="black";
	}
	var detailLevel=1;
	var format = d3.format(".2s");
	var formatDiff = d3.format("+$.2s");
	var sky, sunSphere;
	var mouseX = 0, mouseY = 0,
	targetRotation = 0,
	targetRotationOnMouseDown = 0,
	windowHalfX = (window.innerWidth*0.9) / 2,
	windowHalfY = (window.innerHeight-200) / 2,
	line, lines, lower_plane,
	SEPARATION = 200,
	AMOUNTX = 10,
	AMOUNTY = 10,
	target,
	camera, scene, renderer, controls;
	//var particle=[];
	var rotSpeed;
	var INTERSECTED;
	var isWebGl=false;
	var PI2 = Math.PI * 2;
	var programFill, programStroke, programText;
	var offSetTop = $('#maintitle').height();
	var allSelectedPipes = [];
	
	// setting up pipes diameters 
	var index_2_diameters ={0:0};
	var diameters_2_index ={0:0};
	var diameters_costs=[];
	for(var i=0, len=network['pipe_diameters_costs'].length; i<len; i++){
		diameters_costs[i]=parseFloat(network['pipe_diameters_costs'][i]);
	}
	//for(var i=0, len=network['pipe_diameters'].length; i<len; i++){
	//	network['pipe_diameters'][i] = parseInt(network['pipe_diameters'][i]);
	//}
	for (var i=0;i< network['pipe_diameters'].length;i++){
		index_2_diameters[i+1]=network['pipe_diameters'][i];
		diameters_2_index[network['pipe_diameters'][i]]=i+1;
	}
	var pipe_diameters = network['pipe_diameters'];
	pipe_diameters.unshift(0);
	var html_code_diameters='<a href="#" id ="c0" onclick="activate(this)" onmouseover="displayCostInfo(this)" onmouseout="clearCostInfo(this)"><span class="fa-stack fa-2x fa-inverse" ><i class="fa fa-ban fa-stack-2x "></i></span></a>'; 
	html_code_diameters+='<a href="#" id ="c1"  onclick="activate(this)" onmouseover="displayCostInfo(this)" onmouseout="clearCostInfo(this)"><span class="fa-stack fa-2x"><i class="fa fa-undo fa-stack-2x" style="color:#ffffff; opacity:1.0;"></i></span></a>';
	//console.log(network['pipe_diameters'])
	for (var i=0;i<network['pipe_diameters'].length-1;i++){
		html_code_diameters+='<a href="#" id ="c'+(i+2)+'" onclick="activate(this)" onmouseover="displayCostInfo(this)" onmouseout="clearCostInfo(this)">'
		html_code_diameters+='<span class="fa-stack fa-2x">'
		//html_code_diameters+='<i class="fa fa-circle fa-stack-2x" style="color:#993300; opacity:0.6;"></i>'
		html_code_diameters+='<strong class="fa-stack-1x fa-stack-text fa-inverse">'+network['pipe_diameters'][i+1]+'</strong>'
		html_code_diameters+='</span>'
		html_code_diameters+='</a>'
		
	}
	document.getElementById('circle-parent').innerHTML=html_code_diameters;
		
	//		<!-- <a href="#" id ="c0" onclick="activate(this)" onmouseover="displayCostInfo(this)" onmouseout="clearCostInfo(this)">
	//			<span class="fa-stack fa-2x fa-inverse" >
	//				<i class="fa fa-ban fa-stack-2x "></i>
	//			</span>
	//		</a> 
	
	
	
	//console.log(index_2_diameters)
	//console.log(diameters_2_index)
	//var index_2_diameters = {0:'0"',1:'36"',2:'48"',3:'60"',4:'72"',5:'84"',6:'96"',7:'108"',8:'120"',9:'132"',10:'144"',11:'156"',12:'168"',13:'180"',14:'192"',15:'204"'};
	//var diameters_2_index = {36:1,48:2,60:3,72:4,84:5,96:6,108:7,120:8,132:9,144:10,156:11,168:12,180:13,192:14,204:15};
	
	// set index value of edited pipe to -1 (no pipe edited so far)
	var editedPipe = -1;
	var listEditedPipes=[];
	var needEvaluation=false;
	// used for computing cost. Will need to be disabled
	var nytCosts= [0.0, 93.585332157997, 133.70012691107, 176.319455347511, 221.047180992079, 267.607943052113, 315.797737428341, 365.458562780909, 416.463965665326, 468.710151628288, 522.110197162661, 576.590107698535, 632.086033769596, 688.542245411137, 745.909620797842, 804.144494188349];
	var game_mode=game.game_mode;
	var team_size=game.team_size;
	var team="";
	//console.log("team size is "+team_size)
	var member= 0;
	if (team_size==1){
		team= myuser['name'];
		member= 0;
		
	}
	else{
		team= game.players_teams[myuser['name']]['team'];
		member= parseInt(game.players_teams[myuser['name']]['team_member']);
	}
	//console.log(team)
	var time_points= parseInt(game.time_points);
	
	
	var min_max_diff_pressure= [parseFloat(network['min_max_diff_pressure'][0]),parseFloat(network['min_max_diff_pressure'][1])];
	
	var min_max_age= [parseFloat(network['min_max_age'][0]),parseFloat(network['min_max_age'][1])];
	
	var min_max_leakage= [parseFloat(network['min_max_leakage'][0]),parseFloat(network['min_max_leakage'][1])];
	var range_leakage_color=d3.scale.linear().domain([min_max_leakage[0],((min_max_leakage[0]+min_max_leakage[1])/5.0),min_max_leakage[1]]).range(["yellow","orange","red"]);
	
	var d3_width=400;
	var d3_height=(window.innerHeight-200)/2;
	var d3_svg = d3.select("#d3-container").append("svg")
					.attr("width", d3_width)
					.attr("height", d3_height);
	var gradient1 = d3_svg
		.append("linearGradient")
		.attr("x1", "100%")
		.attr("x2","0%")
		.attr("y1", "0")
		.attr("y2", "0")
		.attr("id", "gradient1");
	gradient1
		.append("stop")
		.attr("offset", "0%")
		.attr("stop-color", "#006622");
    gradient1
		.append("stop")
		.attr("offset", "49%")
		.attr("stop-color", "#80ffaa");		
	gradient1
		.append("stop")
		.attr("offset", "50%")
		.attr("stop-color", "#ff8533");
	gradient1
		.append("stop")
		.attr("offset", "75%")
		.attr("stop-color", "#ff0000");
	gradient1
		.append("stop")
		.attr("offset", "100%")
		.attr("stop-color", "#800000");
	var c4gradient="url(#gradient1)";
	
	var gradient2 = d3_svg
		.append("linearGradient")
		.attr("x1", "0%")
		.attr("x2","100%")
		.attr("y1", "0")
		.attr("y2", "0")
		.attr("id", "gradient2");
	gradient2
		.append("stop")
		.attr("offset", "0%")
		.attr("stop-color", "green");
    gradient2
		.append("stop")
		.attr("offset", "25%")
		.attr("stop-color", "yellow");		
	gradient2
		.append("stop")
		.attr("offset", "50%")
		.attr("stop-color", "orange");
	gradient2
		.append("stop")
		.attr("offset", "100%")
		.attr("stop-color", "red");
	var c5gradient="url(#gradient2)";
	
	var gradient3 = d3_svg
		.append("linearGradient")
		.attr("x1", "0%")
		.attr("x2","100%")
		.attr("y1", "0")
		.attr("y2", "0")
		.attr("id", "gradient3");
	gradient3
		.append("stop")
		.attr("offset", "0%")
		.attr("stop-color", "yellow");
	gradient3
		.append("stop")
		.attr("offset", "20%")
		.attr("stop-color", "orange");
	gradient3
		.append("stop")
		.attr("offset", "100%")
		.attr("stop-color", "red");
	var c6gradient="url(#gradient3)";
	
	var range_p_color=d3.scale.linear().domain([min_max_diff_pressure[1],0,-0.0001,(min_max_diff_pressure[0]/2.0), min_max_diff_pressure[0]]).range(["#006622","#80ffaa","#ff8533","#ff0000","#800000"]);
	var legend_bars ;
	var range_res;
	
	var legend_psi = d3_svg.append("g")
			.attr("class", "legend_psi")
			.attr("x", 0)
			.attr("y", 25)
			.attr("height", 100)
			.attr("width", 100);
	
	//console.log(left_coord)
	//console.log(low_coord)
	//console.log(width_coord)
	//console.log(height_coord)
	if (team_size>1){
		if (server_maintenance){
			document.getElementById('welcometitle').innerHTML='<b><font color="red">Game server is under maintenance !!! Game is not playable for the moment.</font><b>' ;
		}
		else {
			document.getElementById('welcometitle').innerHTML="Player "+myuser.name+ " / Team "+ team+" / Team member " +member ;
		}
	}
	else{
		if (server_maintenance){
			document.getElementById('welcometitle').innerHTML='<b><font color="red">Game server is under maintenance !!! Game is not playable for the moment.</font><b>' ;
		}
		else{
			document.getElementById('welcometitle').innerHTML="Player "+myuser.name ;
		}
	}
	// intialialising history + output values (cost, pressure differential, nb nodes with deficit pressure, ...) 
	//var myhistory = myuser['history']['sessions'];
	
	
	
	
	
	
	//document.getElementById('info-win').style.left=((window.innerWidth*0.95)-300)+"px";
	//document.getElementById('info-win').style.top=170+"px";
	document.getElementById('slideout').style.top= ((window.innerHeight)*0.20)+"px";
	
	
	
	document.getElementById('info-win').style.left=((window.innerWidth*0.05)+10)+"px";
	document.getElementById('info-win').style.top=(((window.innerHeight)*0.25)+185)+"px";
	document.getElementById('info-warning').style.left=((window.innerWidth*0.8)-200)+"px";
	document.getElementById('info-warning').style.top=(((window.innerHeight)*0.13)+10)+"px";
	document.getElementById('info-cost').style.left=((window.innerWidth*0.05)+10)+"px";
	document.getElementById('info-cost').style.top=((window.innerHeight)*0.25)+"px";
	document.getElementById('info-top').style.left=((window.innerWidth*0.05)+320)+"px";
	document.getElementById('info-top').style.top=120+"px";
	document.getElementById('info-top').style.width=((window.innerWidth*0.9*0.6))+"px";
	
	document.getElementById('masterUI').style.top=15+"px";
	document.getElementById('masterUI').style.left=150+"px";
	document.getElementById('score-message').style.top=15+"px";
	document.getElementById('score-message').style.left=450+"px";
	document.getElementById('high-score-table').style.top=100+"px";
	document.getElementById('high-score-table').style.left=100+"px";
	
	if (game.game_mode=='aqualibrium'){
		//document.getElementById('maxPriceB').disabled=true;
		//document.getElementById('maxPriceB').innerHTML="";
		//document.getElementById('clickMe').className += " hide";
		document.getElementById('maxPriceB').className += " hide";
		document.getElementById('closeb').className += " hide";
		document.getElementById('extrap').className += " hide";
	}
	
	
	
	var textureLoader = new THREE.TextureLoader();
	var mapA = textureLoader.load( "images/circle.png" );
	var mapB = textureLoader.load( "images/circle2.png" );
	
	
	var mySelect = document.getElementById("mySessionSelect")
	var latest_session;
	var latest_pressures_raw=[]; 
	var	latest_pressures =[];
	var user_latest_diameters={};
	var team_latest_diameters={};
	
	
	
	// get objects with all network data used for graphic representation and interaction
	var all_junctions = network['junctions'];
	var all_pipes = network['pipes'];
	//console.log(all_pipes)
	var junctions_nb = Object.keys(all_junctions).length;
	var pipes_nb=Object.keys(network['pipes']).length;
	// add new values considered
	
	var overall_cost=0.0;
	var leakage=0.0;
	var pressure_deficit=0.0;
	var water_age=0.0;
	var nb_deficit_nodes=0;
	
	var overall_score=0.0;
	var reservoir_1=0.0;
	var reservoir_2=0.0;
	var reservoir_3=0.0;
	var score_valid=false;
	
	// populate initial team state if empty
	var team_state=[];
	var team_junctions_data={};
	var user_junctions_data={};
	//var team_junctions_max_age={};
	var team_pipes_leakage={};
	var user_pipes_leakage={};
	// output result has 10 starting data points :
	// <time-stamp> <gamename> <jobid> <c/e> <cost> <leakage> <waterage> <pressure-deficit> <failures> <warnings> [<junction-id> <minpressure> <maxpressure> <maxage>] [<pipe-id> <leakage>]
	var res1_bar0;
	var res1_bar;
	var res1_text;
	var res2_bar0;
	var res2_bar;
	var res2_text;
	var res3_bar0;
	var res3_bar;
	var res3_text;
	
	if (team!=-1){
		if (game.last_solution && game.last_solution[team] && game.last_solution[team].length>0){
			team_state= game.last_solution[team];
		}
		else{
			team_state= game.initial_solution;
			user_latest_diameters={};
			//user_junctions_data
			if (game.game_mode=='aqualibrium'){
				if (team_state[9]===true || team_state[9]==='true' || team_state[9]==="true"){
					score_valid=true;
				}
				for (pipe in all_pipes){
					//user_latest_diameters[pipe]=all_pipes[pipe]['Diameter'];
					//if (score_valid){
						team_latest_diameters[pipe]=diameters_2_index[all_pipes[pipe]['Diameter']];
					//}
					//else{
					//	team_latest_diameters[pipe]=0;
					//}
				}
			}
		}
		
		if(team_state && team_state.length>0){
			if (team_state.length==0){
				team_state=game.initial_solution;	
			}
			if (game.game_mode=='aqualibrium'){
				overall_score=parseFloat(team_state[8]);
				reservoir_1=parseFloat(team_state[5]);
				reservoir_2=parseFloat(team_state[6]);
				reservoir_3=parseFloat(team_state[7]);
				if (team_state[9]===true || team_state[9]==='true' || team_state[9]==="true"){
					score_valid=true;
					aqua_valid=true;
				}
				//if (score_valid==true){
					
				//}
				
				team_junctions_data={}
				var indp=10;
				
				//console.log(team_junctions_data)
				for (var i =0; i<pipes_nb;i++){
					var pid= team_state[indp];
					indp++;
					var pipediam= parseInt(team_state[indp]);
					indp++;
					if (pid){
						if (pipediam!=-1){
							user_latest_diameters[pid]=pipediam;
							
							team_latest_diameters[pid]=pipediam;
							if (score_valid==false){
								user_latest_diameters[pid]=0;
								team_latest_diameters[pid]=0;
							}
						}
						else{
							
							team_latest_diameters[pid]=diameters_2_index[all_pipes[pid]['Diameter']];
							if (score_valid==false){
								
								team_latest_diameters[pid]=0;
							}
						}
					}
				}
			}
			//console.log(user_latest_diameters)
			//console.log(team_latest_diameters)
			//console.log(team_pipes_leakage)
			//console.log(team_latest_diameters)
		}
		
	}
	
	if (game.game_mode=='aqualibrium'){
		legend_bars = d3_svg.append("g")
			.attr("class", "legend_bars")
			.attr("x", 0)
			.attr("y", 25)
			.attr("height", 100)
			.attr("width", 100);
		range_res=d3.scale.linear().domain([0.0,1.0]).range([0,(d3_height *0.4)]);
		res1_bar0= legend_bars.append("rect")
		  .attr("x", (window.innerWidth*0.05)+15)
		  .attr("y", (((d3_height *0.4)-range_res(reservoir_1))+95))//.attr("y", (7))
		  .attr("width", (d3_width *0.04))
		  .attr("height", range_res(reservoir_1))
		  .style("fill", "#3399ff");
		res1_bar= legend_bars.append("rect")
		  .attr("x", (window.innerWidth*0.05)+15)
		  .attr("y", 95)//.attr("y", (7))
		  .attr("width", (d3_width *0.04))
		  .attr("height", (d3_height *0.4))
		  .style("fill", "none")
		  .style("stroke", mycol)
		  .style("stroke-width", 1);
		legend_bars.append("text")
		  .attr("x",(window.innerWidth*0.05)+8) 
		  .attr("y", 88)
		  .attr("height",30)
		  .attr("width",100)
		  .style("fill", mycol).style("font-weight", "bold")//.style("font-style", "italic")
		  .style("font-size","large")
		  .text("Res1");
		res1_text = legend_bars.append("text")
		  .attr("x",(window.innerWidth*0.05)+8) 
		  .attr("y", 88+(d3_height *0.4)+25)
		  .attr("height",30)
		  .attr("width",100)
		  .style("fill", mycol).style("font-weight", "bold")//.style("font-style", "italic")
		  .style("font-size","large")
		  .text((reservoir_1).toFixed(3));
		res2_bar0= legend_bars.append("rect")
		  .attr("x", (window.innerWidth*0.05)+80)
		  .attr("y", (((d3_height *0.4)-range_res(reservoir_2))+95))//.attr("y", (7))
		  .attr("width", (d3_width *0.04))
		  .attr("height", range_res(reservoir_2))
		  .style("fill", "#3399ff");
		res2_bar= legend_bars.append("rect")
		  .attr("x", (window.innerWidth*0.05)+80)
		  .attr("y", 95)//.attr("y", (7))
		  .attr("width", (d3_width *0.04))
		  .attr("height", (d3_height *0.4))
		  .style("fill", "none")
		  .style("stroke", mycol)
		  .style("stroke-width", 1);
		legend_bars.append("text")
		  .attr("x",(window.innerWidth*0.05)+73) 
		  .attr("y", 88)
		  .attr("height",30)
		  .attr("width",100)
		  .style("fill", mycol).style("font-weight", "bold")//.style("font-style", "italic")
		  .style("font-size","large")
		  .text("Res2");
		res2_text = legend_bars.append("text")
		  .attr("x",(window.innerWidth*0.05)+73) 
		  .attr("y", 88+(d3_height *0.4)+25)
		  .attr("height",30)
		  .attr("width",100)
		  .style("fill", mycol).style("font-weight", "bold")//.style("font-style", "italic")
		  .style("font-size","large")
		  .text((reservoir_2).toFixed(3));
		res3_bar0= legend_bars.append("rect")
		  .attr("x", (window.innerWidth*0.05)+145)
		  .attr("y", (((d3_height *0.4)-range_res(reservoir_3))+95))//.attr("y", (7))
		  .attr("width", (d3_width *0.04))
		  .attr("height", range_res(reservoir_3))
		  .style("fill", "#3399ff");
		res3_bar= legend_bars.append("rect")
		  .attr("x", (window.innerWidth*0.05)+145)
		  .attr("y", 95)//.attr("y", (7))
		  .attr("width", (d3_width *0.04))
		  .attr("height", (d3_height *0.4))
		  .style("fill", "none")
		  .style("stroke", mycol)
		  .style("stroke-width", 1);
		legend_bars.append("text")
		  .attr("x",(window.innerWidth*0.05)+138) 
		  .attr("y", 88)
		  .attr("height",30)
		  .attr("width",100)
		  .style("fill", mycol).style("font-weight", "bold")//.style("font-style", "italic")
		  .style("font-size","large")
		  .text("Res3");
		res3_text = legend_bars.append("text")
		  .attr("x",(window.innerWidth*0.05)+138) 
		  .attr("y", 88+(d3_height *0.4)+25)
		  .attr("height",30)
		  .attr("width",100)
		  .style("fill", mycol).style("font-weight", "bold")//.style("font-style", "italic")
		  .style("font-size","large")
		  .text((reservoir_3).toFixed(3));
	}
	
	//var st="01/06/2016-18:41:09 m1 0.00000 519999948.00000 0.00000 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 ";
	//console.log(st.split(" "))
	//console.log(team_state)
	//console.log(team_junctions_data)
	//console.log(team_junctions_max_age)
	//console.log(team_pipes_leakage)
	//console.log(Object.keys(team_pipes_leakage).length);
	
	var myhistory;
	//game.game_state[team][game.game_state[team].length-1]
	if (game.game_state.hasOwnProperty(team)){
		//console.log(game.game_state)
		myhistory = game.game_state[team];
		
	}
	else{
		myhistory = [];
		//console.log(myhistory)
	}
	if (myhistory.length>0){
		
		//latest_session= myhistory[myhistory.length-2];
		//latest_pressures_raw=myhistory[myhistory.length-2];
		//// to change as not valid anymore
		//user_latest_diameters=[]
		//for (var i=1;i<22;i++){
		//	user_latest_diameters.push(parseInt(latest_session[i]));
		//}
		
		var ind = myhistory.length-1;
		
		for (var i=0;i<myhistory.length;i++){
		
		//console.log(myhistory[ind][0])
			var opt = document.createElement('option');
			opt.value = i;
			if (game.game_mode=='aqualibrium'){
				opt.innerHTML = "result "+(i+1)+" - score "+parseFloat(myhistory[i][0][7]).toFixed(3)+" - res1 "+parseFloat(myhistory[i][0][4]).toFixed(3)+"- res2 "+parseFloat(myhistory[i][0][5]).toFixed(3)+" - res3 "+parseFloat(myhistory[i][0][6]).toFixed(3);
			}
			mySelect.appendChild(opt);
		}	
			
		 mySelect.value = ind;
		
		
	}
	else{
		//latest_session= myuser.name+ "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0";
		//latest_session= '"'+myuser.name+ '" "'+ game.name+ '" "'+ game.network_name+'" '+ game.time_points ;
		//user_latest_diameters={};
		//user_junctions_data
		//for (pipe in all_pipes){
			//user_latest_diameters[pipe]=all_pipes[pipe]['Diameter'];
		//	team_latest_diameters[pipe]=diameters_2_index[all_pipes[pipe]['Diameter']];
		//}
		//console.log(team_latest_diameters)
		//for (var i=1;i<22;i++){
		//	user_latest_diameters.push(0);
		//}
		
		// consider the pipes that the user as a team member can change + the other pipes changed by other team members
		//for (elem in game.){}
	}
	var latest_input = '';
	// for (var i=0;i<user_latest_diameters.length;i++){
		// if (i<user_latest_diameters.length-1){
			// latest_input+=user_latest_diameters[i]+" ";
		// }
		// else{
			// latest_input+=user_latest_diameters[i]
		// }	
	// }
	
	
	var topinfo = '';

	topinfo +='<table class="table-condensed" style="font-size:16px;border-style: solid;border-color: '+mycol+';border-width: 0px;color:'+mycol+'">';
	
	if (game.game_mode=='aqualibrium'){
		topinfo +='<tr><td>Score: </td><td>'+parseFloat(overall_score).toFixed(3)+'</td><td>Reservoir 1: </td><td>'+(reservoir_1).toFixed(5)+'</td><td>Reservoir 2: </td><td>'+(reservoir_2).toFixed(5)+'</td><td>Reservoir 3: </td><td>'+(reservoir_3).toFixed(5)+'</td></tr></table>'
	}
	document.getElementById('info-top').innerHTML=topinfo;
	
	
	
	var all_tanks=network['tanks'];
	var tanks_nb = Object.keys(all_tanks).length;
	
	var all_reservoirs=network['reservoirs'];
	var reservoirs_nb = Object.keys(all_reservoirs).length;
	var all_fixed_pipes={};
	var all_changeable_pipes={};
	//console.log(game['pipes_roles'])
	for (elem in network['pipes']){
		//console.log(game['pipes_roles'][elem])
		//console.log(member)
		if (game['pipes_roles'].hasOwnProperty(elem) && (game['pipes_roles'][elem]==member)){
			all_changeable_pipes[elem]=network['pipes'][elem];
		}
		else{
			all_fixed_pipes[elem]=network['pipes'][elem];
		}
	}
	var fixed_pipes_nb = Object.keys(all_fixed_pipes).length;
	var changeable_pipes_nb = Object.keys(all_changeable_pipes).length;
	//console.log(changeable_pipes_nb)
	//console.log(fixed_pipes_nb)
	//console.log(game['pipes_roles'])
	var all_fixed_pumps={};
	var all_changeable_pumps={};
	for (elem in network['pumps']){
		if (game['pumps_roles'].hasOwnProperty(elem) && game['pumps_roles'][elem]==member){
			all_changeable_pumps[elem]=network['pumps'][elem];
		}
		else{
			all_fixed_pumps[elem]=network['pumps'][elem];
		}
	}
	var fixed_pumps_nb = Object.keys(all_fixed_pumps).length;
	var changeable_pumps_nb = Object.keys(all_changeable_pumps).length;
	
	var all_fixed_valves={};
	var all_changeable_valves={};
	for (elem in network['valves']){
		if (game['valves_roles'].hasOwnProperty(elem) && game['valves_roles'][elem]==member){
			all_changeable_valves[elem]=network['valves'][elem];
		}
		else{
			all_fixed_valves[elem]=network['valves'][elem];
		}
	}
	var fixed_valves_nb = Object.keys(all_fixed_valves).length;
	var changeable_valves_nb = Object.keys(all_changeable_valves).length;
	
	// console.log(junctions_nb)
	// console.log(tanks_nb)
	// console.log(reservoirs_nb)
	// console.log(fixed_pipes_nb)
	// console.log(changeable_pipes_nb)
	// console.log(fixed_pumps_nb)
	// console.log(changeable_pumps_nb)
	// console.log(fixed_valves_nb)
	// console.log(changeable_valves_nb)
	
	
	//console.log(all_reservoirs)
	//console.log(all_junctions)
	
	
	var left_coord= parseFloat(network['backdrop_data'][0]);
	var low_coord= parseFloat(network['backdrop_data'][1]);
	var width_coord= parseFloat(network['backdrop_data'][2])-left_coord;
	var height_coord= parseFloat(network['backdrop_data'][3])-low_coord;
	
	var max_3d_width= 200;
	if (game.game_mode=='aqualibrium'){
		max_3d_width= 200;
	}
	if ((junctions_nb+tanks_nb+reservoirs_nb)>20){
		max_3d_width= ((junctions_nb+tanks_nb+reservoirs_nb)*max_3d_width)/15;
	}
	
	var scale_3d= max_3d_width/Math.max(width_coord,height_coord);
	
	//var max_3d_width= 200.0;
	//var scale_3d= max_3d_width/Math.max(width_coord,height_coord);
	//var scale_nodes= (20/(junctions_nb+tanks_nb+reservoirs_nb))*10;
	var scale_nodes= 10;//(junctions_nb+tanks_nb+reservoirs_nb)/40;//(20/(junctions_nb+tanks_nb+reservoirs_nb))*10;
	if (game.game_mode=='aqualibrium'){
		scale_nodes= 10;
	}
	//var scale_nodes_text= (20/(junctions_nb+tanks_nb+reservoirs_nb))*10;
	
	var items = document.querySelectorAll('.circle a');
	var col1=Math.ceil((items.length-2)/2);
	var col2=(items.length-2)-col1;
	
	items[0].style.left = (-5).toFixed(4) + "%";
	items[0].style.top = (-18 ).toFixed(4) + "%";
	items[1].style.left = (-5 + (30)).toFixed(4) + "%";
	items[1].style.top = (-18 ).toFixed(4) + "%";
	if (game.game_mode=='aqualibrium'){
		document.getElementById('c1').style.visibility="hidden";
	}
	//console.log(col1)
	//console.log(col2)
	for (var i=2; i<(col1+2);i++){
		items[i].style.left = (-5).toFixed(4) + "%";
		items[i].style.top = (-15 +((i-0.5)*13)).toFixed(4) + "%";
	}
	for (var i=(2+col1); i<(2+col1+col2);i++){
		items[i].style.left = (-5 + (30)).toFixed(4) + "%";
		items[i].style.top = (-15 +((i-0.5-col1)*13)).toFixed(4) + "%";
	}
	
	
	$('#x0').bind('contextmenu', function(e) {
		return false;
	});
	
	//$('#x1').bind('contextmenu', function(e) {
	//	return false;
	//});
	
	function firstRowRenderer(instance, td, row, col, prop, value, cellProperties) {
		Handsontable.renderers.TextRenderer.apply(this, arguments);
		//if (value === 'yes') {
		  td.style.background = '#e6ffe6';
		  //td.style.fontWeight = 'bold';
		  //td.style.fontWeight = 'bold';
		//}
		//else {
		//  td.style.background = '';
		//}
	}
	
	var mlistPipes=[];//jQuery.makeArray(obj_pumps);
	//console.log(all_changeable_pipes)
	if (game.game_mode=='aqualibrium'){
	//console.log(all_pipes)
		for( var elem in all_pipes) {
			var tmp={};
			tmp['ID']=elem;
			var index_diameter=0;
			
			if (_.isEmpty(user_latest_diameters)){
				//console.log(team_latest_diameters[pcid])
				if (team_latest_diameters[elem]==-1){
					index_diameter=diameters_2_index[all_pipes[elem]['Diameter']];
					
				}
				else{
					index_diameter=team_latest_diameters[elem];
					
				}
			}
			else{
				if (user_latest_diameters.hasOwnProperty(elem)){
					//console.log('pb 2 1')
					index_diameter=user_latest_diameters[elem];
					//console.log(index_diameter)
					if (user_latest_diameters[elem]==-1){
						index_diameter=diameters_2_index[all_pipes[elem]['Diameter']];
						
					}
					
				}
				else{
					//console.log(elem)
					//if (team_latest_diameters[elem]){
						index_diameter=team_latest_diameters[elem];
					//}
					//console.log(elem)
					//console.log(team_latest_diameters[elem])
				}
			}
			
			if (index_diameter && index_diameter!=0){
				if (score_valid){
					tmp['diameter']=index_2_diameters[index_diameter];//all_changeable_pipes[elem]['Diameter'];
				}
				else{
					tmp['diameter']=0;
				}
			}
			else{
				if (index_diameter==0){
					tmp['diameter']=0;
				}
				else{
					tmp['diameter']=all_pipes[elem]['Diameter'];
				}
				
				
			}
			tmp['length']=all_pipes[elem]['Length'];
			if (all_changeable_pipes.hasOwnProperty(elem)){
				tmp['mine']='yes';
			}
			else{
				tmp['mine']='no';
			}
			//tmp['repleacable']=all_changeable_pipes[elem]['Replaceable'];
			mlistPipes.push(tmp);
		}
		//console.log(mlistPipes)
	}
	//listPipes.sort(function(a, b){return a.ID.localeCompare(b.ID);});
	//console.log(all_changeable_pipes)
	var $container1 = $("#table1");
	if (game.game_mode=='aqualibrium'){
		$container1.handsontable({
		  data: mlistPipes,
		  stretchH:"all",
		  columnSorting: true,
		  sortIndicator: true,
		  startRows: 1,
		  startCols: 4,
		  colHeaders: true,
		  colHeaders: ['pipe', 'diameter','length','modifiable'],
		  columns: [
			{data: "ID",editor: false},
			{data: "diameter",type: 'dropdown', source: pipe_diameters},
			{data: "length", editor: false},
			{data: "mine", editor: false}//,
			//{data: "repleacable", editor: false}
		  ],
		  cells: function (row, col, prop) {
			var cellProperties = {};

			  //if (row === 0 || this.instance.getData()[row][col] === 'readOnly') {
			  //  cellProperties.readOnly = true; // make cell read-only if it is first row or the text reads 'readOnly'
			  //}
			  if (this.instance.getData()[row][3] === 'no') {
				
				//cellProperties.readOnly = true;
			  }
			  else{
				if (col===0){
				//cellProperties.renderer = firstRowRenderer; // uses function directly
				}
			  }
			  //else {
			  //  cellProperties.renderer = "negativeValueRenderer"; // uses lookup map
			  //}

			  return cellProperties;
		  },
		  afterChange: function(changes, source) {
				//var listChanged =this.getData();
				//for (var i=0, j=listChanged.length; i<j; i++){
				//	if (pipes_roles.hasOwnProperty(listChanged[i][0])){
				//		pipes_roles[listChanged[i][0]]=parseInt(listChanged[i][1]);
				//	}
				//}
				//document.getElementById("pipes-roles").value=JSON.stringify(pipes_roles);
				//console.log(pipes_roles)
		  },
		  afterSelectionEnd: function(r, p,r2,p2) {
			//console.log(r+" : "+r2)
			//var tempdata = this.instance;
			allSelectedPipes = [];
			var len = this.getData().length;
			var tempSelect = this.getData(r,0,r2,0);
			//console.log(tempSelect.length)
			//console.log(network['pipes'].length)
			if (tempSelect.length<len){
				for (var i=0;i<tempSelect.length;i++){
					allSelectedPipes.push(tempSelect[i][0]);
				}
				//console.log(allSelectedPipes)
				//console.log(all_pipes)
			}
			//
			// underline selected pipes
		  },
		  minSpareRows: 0
		});
	}
	var mlistPumps=[];//jQuery.makeArray(obj_pumps);
	//console.log(all_changeable_pipes)
	for( var elem in all_changeable_pumps) {
		var tmp={};
		tmp['ID']=elem;
		tmp['id']=elem;//all_changeable_pumps[elem]['Diameter'];
		mlistPumps.push(tmp);
	}
	//listPipes.sort(function(a, b){return a.ID.localeCompare(b.ID);});
	//console.log(listPipes)
	var $container2 = $("#table2");
	$container2.handsontable({
	  data: mlistPumps,
	  stretchH:"all",
	  columnSorting: true,
	  //renderAllRows: true,
	  //width: 400,
	  //height: 400,
	  startRows: 1,
	  startCols: 2,
	  colHeaders: true,
	  colHeaders: ['id', 'id'],
	  columns: [
		{data: "ID",editor: false},
		{data: "id", editor: false}
	  ],
	  afterChange: function(changes, source) {
			//var listChanged =this.getData();
			//for (var i=0, j=listChanged.length; i<j; i++){
			//	if (pipes_roles.hasOwnProperty(listChanged[i][0])){
			//		pipes_roles[listChanged[i][0]]=parseInt(listChanged[i][1]);
			//	}
			//}
			//document.getElementById("pipes-roles").value=JSON.stringify(pipes_roles);
			//console.log(pipes_roles)
	  },
	  minSpareRows: 0
	});
	var mlistValves=[];//jQuery.makeArray(obj_pumps);
	//console.log(all_changeable_pipes)
	for( var elem in all_changeable_valves) {
		var tmp={};
		tmp['ID']=elem;
		tmp['id']=elem;//all_changeable_pumps[elem]['Diameter'];
		mlistValves.push(tmp);
	}
	//listPipes.sort(function(a, b){return a.ID.localeCompare(b.ID);});
	//console.log(listPipes)
	var $container3 = $("#table3");
	$container3.handsontable({
	  data: mlistValves,
	  stretchH:"all",
	  columnSorting: true,
	  //renderAllRows: true,
	  //width: 400,
	  //height: 400,
	  startRows: 1,
	  startCols: 2,
	  colHeaders: true,
	  colHeaders: ['id', 'id'],
	  columns: [
		{data: "ID",editor: false},
		{data: "id", editor: false}
	  ],
	  afterChange: function(changes, source) {
			//var listChanged =this.getData();
			//for (var i=0, j=listChanged.length; i<j; i++){
			//	if (pipes_roles.hasOwnProperty(listChanged[i][0])){
			//		pipes_roles[listChanged[i][0]]=parseInt(listChanged[i][1]);
			//	}
			//}
			//document.getElementById("pipes-roles").value=JSON.stringify(pipes_roles);
			//console.log(pipes_roles)
	  },
	  minSpareRows: 0
	});
	var mlistJunctions=[];//jQuery.makeArray(obj_pumps);
	if (game.game_mode=='aqualibrium'){
		for( var elem in all_junctions) {
			var tmp={};
			tmp['ID']=elem;
			tmp['Elevation']=all_junctions[elem]['Elev'];;//all_changeable_pumps[elem]['Diameter'];
			mlistJunctions.push(tmp);
		}
	}
	//listPipes.sort(function(a, b){return a.ID.localeCompare(b.ID);});
	//console.log(listPipes)
	var $container4 = $("#table4");
	if (game.game_mode=='aqualibrium'){
		$container4.handsontable({
		  data: mlistJunctions,
		  stretchH:"all",
		  columnSorting: true,
		  //renderAllRows: true,
		  //width: 400,
		  //height: 400,
		  startRows: 1,
		  startCols: 2,
		  colHeaders: true,
		  colHeaders: ['id', 'elevation'],
		  columns: [
			{data: "ID",editor: false},
			{data: "Elevation",editor: false}
		  ],
		  afterChange: function(changes, source) {
				
		  },
		  minSpareRows: 0
		});
	}
	
	var mlistReservoirs=[];//jQuery.makeArray(obj_pumps);
	//console.log(all_reservoirs)
	for( var elem in all_reservoirs) {
		var tmp={};
		tmp['ID']=elem;
		tmp['Head']=all_reservoirs[elem]['Head'];;//all_changeable_pumps[elem]['Diameter'];
		//tmp['MinPressure']=elem;//all_junctions[elem]['MinPressure'];;//all_changeable_pumps[elem]['Diameter'];
		mlistReservoirs.push(tmp);
	}
	//listPipes.sort(function(a, b){return a.ID.localeCompare(b.ID);});
	//console.log(listPipes)
	var $container5 = $("#table5");
	$container5.handsontable({
	  data: mlistReservoirs,
	  stretchH:"all",
	  columnSorting: true,
	  //renderAllRows: true,
	  //width: 400,
	  //height: 400,
	  startRows: 1,
	  startCols: 2,
	  colHeaders: true,
	  colHeaders: ['id', 'head'],
	  columns: [
	    {data: "ID",editor: false},
		{data: "Head",editor: false}//,
		//{data: "MinPressure", editor: false}
	  ],
	  afterChange: function(changes, source) {
			//var listChanged =this.getData();
			//for (var i=0, j=listChanged.length; i<j; i++){
			//	if (pipes_roles.hasOwnProperty(listChanged[i][0])){
			//		pipes_roles[listChanged[i][0]]=parseInt(listChanged[i][1]);
			//	}
			//}
			//document.getElementById("pipes-roles").value=JSON.stringify(pipes_roles);
			//console.log(pipes_roles)
	  },
	  minSpareRows: 0
	});
	var mlistTanks=[];//jQuery.makeArray(obj_pumps);
	//console.log(all_tanks)
	for( var elem in all_tanks) {
		var tmp={};
		tmp['ID']=elem;
		tmp['Elevation']=elem;//all_junctions[elem]['Elev'];;//all_changeable_pumps[elem]['Diameter'];
		tmp['MinPressure']=elem;//all_junctions[elem]['MinPressure'];;//all_changeable_pumps[elem]['Diameter'];
		mlistTanks.push(tmp);
	}
	//listPipes.sort(function(a, b){return a.ID.localeCompare(b.ID);});
	//console.log(listPipes)
	var $container6 = $("#table6");
	$container6.handsontable({
	  data: mlistTanks,
	  stretchH:"all",
	  columnSorting: true,
	  //renderAllRows: true,
	  //width: 400,
	  //height: 400,
	  startRows: 1,
	  startCols: 3,
	  colHeaders: true,
	  colHeaders: ['id', 'elevation','min_pressure'],
	  columns: [
	    {data: "ID",editor: false},
		{data: "Elevation",editor: false},
		{data: "MinPressure", editor: false}
	  ],
	  afterChange: function(changes, source) {
			//var listChanged =this.getData();
			//for (var i=0, j=listChanged.length; i<j; i++){
			//	if (pipes_roles.hasOwnProperty(listChanged[i][0])){
			//		pipes_roles[listChanged[i][0]]=parseInt(listChanged[i][1]);
			//	}
			//}
			//document.getElementById("pipes-roles").value=JSON.stringify(pipes_roles);
			//console.log(pipes_roles)
	  },
	  minSpareRows: 0
	});
	
	function updateSpreadSheet(){
		if (game.game_mode=='aqualibrium'){
			var ind=0;
			//console.log(diameters_2_index)
			for( var elem in all_pipes) {
				var tmp={};
				tmp['ID']=elem;
				var index_diameter=0;
				
				if (_.isEmpty(user_latest_diameters)){
					//console.log(team_latest_diameters[pcid])
					if (team_latest_diameters[elem]==-1){
						index_diameter=diameters_2_index[all_pipes[elem]['Diameter']];
					}
					else{
						index_diameter=team_latest_diameters[elem];
					}
				}
				else{
					if (user_latest_diameters.hasOwnProperty(elem)){
						//console.log('pb 2 1')
						index_diameter=user_latest_diameters[elem];
						
						if (user_latest_diameters[elem]==-1){
							index_diameter=diameters_2_index[all_pipes[elem]['Diameter']];
							
						}
					}
					else{
						//console.log('pb 2 2')
						index_diameter=team_latest_diameters[elem];
					}
				}
				//if (elem==72){
				//	console.log(index_diameter)
				//}
				//if (elem==73){
				//	console.log(index_diameter)
				//}
				if (index_diameter==-1){
					index_diameter=diameters_2_index[all_pipes[elem]['Diameter']];
				}
				tmp['diameter']=index_2_diameters[index_diameter];//all_changeable_pipes[elem]['Diameter'];
				tmp['length']=all_pipes[elem]['Length'];
				if (all_changeable_pipes.hasOwnProperty(elem)){
					tmp['mine']='yes';
				}
				else{
					tmp['mine']='no';
				}
				//tmp['repleacable']=all_changeable_pipes[elem]['Replaceable'];
				//mlistPipes.push(tmp);
				
				mlistPipes[ind]['diameter']=tmp['diameter'];
				mlistPipes[ind]['length']=tmp['length'];
				mlistPipes[ind]['mine']=tmp['mine'];
				ind++;
			}
			$('#table1').handsontable('render');
			ind=0;
			for( var elem in all_junctions) {
				var tmp={};
				tmp['ID']=elem;
				tmp['Elevation']=all_junctions[elem]['Elev'];;//all_changeable_pumps[elem]['Diameter'];
				ind++;
			}
			$('#table4').handsontable('render');
		}
	}
	
	function resetSpreadSheet(){
		
		//var hd = $('#table1').handsontable();
		//hd.render();
		//console.log(mlistPipes)
	}
	updateWarning();
	var container, separation = 100, amountX = 50, amountY = 50;
	function init() {
		container = document.getElementById("3d-graph");//document.createElement('div');
		camera = new THREE.PerspectiveCamera( 70, (window.innerWidth*0.9) /( window.innerHeight-200), 1, 100000000 );
		
		if (game.game_mode=='aqualibrium'){
			camera.position.z = 105;
			camera.position.y = 105;
		}
		scene = new THREE.Scene();
		//camera.up.set( 0, -1, 0 );
		if( Detector.webgl ){ 
			renderer = new THREE.WebGLRenderer({ 
				antialias : true,	// to get smoother output 
				//preserveDrawingBuffer : true,	// to allow screenshot ,
				logarithmicDepthBuffer : true	
			}); 
			isWebGl=true;
		
		
		}else{ 
			//Detector.addGetWebGLMessage(); 
			renderer	= new THREE.CanvasRenderer(); 
			isWebGl=false;
		} 
		var resolution = new THREE.Vector2( window.innerWidth*0.9, window.innerHeight-200 );
		//renderer = new THREE.CanvasRenderer();
		//isWebGl=false;	
		if (isWebGl==true){
			document.getElementById("gds").style.visibility="visible";
		}
		else{
			document.getElementById("gds").style.visibility="hidden";
		}
		//console.log(renderer.getContext('2d'))
		
		renderer.setPixelRatio( window.devicePixelRatio );
		renderer.setSize( window.innerWidth*0.9, window.innerHeight-200 );
		if (UIColor=="black"){
			renderer.setClearColor( 0x000000 );
			widget_color = 0xffffff
		}
		else if (UIColor=="white"){
			renderer.setClearColor( 0xffffff );
			widget_color = 0x000000;
		}
		container.innerHTML="";
		container.appendChild( renderer.domElement );
		
		stats = new Stats();
		container.appendChild( stats.dom );
		stats.dom.style.top = parseInt(window.innerHeight-48 )+"px";
		stats.dom.style.left = 0+"px";
		document.getElementById('mycm').style.left=(-600)+"px";
		document.getElementById('mycm').style.top=(-600)+"px";
		$('#mycm').bind('contextmenu', function(e) {
			return false;
		}); 
		
		controls = new THREE.OrbitControls( camera, renderer.domElement );
		
		controls.enableDamping = true;
		controls.dampingFactor = 0.25;
		controls.enableZoom = true;
		controls.enablePan = true;
		controls.maxPolarAngle = Math.PI * 0.495;
		lower_plane = new THREE.Object3D();
		lines = new THREE.Object3D();
		if (isWebGl==true){
			if (detailLevel==1){
				particleLight = new THREE.Mesh( new THREE.SphereGeometry( 4, 8, 8 ), new THREE.MeshBasicMaterial( { color: 0xffffff } ) );
				particleLight.position.x = 200000;
				particleLight.position.y = 100000;
				scene.add( particleLight );

				// Lights

				scene.add( new THREE.AmbientLight( 0xcccccc ) );

				var directionalLight = new THREE.DirectionalLight( /*Math.random() * */ 0xffffff, 0.050 );

				directionalLight.position.x = Math.random() - 0.5;
				directionalLight.position.y = Math.random() - 0.5;
				directionalLight.position.z = Math.random() - 0.5;

				directionalLight.position.normalize();

				scene.add( directionalLight );

				var pointLight = new THREE.PointLight( 0xffffff, 1 );
				particleLight.add( pointLight );
				
				
				var ptgeometry = new THREE.SphereGeometry( 7, 10, 10 );
				var ptmaterial = new THREE.MeshBasicMaterial( {color:0xffffff, wireframe:true});
				target = new THREE.Mesh( ptgeometry, ptmaterial );
				target.name = "target";
				target.position.x= 10000000;
				target.position.y=10000000;
				target.position.z=10000000;
				lines.add( target );
			}
			else{
				particleLight = new THREE.Mesh( new THREE.SphereGeometry( 4, 8, 8 ), new THREE.MeshBasicMaterial( { color: 0xffffff } ) );
				particleLight.position.x = 200000;
				particleLight.position.y = 100000;
				scene.add( particleLight );

				// Lights

				scene.add( new THREE.AmbientLight( 0xcccccc ) );

				var directionalLight = new THREE.DirectionalLight( /*Math.random() * */ 0xffffff, 0.050 );

				directionalLight.position.x = Math.random() - 0.5;
				directionalLight.position.y = Math.random() - 0.5;
				directionalLight.position.z = Math.random() - 0.5;

				directionalLight.position.normalize();

				scene.add( directionalLight );

				var pointLight = new THREE.PointLight( 0xffffff, 1 );
				particleLight.add( pointLight );
				
				
				var ptgeometry = new THREE.SphereGeometry( 7, 10, 10 );
				var ptmaterial = new THREE.MeshBasicMaterial( {color:0xffffff, wireframe:true});
				target = new THREE.Mesh( ptgeometry, ptmaterial );
				target.name = "target";
				target.position.x= 10000000;
				target.position.y=10000000;
				target.position.z=10000000;
				lines.add( target );
			}
		}
		else{
			programFill = function ( context ) {
				context.beginPath();
				context.arc( 0, 0, 0.5, 0, PI2, true );
				context.fill();
			};
			programStroke = function ( context ) {
				context.lineWidth = 0.2;
				context.beginPath();
				context.arc( 0, 0, 0.5, 0, PI2, true );
				context.fill();
				context.strokeStyle="#FFFFFF";
				context.arc( 0.0, 0.0, 0.5, 0.0, PI2, true );
				context.stroke();
			};
			
		}
	
	var nj=0;
	for ( junction in all_junctions) {
		renderer.getContext('2d').newnb=junction;
		var particle;
		if (isWebGl==false){
			var string_hex_color;
			var mycolor;
			if (game.game_mode=='aqualibrium'){
				mycolor = '#cccccc';
				//mycolor = range_p_color(0);
			}
			particle = new THREE.Sprite(new THREE.SpriteCanvasMaterial( { color: mycolor, program: programFill, opacity: 0.7})) ;
			
			particle.position.x = ((all_junctions[junction]['X-Coord']-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
			
			particle.position.y = 0;//Math.random() * 2 - 1;
			particle.position.z = ((all_junctions[junction]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
			particle.scale.x = particle.scale.y = scale_nodes;
			particle.name = "j-"+junction;
			lines.add(particle);
			var textmaterial = new THREE.SpriteMaterial( {
				map: new THREE.CanvasTexture( generateSprite({message:''+(1+nj), fontsize:40}) ),
			} );
			textmaterial.map.minFilter = THREE.LinearFilter;
			
			if (game.game_mode=='aqualibrium'){
				// nothing
			}
			
		}
		else{
			//circle.png
			if (detailLevel==1){
				var geometry = new THREE.SphereGeometry( scale_nodes/2, 10, 10 );
				var mycolor;
				if (game.game_mode=='aqualibrium'){
					mycolor = '#cccccc';
				}
				var smaterial = new THREE.MeshLambertMaterial( { color: mycolor, shading: THREE.SmoothShading } ) ;//new THREE.MeshPhongMaterial( { color: 0x00ff00, specular: 0xffffff, shininess: 1, shading: THREE.FlatShading } )//new THREE.MeshNormalMaterial( ) ;//new THREE.MeshLambertMaterial( { color: 0xcccccc, shading: THREE.FlatShading } );//new THREE.MeshBasicMaterial( {color:0xff0000});
				var sphere = new THREE.Mesh( geometry, smaterial );
				sphere.position.x = ((parseFloat(all_junctions[junction]['X-Coord'])-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				sphere.position.y = 0;//Math.random() * 2 - 1;
				sphere.position.z = ((all_junctions[junction]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				sphere.name = "j-"+junction;
				lines.add( sphere );
				
			}
			else {
				var geometry = new THREE.SphereGeometry( scale_nodes/2, 10, 10 );
				var mycolor;
				if (game.game_mode=='aqualibrium'){
					mycolor = '#cccccc';
				}
				var smaterial = new THREE.MeshLambertMaterial( { color: mycolor, shading: THREE.SmoothShading } ) ;//new THREE.MeshPhongMaterial( { color: 0x00ff00, specular: 0xffffff, shininess: 1, shading: THREE.FlatShading } )//new THREE.MeshNormalMaterial( ) ;//new THREE.MeshLambertMaterial( { color: 0xcccccc, shading: THREE.FlatShading } );//new THREE.MeshBasicMaterial( {color:0xff0000});
				var sphere = new THREE.Mesh( geometry, smaterial );
				sphere.position.x = ((parseFloat(all_junctions[junction]['X-Coord'])-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				sphere.position.y = 0;//Math.random() * 2 - 1;
				sphere.position.z = ((all_junctions[junction]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				sphere.name = "j-"+junction;
				lines.add( sphere );
				var textmaterial = new THREE.SpriteMaterial( {
					map: new THREE.CanvasTexture( generateSprite({message:''+(1+nj), fontsize:40}) ),
				} );
				textmaterial.map.minFilter = THREE.LinearFilter;
				textmaterial.depthWrite = false;
				textmaterial.depthTest = false;
				var particleText = new THREE.Sprite(textmaterial);
				particleText.position.x = ((parseFloat(all_junctions[junction]['X-Coord'])-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				particleText.position.y = 0;//Math.random() * 2 - 1;
				particleText.position.z = ((all_junctions[junction]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				particleText.scale.y=22;
				particleText.scale.x=22;
				
				particleText.name="t-"+junction;
				lines.add(particleText);
			}
		}
		nj++;
	}
	
	var nj=0;
	for ( reservoir in all_reservoirs) {
		renderer.getContext('2d').newnb=reservoir;
		var particle;
		if (isWebGl==false){
			var string_hex_color;
			//if (listNodes[i]['minimumPressure']){
			//	string_hex_color= range_p_color(latest_pressures[i-1]);
			//}
			//var mycolor = string_hex_color;
			//if (i==0){
			//  mycolor = 0x9966ff;
			//}
			
			// fix pressure colors to 0 by default until I get correct results
			var mycolor = 0x9966ff;
			
			particle = new THREE.Sprite(new THREE.SpriteCanvasMaterial( { color: mycolor, program: programFill, opacity: 0.7})) ;
			
			particle.position.x = ((all_reservoirs[reservoir]['X-Coord']-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
			
			particle.position.y = 0;//Math.random() * 2 - 1;
			particle.position.z = ((all_reservoirs[reservoir]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
			particle.scale.x = particle.scale.y = 15;
			particle.name = "r-"+reservoir;
			lines.add(particle);
			var textmaterial;
			var particleText;
			if (game.game_mode!='aqualibrium'){
				textmaterial = new THREE.SpriteMaterial( {
					map: new THREE.CanvasTexture( generateSprite({message:''+(1+nj), fontsize:40}) ),
				} );
				textmaterial.map.minFilter = THREE.LinearFilter;
				particleText = new THREE.Sprite(textmaterial);
				if (game.game_mode!='aqualibrium'){
					particleText.position.x = ((all_reservoirs[reservoir]['X-Coord']-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				}
				else{
					particleText.position.x = ((all_reservoirs[reservoir]['X-Coord']-left_coord)*scale_3d)-(max_3d_width*0.5)-15;//Math.random() * 2 - 1;
				}
				particleText.position.y = 0;//Math.random() * 2 - 1;
				particleText.position.z = ((all_reservoirs[reservoir]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				particleText.scale.y=22;
				particleText.scale.x=22;
				particleText.name="t-"+reservoir;
				lines.add(particleText);
			}
			else{
				textmaterial = new THREE.SpriteMaterial( {
					map: new THREE.CanvasTexture( generateSprite({message:''+(reservoir), fontsize:40}) ),
				} );
				textmaterial.map.minFilter = THREE.LinearFilter;
				particleText = new THREE.Sprite(textmaterial);
				if (game.game_mode!='aqualibrium'){
					particleText.position.x = ((all_reservoirs[reservoir]['X-Coord']-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				}
				else{
					particleText.position.x = ((all_reservoirs[reservoir]['X-Coord']-left_coord)*scale_3d)-(max_3d_width*0.5)-15;//Math.random() * 2 - 1;
				}
				particleText.position.y = 0;//Math.random() * 2 - 1;
				particleText.position.z = ((all_reservoirs[reservoir]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				particleText.scale.y=22;
				particleText.scale.x=22;
				particleText.name="t-"+reservoir;
				lines.add(particleText);
			}
			
			
			
			
			
			
		}
		else{
			//circle.png
			if (detailLevel==1){
				//var geometry = new THREE.SphereGeometry( 12/2, 10, 10 );
				
				var geometry = new THREE.CylinderGeometry(12/2, 12/2, 20, 50, 50, false);
				if (game.game_mode=='aqualibrium'){
					if(reservoir!='Source'){
						geometry = new THREE.CylinderGeometry(12/2, 12/2, 20, 50, 50, true);
					}
				}
				//var string_hex_color;
				//if (all_junctions[junction]['minimumPressure']){
				//	string_hex_color= range_p_color(latest_pressures[i-1]);
				//}
				//var mycolor = string_hex_color;
				//if (i==0){
				//var	mycolor = 0x9966ff;
				//}
				var mycolor = 0x9966ff;
				var smaterial = new THREE.MeshLambertMaterial( { color: mycolor, shading: THREE.SmoothShading } ) ;//new THREE.MeshPhongMaterial( { color: 0x00ff00, specular: 0xffffff, shininess: 1, shading: THREE.FlatShading } )//new THREE.MeshNormalMaterial( ) ;//new THREE.MeshLambertMaterial( { color: 0xcccccc, shading: THREE.FlatShading } );//new THREE.MeshBasicMaterial( {color:0xff0000});
				//var smaterial = new THREE.MeshBasicMaterial({color: mycolor, side: THREE.DoubleSide, opacity: 0.5, transparent: true, depthWrite: true});
				var sphere = new THREE.Mesh( geometry, smaterial );
				sphere.position.x = ((parseFloat(all_reservoirs[reservoir]['X-Coord'])-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				if (game.game_mode=='aqualibrium'){
					if (reservoir=='Source'){
						sphere.position.y = -10-(20);
						mycolor = 0x77aaff;
						sphere.material=new THREE.MeshLambertMaterial( { color: mycolor, shading: THREE.SmoothShading } )
					}
					else{
						if (reservoir=='Res1'){
							sphere.material=new THREE.MeshBasicMaterial({color: mycolor, side: THREE.DoubleSide, opacity: 0.5, transparent: true, depthWrite: true});
							sphere.position.y = -10;
							//sphere.scale.y=0.15+(reservoir_1*0.85);
							//sphere.position.y = 1.5-(20*(sphere.scale.y*0.5));//Math.random() * 2 - 1;
						}
						if (reservoir=='Res2'){
							sphere.material=new THREE.MeshBasicMaterial({color: mycolor, side: THREE.DoubleSide, opacity: 0.5, transparent: true, depthWrite: true});
							sphere.position.y = -10;
							//sphere.scale.y=0.15+(reservoir_2*0.85);
							//sphere.position.y = 1.5-(20*(sphere.scale.y*0.5));//Math.random() * 2 - 1;
						}
						if (reservoir=='Res3'){
							sphere.material=new THREE.MeshBasicMaterial({color: mycolor, side: THREE.DoubleSide, opacity: 0.5, transparent: true, depthWrite: true});
							sphere.position.y = -10;
							//sphere.scale.y=0.15+(reservoir_3*0.85);
							//sphere.position.y = 1.5-(20*(sphere.scale.y*0.5));//Math.random() * 2 - 1;
						}
						
					}
					
				}
				else{
					sphere.position.y = -6;//Math.random() * 2 - 1;
				}
				
				sphere.position.z = ((all_reservoirs[reservoir]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				sphere.name = "r-"+reservoir;
				lines.add( sphere );
				
				if (game.game_mode=='aqualibrium'){
					if (reservoir!='Source'){
						var wgeometry = new THREE.CylinderGeometry(5, 5, 20, 50, 50, false);
						var wmycolor = 0x1133ff;//0x3399ff;//#3399ff
						var wmaterial = new THREE.MeshLambertMaterial( { color: wmycolor, shading: THREE.SmoothShading } ) ;
						var wsphere = new THREE.Mesh( wgeometry, wmaterial );
						wsphere.position.x = ((parseFloat(all_reservoirs[reservoir]['X-Coord'])-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
						wsphere.position.y = 0;
						wsphere.position.z = ((all_reservoirs[reservoir]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
						if (reservoir=='Res1'){
							if (reservoir_1==0.0){
								wsphere.scale.y=(0.00001);
								wsphere.position.y = 0-(20*(0.00001*0.5));
							}
							else{
								wsphere.scale.y=(reservoir_1);
								wsphere.position.y = 0-(20*(wsphere.scale.y*0.5));
							}
						}
						if (reservoir=='Res2'){
							if (reservoir_2==0.0){
								wsphere.scale.y=(0.00001);
								wsphere.position.y = 0-(20*(0.00001*0.5));
							}
							else{
								wsphere.scale.y=(reservoir_2);
								wsphere.position.y = 0-(20*(wsphere.scale.y*0.5));
							}
						}
						if (reservoir=='Res3'){
							if (reservoir_3==0.0){
								wsphere.scale.y=(0.00001);
								wsphere.position.y = 0-(20*(0.00001*0.5));
							}
							else{
								wsphere.scale.y=(reservoir_3);
								wsphere.position.y = 0-(20*(wsphere.scale.y*0.5));
							}
						}
						wsphere.name = "w-"+reservoir;
						lines.add( wsphere );
					}
				}
				
				var textmaterial;
				if (game.game_mode!='aqualibrium'){
					textmaterial= new THREE.SpriteMaterial( {
						map: new THREE.CanvasTexture( generateSprite({message:''+(1+nj), fontsize:40}) ),
					} );
				}
				else{
					textmaterial= new THREE.SpriteMaterial( {
						map: new THREE.CanvasTexture( generateSprite({message:''+(reservoir), fontsize:40}) ),
					} );
				}
				textmaterial.map.minFilter = THREE.LinearFilter;
				textmaterial.depthWrite = false;
				textmaterial.depthTest = false;
				
				var particleText = new THREE.Sprite(textmaterial);
				//particleText.position.x = ((parseFloat(all_reservoirs[reservoir]['X-Coord'])-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				if (game.game_mode!='aqualibrium'){
					particleText.position.x = particleText.position.x = ((parseFloat(all_reservoirs[reservoir]['X-Coord'])-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				}
				else{
					particleText.position.x = particleText.position.x = ((parseFloat(all_reservoirs[reservoir]['X-Coord'])-left_coord)*scale_3d)-(max_3d_width*0.5)-15;//Math.random() * 2 - 1;
				}
				particleText.position.y = 0;//Math.random() * 2 - 1;
				particleText.position.z = ((all_reservoirs[reservoir]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				particleText.scale.y=22;
				particleText.scale.x=22;
				
				particleText.name="t-"+reservoir;
				lines.add(particleText);
				}
			else {
				var geometry = new THREE.CylinderGeometry(12/2, 12/2, 20, 50, 50, false);
				if (game.game_mode=='aqualibrium'){
					if(reservoir!='Source'){
						geometry = new THREE.CylinderGeometry(12/2, 12/2, 20, 50, 50, true);
					}
				}
				//var string_hex_color;
				//if (all_junctions[junction]['minimumPressure']){
				//	string_hex_color= range_p_color(latest_pressures[i-1]);
				//}
				//var mycolor = string_hex_color;
				//if (i==0){
				//var	mycolor = 0x9966ff;
				//}
				var mycolor = 0x9966ff;
				var smaterial = new THREE.MeshLambertMaterial( { color: mycolor, shading: THREE.SmoothShading } ) ;//new THREE.MeshPhongMaterial( { color: 0x00ff00, specular: 0xffffff, shininess: 1, shading: THREE.FlatShading } )//new THREE.MeshNormalMaterial( ) ;//new THREE.MeshLambertMaterial( { color: 0xcccccc, shading: THREE.FlatShading } );//new THREE.MeshBasicMaterial( {color:0xff0000});
				//var smaterial = new THREE.MeshBasicMaterial({color: mycolor, side: THREE.DoubleSide, opacity: 0.5, transparent: true, depthWrite: true});
				var sphere = new THREE.Mesh( geometry, smaterial );
				sphere.position.x = ((parseFloat(all_reservoirs[reservoir]['X-Coord'])-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				if (game.game_mode=='aqualibrium'){
					if (reservoir=='Source'){
						sphere.position.y = -10-(20);
					}
					else{
						if (reservoir=='Res1'){
							sphere.material=new THREE.MeshBasicMaterial({color: mycolor, side: THREE.DoubleSide, opacity: 0.5, transparent: true, depthWrite: true});
							sphere.position.y = -10;
							//sphere.scale.y=0.15+(reservoir_1*0.85);
							//sphere.position.y = 1.5-(20*(sphere.scale.y*0.5));//Math.random() * 2 - 1;
						}
						if (reservoir=='Res2'){
							sphere.material=new THREE.MeshBasicMaterial({color: mycolor, side: THREE.DoubleSide, opacity: 0.5, transparent: true, depthWrite: true});
							sphere.position.y = -10;
							//sphere.scale.y=0.15+(reservoir_2*0.85);
							//sphere.position.y = 1.5-(20*(sphere.scale.y*0.5));//Math.random() * 2 - 1;
						}
						if (reservoir=='Res3'){
							sphere.material=new THREE.MeshBasicMaterial({color: mycolor, side: THREE.DoubleSide, opacity: 0.5, transparent: true, depthWrite: true});
							sphere.position.y = -10;
							//sphere.scale.y=0.15+(reservoir_3*0.85);
							//sphere.position.y = 1.5-(20*(sphere.scale.y*0.5));//Math.random() * 2 - 1;
						}
						
					}
					
				}
				else{
					sphere.position.y = -6;//Math.random() * 2 - 1;
				}
				
				sphere.position.z = ((all_reservoirs[reservoir]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				sphere.name = "r-"+reservoir;
				lines.add( sphere );
				
				if (game.game_mode=='aqualibrium'){
					if (reservoir!='Source'){
						var wgeometry = new THREE.CylinderGeometry(5, 5, 20, 50, 50, false);
						var wmycolor = 0x1133ff;//0x3399ff;//#3399ff
						var wmaterial = new THREE.MeshLambertMaterial( { color: wmycolor, shading: THREE.SmoothShading } ) ;
						var wsphere = new THREE.Mesh( wgeometry, wmaterial );
						wsphere.position.x = ((parseFloat(all_reservoirs[reservoir]['X-Coord'])-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
						wsphere.position.y = 0;
						wsphere.position.z = ((all_reservoirs[reservoir]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
						if (reservoir=='Res1'){
							if (reservoir_1==0.0){
								wsphere.scale.y=(0.00001);
								wsphere.position.y = 0-(20*(0.00001*0.5));
							}
							else{
								wsphere.scale.y=(reservoir_1);
								wsphere.position.y = 0-(20*(wsphere.scale.y*0.5));
							}
						}
						if (reservoir=='Res2'){
							if (reservoir_2==0.0){
								wsphere.scale.y=(0.00001);
								wsphere.position.y = 0-(20*(0.00001*0.5));
							}
							else{
								wsphere.scale.y=(reservoir_2);
								wsphere.position.y = 0-(20*(wsphere.scale.y*0.5));
							}
						}
						if (reservoir=='Res3'){
							if (reservoir_3==0.0){
								wsphere.scale.y=(0.00001);
								wsphere.position.y = 0-(20*(0.00001*0.5));
							}
							else{
								wsphere.scale.y=(reservoir_3);
								wsphere.position.y = 0-(20*(wsphere.scale.y*0.5));
							}
						}
						wsphere.name = "w-"+reservoir;
						lines.add( wsphere );
					}
				}
				var textmaterial;
				if (game.game_mode!='aqualibrium'){
					textmaterial= new THREE.SpriteMaterial( {
						map: new THREE.CanvasTexture( generateSprite({message:''+(1+nj), fontsize:40}) ),
					} );
				}
				else{
					textmaterial= new THREE.SpriteMaterial( {
						map: new THREE.CanvasTexture( generateSprite({message:''+(reservoir), fontsize:40}) ),
					} );
				}
				textmaterial.map.minFilter = THREE.LinearFilter;
				textmaterial.depthWrite = false;
				textmaterial.depthTest = false;
				var particleText = new THREE.Sprite(textmaterial);
				//particleText.position.x = ((parseFloat(all_reservoirs[reservoir]['X-Coord'])-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				if (game.game_mode!='aqualibrium'){
					particleText.position.x = particleText.position.x = ((parseFloat(all_reservoirs[reservoir]['X-Coord'])-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				}
				else{
					particleText.position.x = particleText.position.x = ((parseFloat(all_reservoirs[reservoir]['X-Coord'])-left_coord)*scale_3d)-(max_3d_width*0.5)-15;//Math.random() * 2 - 1;
				}
				particleText.position.y = 0;//Math.random() * 2 - 1;
				particleText.position.z = ((all_reservoirs[reservoir]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				particleText.scale.y=22;
				particleText.scale.x=22;
				
				particleText.name="t-"+reservoir;
				lines.add(particleText);
			}
		}
		nj++;
	}
	var nj=0;
	for ( tank in all_tanks) {
		renderer.getContext('2d').newnb=tank;
		var particle;
		if (isWebGl==false){
			var string_hex_color;
			//if (listNodes[i]['minimumPressure']){
			//	string_hex_color= range_p_color(latest_pressures[i-1]);
			//}
			//var mycolor = string_hex_color;
			//if (i==0){
			//  mycolor = 0x9966ff;
			//}
			
			// fix pressure colors to 0 by default until I get correct results
			var mycolor = 0x0099ff;
			
			particle = new THREE.Sprite(new THREE.SpriteCanvasMaterial( { color: mycolor, program: programFill, opacity: 0.7})) ;
			
			particle.position.x = ((all_tanks[tank]['X-Coord']-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
			
			particle.position.y = 0;//Math.random() * 2 - 1;
			particle.position.z = ((all_tanks[tank]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
			particle.scale.x = particle.scale.y = 12;
			particle.name = "tk-"+tank;
			lines.add(particle);
			var textmaterial = new THREE.SpriteMaterial( {
				map: new THREE.CanvasTexture( generateSprite({message:''+(1+nj), fontsize:40}) ),
			} );
			textmaterial.map.minFilter = THREE.LinearFilter;
			
			
			var particleText = new THREE.Sprite(textmaterial);
			particleText.position.x = ((all_tanks[tank]['X-Coord']-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
			particleText.position.y = 0;//Math.random() * 2 - 1;
			particleText.position.z = ((all_tanks[tank]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
			particleText.scale.y=22;
			particleText.scale.x=22;
			particleText.name="t-"+tank;
			lines.add(particleText);
			
			
		}
		else{
			//circle.png
			if (detailLevel==1){
				var geometry = new THREE.SphereGeometry( 12/2, 10, 10 );
				//var string_hex_color;
				//if (all_junctions[junction]['minimumPressure']){
				//	string_hex_color= range_p_color(latest_pressures[i-1]);
				//}
				//var mycolor = string_hex_color;
				//if (i==0){
				//var	mycolor = 0x9966ff;
				//}
				var mycolor = 0x0099ff;
				var smaterial = new THREE.MeshLambertMaterial( { color: mycolor, shading: THREE.SmoothShading } ) ;//new THREE.MeshPhongMaterial( { color: 0x00ff00, specular: 0xffffff, shininess: 1, shading: THREE.FlatShading } )//new THREE.MeshNormalMaterial( ) ;//new THREE.MeshLambertMaterial( { color: 0xcccccc, shading: THREE.FlatShading } );//new THREE.MeshBasicMaterial( {color:0xff0000});
				var sphere = new THREE.Mesh( geometry, smaterial );
				sphere.position.x = ((parseFloat(all_tanks[tank]['X-Coord'])-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				sphere.position.y = 0;//Math.random() * 2 - 1;
				sphere.position.z = ((all_tanks[tank]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				sphere.name = "tk-"+tank;
				lines.add( sphere );
				var textmaterial = new THREE.SpriteMaterial( {
					map: new THREE.CanvasTexture( generateSprite({message:''+(1+nj), fontsize:40}) ),
				} );
				textmaterial.map.minFilter = THREE.LinearFilter;
				textmaterial.depthWrite = false;
				textmaterial.depthTest = false;
				var particleText = new THREE.Sprite(textmaterial);
				particleText.position.x = ((parseFloat(all_tanks[tank]['X-Coord'])-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				particleText.position.y = 0;//Math.random() * 2 - 1;
				particleText.position.z = ((all_tanks[tank]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				particleText.scale.y=22;
				particleText.scale.x=22;
				
				particleText.name="t-"+tank;
				lines.add(particleText);
				}
			else {
				var geometry = new THREE.SphereGeometry( 12/2, 10, 10 );
				//var string_hex_color;
				//if (all_junctions[junction]['minimumPressure']){
				//	string_hex_color= range_p_color(latest_pressures[i-1]);
				//}
				//var mycolor = string_hex_color;
				//if (i==0){
				//var	mycolor = 0x9966ff;
				//}
				var mycolor = 0x0099ff;
				var smaterial = new THREE.MeshLambertMaterial( { color: mycolor, shading: THREE.SmoothShading } ) ;//new THREE.MeshPhongMaterial( { color: 0x00ff00, specular: 0xffffff, shininess: 1, shading: THREE.FlatShading } )//new THREE.MeshNormalMaterial( ) ;//new THREE.MeshLambertMaterial( { color: 0xcccccc, shading: THREE.FlatShading } );//new THREE.MeshBasicMaterial( {color:0xff0000});
				var sphere = new THREE.Mesh( geometry, smaterial );
				sphere.position.x = ((parseFloat(all_tanks[tank]['X-Coord'])-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				sphere.position.y = 0;//Math.random() * 2 - 1;
				sphere.position.z = ((all_tanks[tank]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				sphere.name = "tk-"+tank;
				lines.add( sphere );
				var textmaterial = new THREE.SpriteMaterial( {
					map: new THREE.CanvasTexture( generateSprite({message:''+(1+nj), fontsize:40}) ),
				} );
				textmaterial.map.minFilter = THREE.LinearFilter;
				textmaterial.depthWrite = false;
				textmaterial.depthTest = false;
				var particleText = new THREE.Sprite(textmaterial);
				particleText.position.x = ((parseFloat(all_tanks[tank]['X-Coord'])-left_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				particleText.position.y = 0;//Math.random() * 2 - 1;
				particleText.position.z = ((all_tanks[tank]['Y-Coord']-low_coord)*scale_3d)-(max_3d_width*0.5);//Math.random() * 2 - 1;
				particleText.scale.y=22;
				particleText.scale.x=22;
				
				particleText.name="t-"+tank;
				lines.add(particleText);
			}
		}
		nj++;
	}
	
	var def_line_col;
	// lines
	if (UIColor=="black"){
		def_line_col=0xffffff;
	}
	else if (UIColor=="white"){
		def_line_col=0x888888;
	}
	
	//console.log(all_fixed_pipes)
	//console.log(all_changeable_pipes)
	if (isWebGl==false){
		for (pipe in all_changeable_pipes) {
			
			// create curve
			var array_points=[];
			for (var i=0;i< all_changeable_pipes[pipe]['Vertices'].length;i++ ){
				array_points.push( new THREE.Vector2(((parseFloat(all_changeable_pipes[pipe]['Vertices'][i][0])-left_coord)*scale_3d)-(max_3d_width*0.5), ((parseFloat(all_changeable_pipes[pipe]['Vertices'][i][1])-low_coord)*scale_3d)-(max_3d_width*0.5) ));
			}
			
			var curve = new THREE.SplineCurve( array_points);
			
			var path; 
				var geometry;
				if (array_points.length==2){
					path = new THREE.Path( curve.getPoints( 1 ) );
					geometry = path.createPointsGeometry( 1);
				}
				else{
					path = new THREE.Path( curve.getPoints( 10 ) );
					geometry = path.createPointsGeometry( 10 );
				}
			geometry.dynamic = true
			var default_col = 0xff0000;
			//if (user_latest_diameters[i]!=0){
			//	default_col= 0x00ff00;
			//}
			var index_diameter=0;
			if (_.isEmpty(user_latest_diameters)){
				index_diameter=team_latest_diameters[pipe];
				//default_col= 0x00ff00;
			}
			else{
				if (user_latest_diameters.hasOwnProperty(pipe)){
					index_diameter=user_latest_diameters[pipe];
				}
				else{
					index_diameter=team_latest_diameters[pipe];
				}
				
			}
			
			if (default_coloring_pipe){
				if (index_diameter!=0){
					default_col= 0x00ff00;
				}
			}
			else{
				//team_pipes_leakage={};
				//user_pipes_leakage={};
				if (user_pipes_leakage.hasOwnProperty(nb)){
					default_col=range_leakage_color(user_pipes_leakage[nb]);
				}
				else{
					default_col=range_leakage_color(team_pipes_leakage[nb]);
				}
				
			}
			var material;
			if (game.game_mode!='aqualibrium'){
				material = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter/(network['pipe_diameters'].length/5)), opacity: 1.0 } );
			}
			else{
				if (index_diameter==0){
					material = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter/(network['pipe_diameters'].length/5)), opacity: 1.0 } );
				}
				else if (index_diameter==1){
					material = new THREE.LineBasicMaterial( { color : default_col, linewidth:6, opacity: 1.0 } );
				}
				else if (index_diameter==2){
					material = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter*8), opacity: 1.0 } );
				}
				
			}
			//console.log(index_diameter)
			

			// Create the final Object3d to add to the scene
			var splineObject = new THREE.Line( geometry, material );
			splineObject.rotateX(Math.PI/2);
			splineObject.name="pc-"+pipe;
			lines.add(splineObject);
		}
		for (pipe in all_fixed_pipes) {
			
			// create curve
			var array_points=[];
			for (var i=0;i< all_fixed_pipes[pipe]['Vertices'].length;i++ ){
				array_points.push( new THREE.Vector2(((parseFloat(all_fixed_pipes[pipe]['Vertices'][i][0])-left_coord)*scale_3d)-(max_3d_width*0.5), ((parseFloat(all_fixed_pipes[pipe]['Vertices'][i][1])-low_coord)*scale_3d)-(max_3d_width*0.5) ));
			}
			
			var curve = new THREE.SplineCurve( array_points);
			
			var path; 
				var geometry;
				if (array_points.length==2){
					path = new THREE.Path( curve.getPoints( 1 ) );
					geometry = path.createPointsGeometry( 1);
				}
				else{
					path = new THREE.Path( curve.getPoints( 10 ) );
					geometry = path.createPointsGeometry( 10 );
				}
			geometry.dynamic = true
			//var default_col = 0xff0000;
			//if (user_latest_diameters[i]!=0){
			//	default_col= 0x00ff00;
			//}
			var index_diameter=0;
			if (team_latest_diameters[pipe]){
				index_diameter=team_latest_diameters[pipe];
				
			}
			//console.log(index_diameter)
			var material = new THREE.LineBasicMaterial( { color : def_line_col, linewidth:2+(index_diameter/(network['pipe_diameters'].length/5)), opacity: 1.0 } );

			// Create the final Object3d to add to the scene
			var splineObject = new THREE.Line( geometry, material );
			splineObject.rotateX(Math.PI/2);
			splineObject.name="pf-"+pipe;
			lines.add(splineObject);
		}
		
	}
	else{

		if (detailLevel==1){
			for (pipe in all_changeable_pipes) {
				var array_points=[];
				for (var i=0;i< all_changeable_pipes[pipe]['Vertices'].length;i++ ){
					//array_points.push( new THREE.Vector3(((parseFloat(all_changeable_pipes[pipe]['Vertices'][i][0])-left_coord)*scale_3d)-(max_3d_width*0.5),0, ((parseFloat(all_changeable_pipes[pipe]['Vertices'][i][1])-low_coord)*scale_3d)-(max_3d_width*0.5) ));
					array_points.push( new THREE.Vector3(((parseFloat(all_changeable_pipes[pipe]['Vertices'][i][0])-left_coord)*scale_3d)-(max_3d_width*0.5),0, ((parseFloat(all_changeable_pipes[pipe]['Vertices'][i][1])-low_coord)*scale_3d)-(max_3d_width*0.5) ));
				}
				var curve = new THREE.CatmullRomCurve3(array_points);
				var index_diameter=0;
				if (_.isEmpty(user_latest_diameters)){
					index_diameter=team_latest_diameters[pipe];
					//default_col= 0x00ff00;
				}
				else{
					if (user_latest_diameters.hasOwnProperty(pipe)){
						index_diameter=user_latest_diameters[pipe];
					}
					else{
						index_diameter=team_latest_diameters[pipe];
					}
					
				}
				var rad=0.8+(index_diameter/(network['pipe_diameters'].length/3));
				if (game.game_mode=='aqualibrium'){
					if (index_diameter==0){
						rad=0.8+(0/(network['pipe_diameters'].length/2.8));
					}
					else if (index_diameter==1){
						rad=0.8+(0.5/(network['pipe_diameters'].length/2.8));
					}
					else if (index_diameter==2){
						rad=0.8+(index_diameter/(network['pipe_diameters'].length/3));
					}
				}
				//if (user_latest_diameters[i]!=0){
				//	rad = 0.3+(user_latest_diameters[i]/6);
				//}
				var seg =1;
				if (array_points.length>2){
					seg = 12;
				}
				var geometry = new THREE.TubeGeometry(
					curve,  //path
					seg,    //segments
					rad,     //radius
					8,     //radiusSegments
					false  //closed
				);
				geometry.dynamic = true;
				
				
				
				var default_col = 0xff0000;
				if (default_coloring_pipe){
					if (index_diameter!=0){
						default_col= 0x00ff00;
					}
				}
				else{
					//team_pipes_leakage={};
					//user_pipes_leakage={};
					if (user_pipes_leakage.hasOwnProperty(pipe)){
						default_col=range_leakage_color(user_pipes_leakage[pipe]);
						//console.log(user_pipes_leakage[pipe])
					}
					else{
						default_col=range_leakage_color(team_pipes_leakage[pipe]);
						//console.log(team_pipes_leakage[pipe])
					}
					
				}
				
				
				
				var smaterial = new THREE.MeshLambertMaterial( { color: default_col, shading: THREE.SmoothShading } );
				//smaterial.wireframe=true;
				var mesh = new THREE.Mesh( geometry,smaterial);
				
				//var mesh = new THREE.Mesh( geometry,new THREE.MeshPhongMaterial( { color: 0xff0000, emissive: #0f1e4dspecular: 0xffffff, shininess: 1, shading: THREE.FlatShading } ));
				//new THREE.MeshPhongMaterial( { color: 0xff0000, specular: 0xffffff, shininess: 1, shading: THREE.FlatShading } ));
				mesh.name="pc-"+pipe;
				lines.add(mesh);
			}
			for (pipe in all_fixed_pipes) {
				var array_points=[];
				for (var i=0;i< all_fixed_pipes[pipe]['Vertices'].length;i++ ){
					//console.log(all_fixed_pipes[pipe]['Node1'])
					//console.log(all_fixed_pipes[pipe]['Node2'])
					var ypos=0.0;
					if (game.game_mode=='aqualibrium'){
						if (i==0 && all_fixed_pipes[pipe]['Node1']=='Source'){
							ypos = -10-((20)*0.5);
						}
						else if (i==1 && all_fixed_pipes[pipe]['Node2']=='Source'){
							ypos = -10-((20)*0.5);
						}
						
					}
					else{
						
					}
					array_points.push( new THREE.Vector3(((parseFloat(all_fixed_pipes[pipe]['Vertices'][i][0])-left_coord)*scale_3d)-(max_3d_width*0.5),ypos, ((parseFloat(all_fixed_pipes[pipe]['Vertices'][i][1])-low_coord)*scale_3d)-(max_3d_width*0.5) ));
				}
				var curve = new THREE.CatmullRomCurve3(array_points);
				var index_diameter=team_latest_diameters[pipe];
				var rad=0.8+(index_diameter/(network['pipe_diameters'].length/2.8));
				//if (user_latest_diameters[i]!=0){
				//	rad = 0.3+(user_latest_diameters[i]/6);
				//}
				var seg =1;
				if (array_points.length>2){
					seg = 12;
				}
				var geometry = new THREE.TubeGeometry(
					curve,  //path
					seg,    //segments
					rad,     //radius
					8,     //radiusSegments
					false  //closed
				);
				geometry.dynamic = true;
				// later call to update geometry
				//this.floor.geometry.vertices[idx].y = someNewYVal;
				//this.floor.geometry.__dirtyVertices = true;geometry.verticesNeedUpdate = true;
				//var mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0xff0000, shading: THREE.FlatShading } ) );
				//var mesh = new THREE.Mesh( geometry, new THREE.MeshNormalMaterial( { shading: THREE.SmoothShading } ) );
				var default_col = 0xff0000;
				//if (user_latest_diameters[i]!=0){
				//	default_col= 0x00ff00;
				//}
				//var smaterial = new THREE.MeshLambertMaterial( { color: default_col, shading: THREE.SmoothShading } );
				var smaterial = new THREE.MeshPhongMaterial( { color: 0x2121ce, emissive: 0x0f1e4d, specular: 0x111111, shininess: 30, shading: THREE.SmoothShading } )
				//smaterial.wireframe=true;
				var mesh = new THREE.Mesh( geometry,smaterial);
				
				//var mesh = new THREE.Mesh( geometry,new THREE.MeshPhongMaterial( { color: 0xff0000, emissive: #0f1e4dspecular: 0xffffff, shininess: 1, shading: THREE.FlatShading } ));
				//new THREE.MeshPhongMaterial( { color: 0xff0000, specular: 0xffffff, shininess: 1, shading: THREE.FlatShading } ));
				mesh.name="pf-"+pipe;
				lines.add(mesh);
			}
		}
		else{
			// for ( var i = 0; i < listFixedLinks.length; i ++ ) {
				// var straightcurve = new THREE.LineCurve3(  new THREE.Vector3( listNodes[listFixedLinks[i]['Node1']-1]['x']/10-80, 0, (listNodes[listFixedLinks[i]['Node1']-1]['y']/10)-150 ), new THREE.Vector3( listNodes[listFixedLinks[i]['Node2']-1]['x']/10-80, 0, (listNodes[listFixedLinks[i]['Node2']-1]['y']/10)-150 ) );
				
				// var geometry = new THREE.TubeGeometry(
					// straightcurve,  //path
					// 1,    //segments
					// 0.3+(diameters_2_index[listFixedLinks[i]['Diameter']]/6),     //radius
					// 8,     //radiusSegments
					// false  //closed
				// );
				
				// var smaterial = new THREE.MeshPhongMaterial( { color: 0x2121ce, emissive: 0x0f1e4d, specular: 0x111111, shininess: 30, shading: THREE.SmoothShading } )
				// //smaterial.wireframe=true;
				// var mesh = new THREE.Mesh( geometry,smaterial);
				// mesh.name="mfl"+i;
				// lines.add(mesh);
				
			// }
			for (pipe in all_changeable_pipes) {
				var array_points=[];
				for (var i=0;i< all_changeable_pipes[pipe]['Vertices'].length;i++ ){
					array_points.push( new THREE.Vector3(((parseFloat(all_changeable_pipes[pipe]['Vertices'][i][0])-left_coord)*scale_3d)-(max_3d_width*0.5),0, ((parseFloat(all_changeable_pipes[pipe]['Vertices'][i][1])-low_coord)*scale_3d)-(max_3d_width*0.5) ));
				}
				var curve = new THREE.CatmullRomCurve3(array_points);
				var index_diameter=0;
				if (_.isEmpty(user_latest_diameters)){
					index_diameter=team_latest_diameters[pipe];
					//default_col= 0x00ff00;
				}
				else{
					if (user_latest_diameters.hasOwnProperty(pipe)){
						index_diameter=user_latest_diameters[pipe];
					}
					else{
						index_diameter=team_latest_diameters[pipe];
					}
					
				}
				var rad=0.8+(index_diameter/(network['pipe_diameters'].length/2.8));
				//if (user_latest_diameters[i]!=0){
				//	rad = 0.3+(user_latest_diameters[i]/6);
				//}
				var seg =1;
				if (array_points.length>2){
					seg = 12;
				}
				var geometry = new THREE.TubeGeometry(
					curve,  //path
					seg,    //segments
					rad,     //radius
					8,     //radiusSegments
					false  //closed
				);
				geometry.dynamic = true;
				// later call to update geometry
				//this.floor.geometry.vertices[idx].y = someNewYVal;
				//this.floor.geometry.__dirtyVertices = true;geometry.verticesNeedUpdate = true;
				//var mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0xff0000, shading: THREE.FlatShading } ) );
				//var mesh = new THREE.Mesh( geometry, new THREE.MeshNormalMaterial( { shading: THREE.SmoothShading } ) );
				var default_col = 0xff0000;
				if (default_coloring_pipe){
					if (index_diameter!=0){
						default_col= 0x00ff00;
					}
				}
				else{
					//team_pipes_leakage={};
					//user_pipes_leakage={};
					if (user_pipes_leakage.hasOwnProperty(pipe)){
						default_col=range_leakage_color(user_pipes_leakage[pipe]);
					}
					else{
						default_col=range_leakage_color(team_pipes_leakage[pipe]);
					}
					
				}
				
				var smaterial = new THREE.MeshLambertMaterial( { color: default_col, shading: THREE.SmoothShading } );
				//smaterial.wireframe=true;
				var mesh = new THREE.Mesh( geometry,smaterial);
				
				//var mesh = new THREE.Mesh( geometry,new THREE.MeshPhongMaterial( { color: 0xff0000, emissive: #0f1e4dspecular: 0xffffff, shininess: 1, shading: THREE.FlatShading } ));
				//new THREE.MeshPhongMaterial( { color: 0xff0000, specular: 0xffffff, shininess: 1, shading: THREE.FlatShading } ));
				mesh.name="pc-"+pipe;
				lines.add(mesh);
			}
			for (pipe in all_fixed_pipes) {
				var array_points=[];
				for (var i=0;i< all_fixed_pipes[pipe]['Vertices'].length;i++ ){
					//console.log(all_fixed_pipes[pipe]['Node1'])
					//console.log(all_fixed_pipes[pipe]['Node2'])
					var ypos=0.0;
					if (game.game_mode=='aqualibrium'){
						if (i==0 && all_fixed_pipes[pipe]['Node1']=='Source'){
							ypos = -10-((20)*0.5);
						}
						else if (i==1 && all_fixed_pipes[pipe]['Node2']=='Source'){
							ypos = -10-((20)*0.5);
						}
						
					}
					else{
						
					}
					array_points.push( new THREE.Vector3(((parseFloat(all_fixed_pipes[pipe]['Vertices'][i][0])-left_coord)*scale_3d)-(max_3d_width*0.5),ypos, ((parseFloat(all_fixed_pipes[pipe]['Vertices'][i][1])-low_coord)*scale_3d)-(max_3d_width*0.5) ));
				}
				var curve = new THREE.CatmullRomCurve3(array_points);
				var index_diameter=team_latest_diameters[pipe];
					
				//if (all_fixed_pipes[pipe] && _.isEmpty(user_latest_diameters)){
				//	if (diameters_2_index.hasOwnProperty(all_fixed_pipes[pipe]['Diameter'])){
				//		index_diameter=diameters_2_index[all_fixed_pipes[pipe]['Diameter']];
				//	}
				//}
				var rad=0.8+(index_diameter/(network['pipe_diameters'].length/2.5));
				//if (user_latest_diameters[i]!=0){
				//	rad = 0.3+(user_latest_diameters[i]/6);
				//}
				var seg =1;
				if (array_points.length>2){
					seg = 12;
				}
				var geometry = new THREE.TubeGeometry(
					curve,  //path
					seg,    //segments
					rad,     //radius
					8,     //radiusSegments
					false  //closed
				);
				geometry.dynamic = true;
				// later call to update geometry
				//this.floor.geometry.vertices[idx].y = someNewYVal;
				//this.floor.geometry.__dirtyVertices = true;geometry.verticesNeedUpdate = true;
				//var mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0xff0000, shading: THREE.FlatShading } ) );
				//var mesh = new THREE.Mesh( geometry, new THREE.MeshNormalMaterial( { shading: THREE.SmoothShading } ) );
				var default_col = 0xff0000;
				//if (user_latest_diameters[i]!=0){
				//	default_col= 0x00ff00;
				//}
				//var smaterial = new THREE.MeshLambertMaterial( { color: default_col, shading: THREE.SmoothShading } );
				var smaterial = new THREE.MeshPhongMaterial( { color: 0x2121ce, emissive: 0x0f1e4d, specular: 0x111111, shininess: 30, shading: THREE.SmoothShading } )
				//smaterial.wireframe=true;
				var mesh = new THREE.Mesh( geometry,smaterial);
				
				//var mesh = new THREE.Mesh( geometry,new THREE.MeshPhongMaterial( { color: 0xff0000, emissive: #0f1e4dspecular: 0xffffff, shininess: 1, shading: THREE.FlatShading } ));
				//new THREE.MeshPhongMaterial( { color: 0xff0000, specular: 0xffffff, shininess: 1, shading: THREE.FlatShading } ));
				mesh.name="pf-"+pipe;
				lines.add(mesh);
			}
			
		}
	}
	
	
	
	
	
	
	
	
	lines.rotateX(Math.PI);
	// to be modified : should have for each network or game a rotation , and zoom parameter as well as different image backgrounds in use
	
	scene.add( lines );
	
	if (isWebGl==false){
			var lgeometry = new THREE.Geometry();
			var size_plane=(max_3d_width*2);
			if (game.game_mode=='aqualibrium'){
				size_plane=(max_3d_width);
			}
			lgeometry.vertices.push( new THREE.Vector3( -(size_plane/2), 0, (size_plane/2) ) );
			lgeometry.vertices.push( new THREE.Vector3( (size_plane/2), 0, (size_plane/2) ));
			
			lgeometry.vertices.push( new THREE.Vector3( -(size_plane/2), 0, -(size_plane/2) ) );
			lgeometry.vertices.push( new THREE.Vector3( (size_plane/2), 0, -(size_plane/2) ));
			
			lgeometry.vertices.push( new THREE.Vector3( -(size_plane/2), 0, (size_plane/2) ) );
			lgeometry.vertices.push( new THREE.Vector3( -(size_plane/2), 0, -(size_plane/2) ));
			
			lgeometry.vertices.push( new THREE.Vector3( (size_plane/2), 0, (size_plane/2) ) );
			lgeometry.vertices.push( new THREE.Vector3( (size_plane/2), 0, -(size_plane/2) ));
				
			var line = new THREE.LineSegments( lgeometry, new THREE.LineBasicMaterial( { color: widget_color, opacity: 0.3 } ) );
			line.position.z=50;
			line.position.x=-25;
			lower_plane.add( line );
			lower_plane.position.x=-25;
			lower_plane.position.z=0;
			lower_plane.position.y=-20;
			if (game.game_mode=='aqualibrium'){
				line.position.z=8;
				line.position.x=8;
				line.position.y=5;
			}
			scene.add(lower_plane);
			// if (game.game_mode=='aqualibrium'){
				// // create NYC texture + mesh
				// var loader = new THREE.TextureLoader();
				// var pathImage='images/aqualibrium2.png';
				// loader.load( pathImage, function ( texture ) {
					// var geometry = new THREE.PlaneGeometry( 280, 280, 20, 20 );
					// var material = new THREE.MeshBasicMaterial( { map: texture, overdraw: 0.5, opacity:0.55 , side: THREE.FrontSide, wireframe:false} );
					// textmaterial.map.minFilter = THREE.Nearest;
					// var nyc_mesh = new THREE.Mesh( geometry, material );
					// nyc_mesh.rotateX(-0.5*Math.PI);
					// nyc_mesh.position.y = -20;//Math.random() * 2 - 1;
					// nyc_mesh.position.x = -25;
					// nyc_mesh.position.z = -0;
					// //mesh.rotateX(-Math.PI);
					// scene.add( nyc_mesh );
				// } );
			// }
			
		}
		else{
			if (detailLevel==1){var lgeometry = new THREE.Geometry();
				var size_plane=(max_3d_width*2);
				if (game.game_mode=='aqualibrium'){
					size_plane=280;
				}
				var buid_color="";
				var part_color="";
				if (UIColor=="black"){
					buid_color = "rgb(30%, 30%, 30%)"
					part_color= 0xffffff;
				}
				else if (UIColor=="white"){
					buid_color = "rgb(70%, 70%, 70%)"
					part_color= 0x888888;
				}
				lgeometry.vertices.push( new THREE.Vector3( -(size_plane/2), 0, (size_plane/2) ) );
				lgeometry.vertices.push( new THREE.Vector3( (size_plane/2), 0, (size_plane/2) ));
				
				lgeometry.vertices.push( new THREE.Vector3( -(size_plane/2), 0, -(size_plane/2) ) );
				lgeometry.vertices.push( new THREE.Vector3( (size_plane/2), 0, -(size_plane/2) ));
				
				lgeometry.vertices.push( new THREE.Vector3( -(size_plane/2), 0, (size_plane/2) ) );
				lgeometry.vertices.push( new THREE.Vector3( -(size_plane/2), 0, -(size_plane/2) ));
				
				lgeometry.vertices.push( new THREE.Vector3( (size_plane/2), 0, (size_plane/2) ) );
				lgeometry.vertices.push( new THREE.Vector3( (size_plane/2), 0, -(size_plane/2) ));
					
				var line = new THREE.LineSegments( lgeometry, new THREE.LineBasicMaterial( { color: widget_color} ) );
				line.position.z=50;
				line.position.x=-25;
				lower_plane.add( line );
				lower_plane.position.x=-25;
				lower_plane.position.z=0;
				lower_plane.position.y=-25;
				if (game.game_mode=='aqualibrium'){
					line.position.z=8;
					line.position.x=8;
					line.position.y=5;
				}
				
				var SEPARATION = 100;
				var AMOUNTX = 15;
				var AMOUNTY = 15;
				
				
				var material = new THREE.SpriteMaterial({color : part_color});
				for ( var ix = 0; ix < AMOUNTX; ix++ ) {
					for ( var iy = 0; iy < AMOUNTY; iy++ ) {
						var mparticle = new THREE.Sprite( material );
						mparticle.scale.x = 3;
						mparticle.scale.y = 3;
						mparticle.position.y=-30;
						mparticle.position.x = ix * SEPARATION - ( ( AMOUNTX * SEPARATION ) / 2 );
						mparticle.position.z = iy * SEPARATION - ( ( AMOUNTY * SEPARATION ) / 2 );
						lower_plane.add( mparticle );
					}
				}
				scene.add(lower_plane);
				if (game.game_mode=='aqualibrium'){
					// create NYC texture + mesh
					var loader = new THREE.TextureLoader();
					var pathImage='images/aqualibrium1.png';
					loader.load( pathImage, function ( texture ) {
						var maxAnisotropy = renderer.getMaxAnisotropy();
						texture.anisotropy = maxAnisotropy;
						var geometry = new THREE.PlaneGeometry( 280, 280, 20, 20 );
						var material = new THREE.MeshBasicMaterial( { map: texture, overdraw: 0.5, opacity:0.7 , transparent: true ,side: THREE.FrontSide, wireframe:false} );
						textmaterial.map.minFilter = THREE.Nearest;
						var nyc_mesh = new THREE.Mesh( geometry, material );
						nyc_mesh.rotateX(-0.5*Math.PI);
						nyc_mesh.position.y = -20;//Math.random() * 2 - 1;
						nyc_mesh.position.x = -17;
						nyc_mesh.position.z = 8;
						//mesh.rotateX(-Math.PI);
						scene.add( nyc_mesh );
						
					} );
				}
				// create NYC texture + mesh
				// var loader = new THREE.TextureLoader();
				// var pathImage='images/nyc-transparent5-'+UIColor+'.png';
				// loader.load( pathImage, function ( texture ) {
					// var maxAnisotropy = renderer.getMaxAnisotropy();
					// texture.anisotropy = maxAnisotropy;
					// var geometry = new THREE.PlaneGeometry( 280, 280, 20, 20 );
					// var material = new THREE.MeshBasicMaterial( { map: texture, overdraw: 0.5, opacity:0.7 , transparent: true ,side: THREE.FrontSide, wireframe:false} );
					// textmaterial.map.minFilter = THREE.Nearest;
					// var nyc_mesh = new THREE.Mesh( geometry, material );
					// nyc_mesh.rotateX(-0.5*Math.PI);
					// nyc_mesh.position.y = -25;//Math.random() * 2 - 1;
					// nyc_mesh.position.x = -25;
					// nyc_mesh.position.z = -0;
					// //mesh.rotateX(-Math.PI);
					// scene.add( nyc_mesh );
					
				// } );
				
				// var img = new Image();
				// img.src = 'images/nyc-128-3.png';
				// img.onload = function() {
					// var elev_data=getHeightData(img);
					
					// var buidlings_meshes = [], tgeometry, tmaterial, tmesh;
					
					// var side_coord=265/128;
					// var cnt =0;
					// var nb_pts=0;
					// for ( var i = 0, l = 128; i < l; i ++) {
						// for ( var j = 0, jl = 128; j < jl; j ++) {
							// if (elev_data[ cnt ]!=0) {
								// nb_pts++;
								// tgeometry = new THREE.BoxGeometry(side_coord,elev_data[ cnt ]/3,side_coord);
								// tmaterial = new THREE.MeshLambertMaterial({color: buid_color});
								// tmesh = new THREE.Mesh(tgeometry, tmaterial);
								// tmesh.position.z = i*side_coord;
								// tmesh.position.x = j*side_coord;
								// tmesh.position.y = elev_data[ cnt ]/(3*2);
								// buidlings_meshes.push(tmesh);
							// }
							// cnt++;
						// }
					// }
					// //console.log(nb_pts)
					// tgeometry = mergeMeshes(buidlings_meshes);
					// tmesh = new THREE.Mesh(tgeometry, tmaterial);
					// //scene.add(tmesh);
					// //tmesh.rotateZ(-1*Math.PI);
					// tmesh.position.y = -25;//Math.random() * 2 - 1;
					// tmesh.position.x = -23-(265/2);
					// tmesh.position.z = 5-(265/2);
					// scene.add( tmesh );
					
					
				// }
				// Add Sky Mesh
				sky = new THREE.Sky();
				scene.add( sky.mesh );

				// Add Sun Helper
				sunSphere = new THREE.Mesh(
					new THREE.SphereBufferGeometry( 20000, 16, 8 ),
					new THREE.MeshBasicMaterial( { color: 0xffffff } )
				);
				sunSphere.position.y =  700000;
				sunSphere.visible = false;
				scene.add( sunSphere );
				var effectController  = {
					turbidity: 20,
					reileigh: 2,
					mieCoefficient: 0.005,
					mieDirectionalG: 0.8,
					luminance: 1.0,
					inclination: 0.29, // elevation / inclination
					azimuth: 0.25, // Facing front,
					sun: ! true
				};
				if (UIColor=="black"){
					effectController.turbidity= 20;
					effectController.azimuth= 0.0;
					effectController.inclination= 0.499;
					effectController.mieDirectionalG= 0.8;
					effectController.mieCoefficient= 0.00694;
					effectController.reileigh= 3.9;
					effectController.luminance= 1.0;
				}
				else if (UIColor=="white"){
					effectController.turbidity= 20;
					effectController.inclination= 0.2;
					effectController.luminance= 0.7;
					if (game.game_mode=='aqualibrium'){
						effectController.turbidity= 1;
						effectController.azimuth= 0.33;
						effectController.inclination= 0.4552;
						//effectController.mieDirectionalG= 0.8;
						effectController.mieCoefficient= 0.004;
						effectController.reileigh= 0.867;
						effectController.luminance= 0.3;
					}
				}

				var distance = 400000;
				var uniforms = sky.uniforms;
				uniforms.turbidity.value = effectController.turbidity;
				uniforms.reileigh.value = effectController.reileigh;
				uniforms.luminance.value = effectController.luminance;
				uniforms.mieCoefficient.value = effectController.mieCoefficient;
				uniforms.mieDirectionalG.value = effectController.mieDirectionalG;

				var theta = Math.PI * ( effectController.inclination - 0.5 );
				var phi = 2 * Math.PI * ( effectController.azimuth - 0.5 );

				sunSphere.position.x = distance * Math.cos( phi );
				sunSphere.position.y = distance * Math.sin( phi ) * Math.sin( theta );
				sunSphere.position.z = distance * Math.sin( phi ) * Math.cos( theta );

				sunSphere.visible = effectController.sun;

				sky.uniforms.sunPosition.value.copy( sunSphere.position );
			}
			else{
				var lgeometry = new THREE.Geometry();
				var size_plane=(max_3d_width*2);
				if (game.game_mode=='aqualibrium'){
					size_plane=280;
				}
				var buid_color="";
				var part_color="";
				if (UIColor=="black"){
					buid_color = "rgb(30%, 30%, 30%)"
					part_color= 0xffffff;
				}
				else if (UIColor=="white"){
					buid_color = "rgb(70%, 70%, 70%)"
					part_color= 0x888888;
				}
				lgeometry.vertices.push( new THREE.Vector3( -(size_plane/2), 0, (size_plane/2) ) );
				lgeometry.vertices.push( new THREE.Vector3( (size_plane/2), 0, (size_plane/2) ));
				
				lgeometry.vertices.push( new THREE.Vector3( -(size_plane/2), 0, -(size_plane/2) ) );
				lgeometry.vertices.push( new THREE.Vector3( (size_plane/2), 0, -(size_plane/2) ));
				
				lgeometry.vertices.push( new THREE.Vector3( -(size_plane/2), 0, (size_plane/2) ) );
				lgeometry.vertices.push( new THREE.Vector3( -(size_plane/2), 0, -(size_plane/2) ));
				
				lgeometry.vertices.push( new THREE.Vector3( (size_plane/2), 0, (size_plane/2) ) );
				lgeometry.vertices.push( new THREE.Vector3( (size_plane/2), 0, -(size_plane/2) ));
					
				var line = new THREE.LineSegments( lgeometry, new THREE.LineBasicMaterial( { color: widget_color} ) );
				line.position.z=50;
				line.position.x=-25;
				lower_plane.add( line );
				lower_plane.position.x=-25;
				lower_plane.position.z=0;
				lower_plane.position.y=-25;
				if (game.game_mode=='aqualibrium'){
					line.position.z=8;
					line.position.x=8;
					line.position.y=5;
				}
				var SEPARATION = 100;
				var AMOUNTX = 15;
				var AMOUNTY = 15;
				
				
				var material = new THREE.SpriteMaterial({color : part_color});
				for ( var ix = 0; ix < AMOUNTX; ix++ ) {
					for ( var iy = 0; iy < AMOUNTY; iy++ ) {
						var mparticle = new THREE.Sprite( material );
						mparticle.scale.x = 3;
						mparticle.scale.y = 3;
						mparticle.position.y=-30;
						mparticle.position.x = ix * SEPARATION - ( ( AMOUNTX * SEPARATION ) / 2 );
						mparticle.position.z = iy * SEPARATION - ( ( AMOUNTY * SEPARATION ) / 2 );
						lower_plane.add( mparticle );
					}
				}
				scene.add(lower_plane);
				if (game.game_mode=='aqualibrium'){
					// create NYC texture + mesh
					var loader = new THREE.TextureLoader();
					var pathImage='images/aqualibrium1.png';
					loader.load( pathImage, function ( texture ) {
						var maxAnisotropy = renderer.getMaxAnisotropy();
						texture.anisotropy = maxAnisotropy;
						var geometry = new THREE.PlaneGeometry( 280, 280, 20, 20 );
						var material = new THREE.MeshBasicMaterial( { map: texture, overdraw: 0.5, opacity:0.7 , transparent: true ,side: THREE.FrontSide, wireframe:false} );
						textmaterial.map.minFilter = THREE.Nearest;
						var nyc_mesh = new THREE.Mesh( geometry, material );
						nyc_mesh.rotateX(-0.5*Math.PI);
						nyc_mesh.position.y = -20;//Math.random() * 2 - 1;
						nyc_mesh.position.x = -17;
						nyc_mesh.position.z = 8;
						//mesh.rotateX(-Math.PI);
						scene.add( nyc_mesh );
						
					} );
				}
				
				// var img = new Image();
				// img.src = 'images/nyc-128-3.png';
				// img.onload = function() {
					// var elev_data=getHeightData(img);
					
					// var buidlings_meshes = [], tgeometry, tmaterial, tmesh;
					
					// var side_coord=265/128;
					// var cnt =0;
					// var nb_pts=0;
					// for ( var i = 0, l = 128; i < l; i ++) {
						// for ( var j = 0, jl = 128; j < jl; j ++) {
							// if (elev_data[ cnt ]!=0) {
								// nb_pts++;
								// tgeometry = new THREE.BoxGeometry(side_coord,elev_data[ cnt ]/3,side_coord);
								// tmaterial = new THREE.MeshLambertMaterial({color: buid_color});
								// tmesh = new THREE.Mesh(tgeometry, tmaterial);
								// tmesh.position.z = i*side_coord;
								// tmesh.position.x = j*side_coord;
								// tmesh.position.y = elev_data[ cnt ]/(3*2);
								// buidlings_meshes.push(tmesh);
							// }
							// cnt++;
						// }
					// }
					// //console.log(nb_pts)
					// tgeometry = mergeMeshes(buidlings_meshes);
					// tmesh = new THREE.Mesh(tgeometry, tmaterial);
					// //scene.add(tmesh);
					// //tmesh.rotateZ(-1*Math.PI);
					// tmesh.position.y = -25;//Math.random() * 2 - 1;
					// tmesh.position.x = -23-(265/2);
					// tmesh.position.z = 5-(265/2);
					// scene.add( tmesh );
					
					
				// }
				// Add Sky Mesh
				sky = new THREE.Sky();
				scene.add( sky.mesh );

				// Add Sun Helper
				sunSphere = new THREE.Mesh(
					new THREE.SphereBufferGeometry( 20000, 16, 8 ),
					new THREE.MeshBasicMaterial( { color: 0xffffff } )
				);
				sunSphere.position.y =  700000;
				sunSphere.visible = false;
				scene.add( sunSphere );
				var effectController  = {
					turbidity: 20,
					reileigh: 2,
					mieCoefficient: 0.005,
					mieDirectionalG: 0.8,
					luminance: 1.0,
					inclination: 0.29, // elevation / inclination
					azimuth: 0.25, // Facing front,
					sun: ! true
				};
				if (UIColor=="black"){
					effectController.turbidity= 20;
					effectController.azimuth= 0.0;
					effectController.inclination= 0.499;
					effectController.mieDirectionalG= 0.8;
					effectController.mieCoefficient= 0.00694;
					effectController.reileigh= 3.9;
					effectController.luminance= 1.0;
				}
				else if (UIColor=="white"){
					effectController.turbidity= 20;
					effectController.inclination= 0.2;
					effectController.luminance= 0.7;
				
				}

				var distance = 400000;
				var uniforms = sky.uniforms;
				uniforms.turbidity.value = effectController.turbidity;
				uniforms.reileigh.value = effectController.reileigh;
				uniforms.luminance.value = effectController.luminance;
				uniforms.mieCoefficient.value = effectController.mieCoefficient;
				uniforms.mieDirectionalG.value = effectController.mieDirectionalG;

				var theta = Math.PI * ( effectController.inclination - 0.5 );
				var phi = 2 * Math.PI * ( effectController.azimuth - 0.5 );

				sunSphere.position.x = distance * Math.cos( phi );
				sunSphere.position.y = distance * Math.sin( phi ) * Math.sin( theta );
				sunSphere.position.z = distance * Math.sin( phi ) * Math.cos( theta );

				sunSphere.visible = effectController.sun;

				sky.uniforms.sunPosition.value.copy( sunSphere.position );
			}
		}
	
		document.addEventListener( 'mousemove', onDocumentMouseMove, false );
		document.addEventListener( 'mousedown', onDocumentMouseDown, false );
		raycaster = new THREE.Raycaster();
		mouse = new THREE.Vector2();
		window.addEventListener( 'resize', onWindowResize, false );
		//console.log(scene.children)	
		
		//console.log(game.modified_pipes);
		var update_dm=false;
		//for (elem in game.modified_pipes){
			//console.log(game.modified_pipes[elem])
			//console.log(user_latest_diameters[elem])
			//console.log(team_latest_diameters[elem])
		//	if (user_latest_diameters.hasOwnProperty(elem) && user_latest_diameters[elem] != game.modified_pipes[elem]){
		//		update_dm=true;
		//	}
		//	if (team_latest_diameters.hasOwnProperty(elem) && team_latest_diameters[elem]!=game.modified_pipes[elem]){
		//		update_dm=true;
		//	}
		//}
		for (tm in game.dm_teams_updated){
			if (team==tm && game.dm_teams_updated[tm]==false){
				update_dm=true;
			}
		}
		//console.log(update_dm);
		//console.log(game.dm_teams_updated);
		// update_dm=true;
		// //game.modified_pipes=data.change;
		if (update_dm==true){
			// tell the players that the game been changed by an external event
			document.getElementById('high-score-table').style.visibility="visible";
			document.getElementById('high-score-table').style.width="500px";
			document.getElementById('list_hs').innerHTML='<strong>Dear player,</strong><br>Some event triggered a change in the water distribution network.<br> You now have to cope with the consequences...<br>Good luck!';
			// discolor nodes 
			for (mpipe in game.modified_pipes){
				if (user_latest_diameters.hasOwnProperty(mpipe)){
					user_latest_diameters[mpipe]=game.modified_pipes[mpipe];
				}
				if (team_latest_diameters.hasOwnProperty(mpipe)){
					team_latest_diameters[mpipe]=game.modified_pipes[mpipe];
				}
			}
			if (isWebGl==false){
				var l_scene = scene.children[0].children.length;		
				for (var s =0;s<l_scene;s++){
					if (scene.children[0].children[s].name.startsWith('j-')){							
						scene.children[0].children[s].material.color = new THREE.Color( 0xdddddd );						
					}
					else if (scene.children[0].children[s].name.startsWith('pc-')){
						var cpipe=scene.children[0].children[s].name.split('pc-')[1];
						var index_diameter=0;
						if (game.modified_pipes.hasOwnProperty(cpipe)){
							index_diameter=game.modified_pipes[cpipe]
							var default_col = 0xff0000;						
							if (default_coloring_pipe){
								if (index_diameter!=0){
									default_col= 0x00ff00;
								}
							}
							else{
								//team_pipes_leakage={};
								//user_pipes_leakage={};
								if (user_pipes_leakage.hasOwnProperty(cpipe)){
									default_col=range_leakage_color(user_pipes_leakage[cpipe]);
								}
								else{
									default_col=range_leakage_color(team_pipes_leakage[cpipe]);
								}
								
							}
							var material = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter/4), opacity: 0.7 } );
							scene.children[0].children[s].material=material;
						}
					}
					else if (scene.children[0].children[s].name.startsWith('pf-')){
						var cpipe= scene.children[0].children[s].name.split('pf-')[1];
						var index_diameter=0;
						if (game.modified_pipes.hasOwnProperty(cpipe)){
							index_diameter=game.modified_pipes[cpipe]
							var material = new THREE.LineBasicMaterial( { color : def_line_col, linewidth:2+(index_diameter/(network['pipe_diameters'].length/5)), opacity: 1.0 } );
							scene.children[0].children[s].material=material;
						}
					}
				}
			}
			else{
				var m_group= scene.children[3].children;
				var l_scene = m_group.length;
				for (var s =0;s<l_scene;s++){
					if (m_group[s].type=="Mesh" ){
						if (m_group[s].name){ //&& (m_group[s].name=='pc-'+cpipe)) {
							if(m_group[s].name.startsWith('pc-')) {
								var cpipe= m_group[s].name.split('pc-')[1];
								if (game.modified_pipes.hasOwnProperty(cpipe)){
									var array_points=[];
									for (var i=0;i< all_changeable_pipes[cpipe]['Vertices'].length;i++ ){
										array_points.push( new THREE.Vector3(((parseFloat(all_changeable_pipes[cpipe]['Vertices'][i][0])-left_coord)*scale_3d)-(max_3d_width*0.5),0, ((parseFloat(all_changeable_pipes[cpipe]['Vertices'][i][1])-low_coord)*scale_3d)-(max_3d_width*0.5) ));
									}
									var curve = new THREE.CatmullRomCurve3(array_points);
									var index_diameter=0;
									index_diameter=game.modified_pipes[cpipe]
									var rad=0.8+(index_diameter/(network['pipe_diameters'].length/3));
									var seg =1;
									if (array_points.length>2){
										seg = 12;
									}
									var geometry = new THREE.TubeGeometry(
										curve,  //path
										seg,    //segments
										rad,     //radius
										8,     //radiusSegments
										false  //closed
									);
									geometry.dynamic = true;
									m_group[s].geometry=geometry;
									var default_col = 0xff0000;
									if (default_coloring_pipe){
										if (index_diameter!=0){
											default_col= 0x00ff00;
										}
									}
									else{
										//team_pipes_leakage={};
										//user_pipes_leakage={};
										if (user_pipes_leakage.hasOwnProperty(cpipe)){
											default_col=range_leakage_color(user_pipes_leakage[cpipe]);
										}
										else{
											default_col=range_leakage_color(team_pipes_leakage[cpipe]);
										}
										
									}
									m_group[s].material.color=new THREE.Color( default_col );
								}
							}
							if(m_group[s].name.startsWith('pf-')) {
								var cpipe= m_group[s].name.split('pf-')[1];
								if (game.modified_pipes.hasOwnProperty(cpipe)){
									console.log('modified pipe has property' +cpipe)
									var array_points=[];
									for (var i=0;i< all_fixed_pipes[cpipe]['Vertices'].length;i++ ){
										array_points.push( new THREE.Vector3(((parseFloat(all_fixed_pipes[cpipe]['Vertices'][i][0])-left_coord)*scale_3d)-(max_3d_width*0.5),0, ((parseFloat(all_fixed_pipes[cpipe]['Vertices'][i][1])-low_coord)*scale_3d)-(max_3d_width*0.5) ));
									}
									var curve = new THREE.CatmullRomCurve3(array_points);
									var index_diameter=0;
									index_diameter=game.modified_pipes[cpipe]
									var rad=0.8+(index_diameter/(network['pipe_diameters'].length/3));
									var seg =1;
									if (array_points.length>2){
										seg = 12;
									}
									var geometry = new THREE.TubeGeometry(
										curve,  //path
										seg,    //segments
										rad,     //radius
										8,     //radiusSegments
										false  //closed
									);
									geometry.dynamic = true;
									m_group[s].geometry=geometry;
									
									
								}
							}
							if (m_group[s].name.startsWith('j-')){
								m_group[s].material.color=new THREE.Color( 0x888888 );
							}
						}
						
					}
				}		
		
			}
			// and take away score display like before an evaluation
			var topinfo = '';
			topinfo +='<table class="table-condensed" style="font-size:16px;border-style: solid;border-color: '+mycol+';border-width: 0px;color:'+mycol+'">';
			topinfo +='<tr><td>Cost: </td><td>?</td><td>Leakage: </td><td>?</td><td>Max age: </td><td>?</td><td>Pressure deficit: </td><td>?</td><td>No. deficit nodes: </td><td>?</td></tr></table>'
			document.getElementById('info-top').innerHTML=topinfo;	
			
			var input_obj={};
			for (pipe in team_latest_diameters){
				if (team_latest_diameters[pipe] != diameters_2_index[all_pipes[pipe]['Diameter']]){
					if (user_latest_diameters.hasOwnProperty(pipe)){
						input_obj[pipe]=user_latest_diameters[pipe];
					}
					else{
						input_obj[pipe]=team_latest_diameters[pipe];
					}
				}
			}
			for (pipe in user_latest_diameters){
				if (input_obj.hasOwnProperty(pipe)==false){
					input_obj[pipe]=user_latest_diameters[pipe];
				}
			}
			for (mpipe in game.modified_pipes){
					input_obj[mpipe]=game.modified_pipes[mpipe]
			}
			latest_input = ' pipes';
			for (pipe in input_obj){
				latest_input +=' "'+pipe+'" '+input_obj[pipe]
			}
			input_obj=null;
			
			needEvaluation=true;
			requestDMCommit();
		
		}
		
		
	}
	
	function onDocumentMouseMove( event ) {
		if (event.shiftKey) {
			document.body.style.cursor = 'crosshair';
		}
		else{
			document.body.style.cursor = 'default';
		}
		event.preventDefault();
		if (isWebGl==false){
			mouse.x = ( (event.clientX-(window.innerWidth*0.05))/ (window.innerWidth*0.9) ) * 2 - 1;
			mouse.y = - ( (event.clientY-(167 )+document.body.scrollTop+$("#mynav").height()) / (window.innerHeight-200 )) * 2 + 1;
		}
		else{
			mouse.x = ( (event.clientX-(window.innerWidth*0.05))/ (window.innerWidth*0.9) ) * 2 - 1;
			mouse.y = - ( (event.clientY-167+document.body.scrollTop+$("#mynav").height()) / (window.innerHeight-200 )) * 2 + 1;
		}
		//console.log(document.body.scrollTop);
	}
	
	function animate() {

		requestAnimationFrame( animate );
		
		
		controls.update();
		stats.update();
		render();

	}
	
	function render() {
		
		camera.updateMatrixWorld();
		// find intersections
		if (mouseOverSpreadsheet==false){
			raycaster.setFromCamera( mouse, camera );
			var first_intersects= raycaster.intersectObjects( scene.children, true );
			
			var intersects=[];
			for (var i=0;i<first_intersects.length;i++){
				if (!(first_intersects[i].object.name.startsWith('t'))){
					intersects.push(first_intersects[i])
				}
			}
			if ( intersects.length > 0 ) {
				if (target){
					target.rotation.x+=0.03;
					target.rotation.y+=0.03;
				}
				if ( INTERSECTED != intersects[ 0 ].object ) {
					var mycol="";
					if (UIColor=="black"){
						mycol="white";
					}
					else if (UIColor=="white"){
						mycol="black";
					}
					if (isWebGl==false){
						var def_line_col;
						// lines
						if (UIColor=="black"){
							def_line_col=0xffffff;
						}
						else if (UIColor=="white"){
							def_line_col=0x888888;
						}
						var l_scene = scene.children[0].children.length;
							
						for (var s =0;s<l_scene;s++){
							// //console.log(scene.children[0].children[s])
							if (scene.children[0].children[s].name.startsWith('tk-') || scene.children[0].children[s].name.startsWith('r-') || scene.children[0].children[s].name.startsWith('j-')){							
								scene.children[0].children[s].material.program = programFill;							
							}
							else if (scene.children[0].children[s].name.startsWith('pc-')){
								var nb= parseInt(scene.children[0].children[s].name.split('pc-')[1])
								var default_col = 0xff0000;
								var index_diameter=0;
								if (_.isEmpty(user_latest_diameters)){
									index_diameter=team_latest_diameters[nb];
									//default_col= 0x00ff00;
								}
								else{
									if (user_latest_diameters.hasOwnProperty(nb)){
										index_diameter=user_latest_diameters[nb];
									}
									else{
										index_diameter=team_latest_diameters[nb];
									}
									
								}
								
								if (default_coloring_pipe){
									if (index_diameter!=0){
										default_col= 0x00ff00;
									}
								}
								else{
									if(needEvaluation){
										default_col= 0x888888;
									}
									else{
										
										if (user_pipes_leakage.hasOwnProperty(nb)){
											default_col=range_leakage_color(user_pipes_leakage[nb]);
										}
										else{
											default_col=range_leakage_color(team_pipes_leakage[nb]);
										}
									}
									
								}
								scene.children[0].children[s].material.lineWidth=1.0;
								scene.children[0].children[s].material.color=new THREE.Color( default_col );
								scene.children[0].children[s].material.opacity=0.7;
							}
							else if (scene.children[0].children[s].name.startsWith('pf')){
								scene.children[0].children[s].material.color=new THREE.Color( def_line_col );
								scene.children[0].children[s].material.opacity=0.7;
							}
						}
						if ( INTERSECTED && INTERSECTED.type=="Sprite" && ((INTERSECTED.name.startsWith('tk-')) || (INTERSECTED.name.startsWith('r-')) || (INTERSECTED.name.startsWith('j-')))) {
							INTERSECTED.material.program = programFill;
						}
						INTERSECTED = intersects[ 0 ].object;
						if ( INTERSECTED && INTERSECTED.type=="Sprite" && ((INTERSECTED.name.startsWith('tk-')) || (INTERSECTED.name.startsWith('r-')) || (INTERSECTED.name.startsWith('j-')))) {
							INTERSECTED.material.program = programStroke;
							if (INTERSECTED.name.startsWith('tk-')){
								var myinfo = '';
								myinfo +='<div style="border-radius: 10px;border-style: solid;border-color: '+mycol+';">';
								myinfo +='<table class="table table-condensed" style="font-size:20px;color:'+mycol+'">';
								myinfo +='<thead><tr><th>Tank &nbsp; &nbsp;'+INTERSECTED.name.split("tk-")[1]+'</th><th></th></tr></thead>'
								myinfo +='<tr><td></td><td></td></tr></table>'
								myinfo +='</div>'
								document.getElementById('info-win').innerHTML=myinfo;
							}
							else if (INTERSECTED.name.startsWith('r-')){
								var myinfo = '';
								myinfo +='<div style="border-radius: 10px;border-style: solid;border-color: '+mycol+';">';
								myinfo +='<table class="table table-condensed" style="font-size:20px;color:'+mycol+'">';
								myinfo +='<thead><tr><th>Reservoir &nbsp; &nbsp;'+INTERSECTED.name.split("r-")[1]+'</th><th></th></tr></thead>'
								if (game.game_mode=='aqualibrium'){
									if (INTERSECTED.name.split("r-")[1]=='Res1'){
									myinfo +='<tr><td>'+reservoir_1+'</td><td></td></tr></table>'
									}
									else if (INTERSECTED.name.split("r-")[1]=='Res2'){
									myinfo +='<tr><td>'+reservoir_2+'</td><td></td></tr></table>'
									}
									else if (INTERSECTED.name.split("r-")[1]=='Res3'){
									myinfo +='<tr><td>'+reservoir_3+'</td><td></td></tr></table>'
									}
									else{
									myinfo +='<tr><td></td><td></td></tr></table>'
									}
								}
								
								myinfo +='</div>'
								document.getElementById('info-win').innerHTML=myinfo;
							}
							else if (INTERSECTED.name.startsWith('j-')){
								var jid=INTERSECTED.name.split("j-")[1];
								var myinfo = '';
								
								document.getElementById('info-win').innerHTML=myinfo;
							}
						}
						else if ( INTERSECTED && INTERSECTED.type=="Line") {
							var nb= parseInt(INTERSECTED.name.split('pc-')[1])
							
							INTERSECTED.material.color = new THREE.Color( 0x0000ff );
							INTERSECTED.material.opacity=1.0;
							if (INTERSECTED.name.startsWith("pc-")){
								var pcid=INTERSECTED.name.split("pc-")[1];
								var myinfo ='';							
								myinfo +='<div style="border-radius: 10px;border-style: solid;border-color: '+mycol+';">';
								myinfo +='<table class="table table-condensed" style="font-size:20px;color:'+mycol+'">';
								myinfo +='<thead><tr><th>Changeable pipe</th><th>'+pcid+'</th></tr></thead>';
								// myinfo +='<tr><td>Diameter</td><td>'+index_2_diameters[user_latest_diameters[parseInt(INTERSECTED.name.split("mvl")[1])]]+'</td></tr>';
								myinfo +='<tr><td>Length</td><td>'+network['pipes'][pcid]['Length']+'</td></tr>'
								var index_diameter=0;
								if (_.isEmpty(user_latest_diameters)){
									//console.log(team_latest_diameters[pcid])
									if (team_latest_diameters[pcid]==-1){
										index_diameter=diameters_2_index[all_pipes[pcid]['Diameter']];
									}
									else{
										index_diameter=team_latest_diameters[pcid];
									}
								}
								else{
									if (user_latest_diameters.hasOwnProperty(pcid)){
										//console.log('pb 2 1')
										index_diameter=user_latest_diameters[pcid];
										if (user_latest_diameters[pcid]==-1){
											index_diameter=diameters_2_index[all_pipes[pcid]['Diameter']];
											
										}
									}
									else{
										//console.log('pb 2 2')
										index_diameter=team_latest_diameters[pcid];
									}
								}
								if (index_diameter==-1){
									index_diameter=diameters_2_index[all_pipes[elem]['Diameter']];
								}
								//console.log(index_diameter)
								myinfo +='<tr><td>Diameter:</td><td>'+index_2_diameters[index_diameter]+'</td></tr>';
								if (game.game_mode=='aqualibrium'){
									myinfo +='</table>';
								}
								myinfo +='</div>'
								myinfo +='<br><p align="center" style="font-size:20px; border-radius: 10px;border-style: solid;border-color: green;color:'+mycol+'"><i><b>Click on pipe</b><br>to change diameter</i></p>';
								document.getElementById('info-win').innerHTML=myinfo;
							}
							else if (INTERSECTED.name.startsWith("pf-")){
								var pfid=INTERSECTED.name.split("pf-")[1];
								var myinfo ='';
								myinfo +='<div style="border-radius: 10px;border-style: solid;border-color: '+mycol+';">';
								myinfo +='<table class="table table-condensed" style="font-size:20px;color:'+mycol+'">';
								myinfo +='<thead><tr><th>Fixed pipe</th><th>'+pfid+'</th></tr></thead>';
								// myinfo +='<tr><td>Diameter</td><td>'+listFixedLinks[parseInt(INTERSECTED.name.split("mfl")[1])]['Diameter']+'"</td></tr>';
								myinfo +='<tr><td>Length</td><td>'+network['pipes'][pfid]['Length']+'</td></tr>'
								myinfo +='<tr><td>Diameter:</td><td>'+index_2_diameters[team_latest_diameters[pfid]]+'</td></tr>';
								if(needEvaluation){
									myinfo +='<tr><td>Leakage:</td><td>?</td></tr></table>';
								}
								else{
									myinfo +='<tr><td>Leakage:</td><td>'+parseFloat(team_pipes_leakage[pfid]).toFixed(2)+'</td></tr></table>';
								}
								myinfo +='</div>'
								document.getElementById('info-win').innerHTML=myinfo;
							}
						}
						else{
							document.getElementById('info-win').innerHTML="";
						}
						
					}
					else{
						//if (detailLevel==1){
								
							//target.rotation.x+=0.03;
							//target.rotation.y+=0.03;
							var m_group= scene.children[3].children;
							var l_scene = m_group.length;
							//console.log(scene.children[3].children.length)
							for (var s =0;s<l_scene;s++){
								if (m_group[s].type=="Mesh" ){
									if (m_group[s].name && (m_group[s].name.startsWith('pc-')) ){
										var nb= m_group[s].name.split('pc-')[1];
										
										var index_diameter=0;
										if (_.isEmpty(user_latest_diameters)){
											index_diameter=team_latest_diameters[nb];
											//default_col= 0x00ff00;
										}
										else{
											if (user_latest_diameters.hasOwnProperty(nb)){
												index_diameter=user_latest_diameters[nb];
											}
											else{
												index_diameter=team_latest_diameters[nb];
											}
											
										}
										var default_col = 0xff0000;
										if (default_coloring_pipe){
											if (index_diameter!=0){
												default_col= 0x00ff00;
											}
										}
										else{
											if(needEvaluation){
												default_col= 0x888888;
											}
											else{
												
												if (user_pipes_leakage.hasOwnProperty(nb)){
													default_col=range_leakage_color(user_pipes_leakage[nb]);
												}
												else{
													default_col=range_leakage_color(team_pipes_leakage[nb]);
												}
											}
											
										}
										m_group[s].material.color=new THREE.Color( default_col );
									}
									if (m_group[s].name && (m_group[s].name.startsWith('pf-')) ){
										m_group[s].material.color=new THREE.Color( 0x2121ce );
									}
								}
							}	
							
							target.material.visible=false;
							
							INTERSECTED = intersects[ 0 ].object;
							//console.log(INTERSECTED.name)
							if (INTERSECTED && INTERSECTED.name.startsWith('p')){
								target.material.visible=false;
							}
							if ( INTERSECTED && INTERSECTED.type=="Mesh") {
								
								if (INTERSECTED.name.startsWith('tk-') || INTERSECTED.name.startsWith('r-') || INTERSECTED.name.startsWith('j-')){
									target.material.visible=true;
									target.position.x=INTERSECTED.position.x;
									target.position.y=INTERSECTED.position.y;
									target.position.z=INTERSECTED.position.z;
									if (game.game_mode=='aqualibrium' && INTERSECTED.name.startsWith('r-')){
										target.scale.x=2;
										target.scale.y=2;
										target.scale.z=2;
									}
									else{
										target.scale.x=1;
										target.scale.y=1;
										target.scale.z=1;
									}
								}
								else if (INTERSECTED.name.startsWith('pc-')){
									//target.material.visible=false;
									
									INTERSECTED.material.color=new THREE.Color( widget_color );
									target.material.visible=false;
								}
								else if (INTERSECTED.name.startsWith('pf-')){
									//target.material.visible=false;
									INTERSECTED.material.color=new THREE.Color( widget_color );
									target.material.visible=false;
								}
							}
							if (INTERSECTED.name.startsWith('tk-')){
								var myinfo = '';
								myinfo +='<div style="border-radius: 10px;border-style: solid;border-color: '+mycol+';">';
								myinfo +='<table class="table table-condensed" style="font-size:20px;color:'+mycol+'">';
								myinfo +='<thead><tr><th>Tank &nbsp; &nbsp;'+INTERSECTED.name.split("tk-")[1]+'</th><th></th></tr></thead>'
								myinfo +='<tr><td></td><td></td></tr></table>'
								myinfo +='</div>'
								
								// if (listNodes[parseInt(INTERSECTED.name.split("p")[1])]['minimumPressure']){
									// myinfo +='<div style="border-radius: 10px;border-style: solid;border-color: '+mycol+';">';
									// myinfo +='<table class="table table-condensed" style="font-size:20px;color:'+mycol+'">';
									// myinfo +='<thead><tr><th>NODE &nbsp; &nbsp;'+listNodes[parseInt(INTERSECTED.name.split("p")[1])]['id']+'</th><th></th></tr></thead>'
									// myinfo +='<tr><td>Minimum pressure</td><td>'+listNodes[parseInt(INTERSECTED.name.split("p")[1])]['minimumPressure'].toFixed(2)+'</td></tr>'
									// myinfo +='<tr><td>Measured pressure</td><td>'+listNodes[parseInt(INTERSECTED.name.split("p")[1])]['initialPressure'].toFixed(2)+'</td>'
									// //var diff = (listNodes[parseInt(INTERSECTED.name.split("p")[1])]['initialPressure']-listNodes[parseInt(INTERSECTED.name.split("p")[1])]['minimumPressure']).toFixed(2);
									// var diff =latest_pressures[parseInt(INTERSECTED.name.split("p")[1])-1]
									// if (diff>0){
										// myinfo += '<tr style="color:'+range_p_color(diff)+'"><td>Surplus</td><td>'+diff.toFixed(2)+'</td></tr></table>'; //style="color:'+range_p_color(diff)+'"
									// }
									// else{
										// myinfo += '<tr style="color:'+range_p_color(diff)+'"><td>Deficit</td><td>'+diff.toFixed(2)+'</td></tr></table>';
									// }
									// myinfo +='</div>'
								// }
								document.getElementById('info-win').innerHTML=myinfo;
							}
							else if (INTERSECTED.name.startsWith('r-')){
								var myinfo = '';
								myinfo +='<div style="border-radius: 10px;border-style: solid;border-color: '+mycol+';">';
								myinfo +='<table class="table table-condensed" style="font-size:20px;color:'+mycol+'">';
								myinfo +='<thead><tr><th>Reservoir &nbsp; &nbsp;'+INTERSECTED.name.split("r-")[1]+'</th><th></th></tr></thead>'
								//myinfo +='<tr><td></td><td></td></tr></table>'
								
								if (game.game_mode=='aqualibrium'){
									if (INTERSECTED.name.split("r-")[1]=='Res1'){
									myinfo +='<tr><td>'+reservoir_1+'</td><td></td></tr></table>'
									}
									else if (INTERSECTED.name.split("r-")[1]=='Res2'){
									myinfo +='<tr><td>'+reservoir_2+'</td><td></td></tr></table>'
									}
									else if (INTERSECTED.name.split("r-")[1]=='Res3'){
									myinfo +='<tr><td>'+reservoir_3+'</td><td></td></tr></table>'
									}
									else{
									myinfo +='<tr><td></td><td></td></tr></table>'
									}
								}
								myinfo +='</div>'
								// if (listNodes[parseInt(INTERSECTED.name.split("p")[1])]['minimumPressure']){
									// myinfo +='<div style="border-radius: 10px;border-style: solid;border-color: '+mycol+';">';
									// myinfo +='<table class="table table-condensed" style="font-size:20px;color:'+mycol+'">';
									// myinfo +='<thead><tr><th>NODE &nbsp; &nbsp;'+listNodes[parseInt(INTERSECTED.name.split("p")[1])]['id']+'</th><th></th></tr></thead>'
									// myinfo +='<tr><td>Minimum pressure</td><td>'+listNodes[parseInt(INTERSECTED.name.split("p")[1])]['minimumPressure'].toFixed(2)+'</td></tr>'
									// myinfo +='<tr><td>Measured pressure</td><td>'+listNodes[parseInt(INTERSECTED.name.split("p")[1])]['initialPressure'].toFixed(2)+'</td>'
									// //var diff = (listNodes[parseInt(INTERSECTED.name.split("p")[1])]['initialPressure']-listNodes[parseInt(INTERSECTED.name.split("p")[1])]['minimumPressure']).toFixed(2);
									// var diff =latest_pressures[parseInt(INTERSECTED.name.split("p")[1])-1]
									// if (diff>0){
										// myinfo += '<tr style="color:'+range_p_color(diff)+'"><td>Surplus</td><td>'+diff.toFixed(2)+'</td></tr></table>'; //style="color:'+range_p_color(diff)+'"
									// }
									// else{
										// myinfo += '<tr style="color:'+range_p_color(diff)+'"><td>Deficit</td><td>'+diff.toFixed(2)+'</td></tr></table>';
									// }
									// myinfo +='</div>'
								// }
								document.getElementById('info-win').innerHTML=myinfo;
							}
							else if (INTERSECTED.name.startsWith('j-')){
								var jid=INTERSECTED.name.split("j-")[1];
								var myinfo = '';
								
								document.getElementById('info-win').innerHTML=myinfo;
							}
							else if (INTERSECTED.name.startsWith("pc-")){
								var pcid=INTERSECTED.name.split("pc-")[1];
								var myinfo ='';						
																
								myinfo +='<div style="border-radius: 10px;border-style: solid;border-color: '+mycol+';">';
								myinfo +='<table class="table table-condensed" style="font-size:20px;color:'+mycol+'">';
								myinfo +='<thead><tr><th>Changeable pipe</th><th>'+pcid+'</th></tr></thead>';
								// myinfo +='<tr><td>Diameter</td><td>'+index_2_diameters[user_latest_diameters[parseInt(INTERSECTED.name.split("mvl")[1])]]+'</td></tr>';
								myinfo +='<tr><td>Length</td><td>'+network['pipes'][pcid]['Length']+'</td></tr>'
								var index_diameter=0;
								if (_.isEmpty(user_latest_diameters)){
									//console.log(team_latest_diameters[pcid])
									if (team_latest_diameters[pcid]==-1){
										index_diameter=diameters_2_index[all_pipes[pcid]['Diameter']];
									}
									else{
										index_diameter=team_latest_diameters[pcid];
									}
								}
								else{
									if (user_latest_diameters.hasOwnProperty(pcid)){
										//console.log('pb 2 1')
										index_diameter=user_latest_diameters[pcid];
										if (user_latest_diameters[pcid]==-1){
											index_diameter=diameters_2_index[all_pipes[pcid]['Diameter']];
											
										}
									}
									else{
										//console.log('pb 2 2')
										index_diameter=team_latest_diameters[pcid];
									}
								}
								if (index_diameter==-1){
									index_diameter=diameters_2_index[all_pipes[elem]['Diameter']];
								}
								//console.log(index_diameter)
								//console.log(index_2_diameters)
								myinfo +='<tr><td>Diameter:</td><td>'+index_2_diameters[index_diameter]+'</td></tr>';
								if (game.game_mode=='aqualibrium'){
									myinfo +='</table>';
								}
								myinfo +='</div>'
								myinfo +='<br><p align="center" style="font-size:20px; border-radius: 10px;border-style: solid;border-color: green;color:'+mycol+'"><i><b>Click on pipe</b><br>to change diameter</i></p>';
								document.getElementById('info-win').innerHTML=myinfo;
							}
							else if (INTERSECTED.name.startsWith("pf-")){
								var pfid=INTERSECTED.name.split("pf-")[1];
								var myinfo ='';
								myinfo +='<div style="border-radius: 10px;border-style: solid;border-color: '+mycol+';">';
								myinfo +='<table class="table table-condensed" style="font-size:20px;color:'+mycol+'">';
								myinfo +='<thead><tr><th>Fixed pipe</th><th>'+pfid+'</th></tr></thead>';
								// myinfo +='<tr><td>Diameter</td><td>'+listFixedLinks[parseInt(INTERSECTED.name.split("mfl")[1])]['Diameter']+'"</td></tr>';
								myinfo +='<tr><td>Length</td><td>'+network['pipes'][pfid]['Length']+'</td></tr>'
								myinfo +='<tr><td>Diameter:</td><td>'+index_2_diameters[team_latest_diameters[pfid]]+'</td></tr>';
								if(needEvaluation){
									myinfo +='<tr><td>Leakage:</td><td>?</td></tr></table>';
								}
								else{
									myinfo +='<tr><td>Leakage:</td><td>'+parseFloat(team_pipes_leakage[pfid]).toFixed(2)+'</td></tr></table>';
								}
								myinfo +='</div>'
								document.getElementById('info-win').innerHTML=myinfo;
							}
							else{
								document.getElementById('info-win').innerHTML="";
							}
							
						//}
					}
					
				}
				// else{
					
					
					
				// }
				
			}
			else{
				
				if (isWebGl==false){
					var def_line_col;
					// lines
					if (UIColor=="black"){
						def_line_col=0xffffff;
					}
					else if (UIColor=="white"){
						def_line_col=0x888888;
					}
					var l_scene = scene.children[0].children.length;
						
					for (var s =0;s<l_scene;s++){
						//console.log(scene.children[0].children[s])
						if (scene.children[0].children[s].name.startsWith('tk-') || scene.children[0].children[s].name.startsWith('r-') || scene.children[0].children[s].name.startsWith('j-')){							
							scene.children[0].children[s].material.program = programFill;							
						}
						else if (scene.children[0].children[s].name.startsWith('pc-')){
							var nb= scene.children[0].children[s].name.split('pc-')[1]
							var default_col = 0xff0000;
							var index_diameter=0;
							if (_.isEmpty(user_latest_diameters)){
								index_diameter=team_latest_diameters[nb];
								//default_col= 0x00ff00;
							}
							else{
								if (user_latest_diameters.hasOwnProperty(nb)){
									index_diameter=user_latest_diameters[nb];
								}
								else{
									index_diameter=team_latest_diameters[nb];
								}
								
							}
							
							if (default_coloring_pipe){
								if (index_diameter!=0){
									default_col= 0x00ff00;
								}
							}
							else{
								if(needEvaluation){
									default_col= 0x888888;
								}
								else{
									
									if (user_pipes_leakage.hasOwnProperty(nb)){
										default_col=range_leakage_color(user_pipes_leakage[nb]);
									}
									else{
										default_col=range_leakage_color(team_pipes_leakage[nb]);
									}
								}
								
							}
							//if (user_latest_diameters[nb]!=0){
							//	default_col= 0x00ff00;
							//}
							scene.children[0].children[s].material.lineWidth=1.0;
							scene.children[0].children[s].material.color=new THREE.Color( default_col );
							scene.children[0].children[s].material.opacity=0.7;
						}
						else if (scene.children[0].children[s].name.startsWith('pf-')){
							scene.children[0].children[s].material.color=new THREE.Color( def_line_col );
							scene.children[0].children[s].material.opacity=0.7;
						}
					}
					if (document.getElementById('info-win').innerHTML!=""){
						document.getElementById('info-win').innerHTML="";
					}
						
				}
				else if (isWebGl==true){
					
					
						target.material.visible=false;
						target.position.x= 10000000;
						target.position.y=10000000;
						target.position.z=10000000;
						var m_group= lines.children;
						var l_scene = m_group.length;
						//console.log(scene.children[3].children.length)
						for (var s =0;s<l_scene;s++){
							if (m_group[s].type=="Mesh" ){
								if (m_group[s].name && (m_group[s].name.startsWith('pc-')) ){
									var nb= m_group[s].name.split('pc-')[1]
									
									
									var index_diameter=0;
									if (_.isEmpty(user_latest_diameters)){
										index_diameter=team_latest_diameters[nb];
										//default_col= 0x00ff00;
									}
									else{
										if (user_latest_diameters.hasOwnProperty(nb)){
											index_diameter=user_latest_diameters[nb];
										}
										else{
											index_diameter=team_latest_diameters[nb];
										}
										
									}
									var default_col = 0xff0000;
									if (default_coloring_pipe){
										if (index_diameter!=0){
											default_col= 0x00ff00;
										}
									}
									else{
										if(needEvaluation){
											default_col= 0x888888;
										}
										else{
											
											if (user_pipes_leakage.hasOwnProperty(nb)){
												default_col=range_leakage_color(user_pipes_leakage[nb]);
											}
											else{
												default_col=range_leakage_color(team_pipes_leakage[nb]);
											}
										}
									}
									
									m_group[s].material.color=new THREE.Color( default_col );
									
								}
								if (m_group[s].name && (m_group[s].name.startsWith('pf-')) ){
									m_group[s].material.color=new THREE.Color( 0x2121ce );
								}
							}
						}
						if (document.getElementById('info-win').innerHTML!=""){
							document.getElementById('info-win').innerHTML="";
						}
						
					
				}
				
				INTERSECTED = null;
			}	
			
		}
		if (allSelectedPipes.length>0){
			if (isWebGl==false){
				var l_scene = scene.children[0].children.length;	
				for (var s =0;s<l_scene;s++){
					if (scene.children[0].children[s].name.startsWith('pc-')){
							var nb= scene.children[0].children[s].name.split('pc-')[1];
							if (allSelectedPipes.indexOf(""+nb)>-1){
								//if (UIColor=="black"){
								//	default_col=0xffffff;
								//}
								//else if (UIColor=="white"){
								//	default_col=0x888888;
								//}
								scene.children[0].children[s].material.lineWidth=1.0;
								scene.children[0].children[s].material.color=new THREE.Color( 0x0000ff );
								scene.children[0].children[s].material.opacity=0.7;
							}
							else{
								var default_col = 0xff0000;
								var index_diameter=0;
								if (_.isEmpty(user_latest_diameters)){
									index_diameter=team_latest_diameters[nb];
									//default_col= 0x00ff00;
								}
								else{
									if (user_latest_diameters.hasOwnProperty(nb)){
										index_diameter=user_latest_diameters[nb];
									}
									else{
										index_diameter=team_latest_diameters[nb];
									}
									
								}
								
								if (default_coloring_pipe){
									if (index_diameter!=0){
										default_col= 0x00ff00;
									}
								}
								else{
									if(needEvaluation){
										default_col= 0x888888;
									}
									else{
										
										if (user_pipes_leakage.hasOwnProperty(nb)){
											default_col=range_leakage_color(user_pipes_leakage[nb]);
										}
										else{
											default_col=range_leakage_color(team_pipes_leakage[nb]);
										}
									}
									
								}
								//if (user_latest_diameters[nb]!=0){
								//	default_col= 0x00ff00;
								//}
								scene.children[0].children[s].material.lineWidth=1.0;
								scene.children[0].children[s].material.color=new THREE.Color( default_col );
								scene.children[0].children[s].material.opacity=0.7;
							}
					}
				}
			}
			else{
				var m_group= lines.children;
				var l_scene = m_group.length;
				//console.log(scene.children[3].children.length)
				for (var s =0;s<l_scene;s++){
					if (m_group[s].type=="Mesh" ){
						if (m_group[s].name && (m_group[s].name.startsWith('pc-')) ){
							var nb= m_group[s].name.split('pc-')[1];
							if (allSelectedPipes.indexOf(""+nb)>-1){
								if (UIColor=="black"){
									default_col=widget_color;
								}
								else if (UIColor=="white"){
									default_col=widget_color;
								}
							}
							else{
								var index_diameter=0;
								if (_.isEmpty(user_latest_diameters)){
									index_diameter=team_latest_diameters[nb];
									//default_col= 0x00ff00;
								}
								else{
									if (user_latest_diameters.hasOwnProperty(nb)){
										index_diameter=user_latest_diameters[nb];
									}
									else{
										index_diameter=team_latest_diameters[nb];
									}
									
								}
								var default_col = 0xff0000;
								if (default_coloring_pipe){
									if (index_diameter!=0){
										default_col= 0x00ff00;
									}
								}
								else{
									if(needEvaluation){
										default_col= 0x888888;
									}
									else{
										
										if (user_pipes_leakage.hasOwnProperty(nb)){
											default_col=range_leakage_color(user_pipes_leakage[nb]);
										}
										else{
											default_col=range_leakage_color(team_pipes_leakage[nb]);
										}
									}
								}
								
							}
							m_group[s].material.color=new THREE.Color( default_col );
						}
					}
				}
			}
			
			
		}
		if (listEditedPipes.length>0){
			if (isWebGl==false){
				var l_scene = scene.children[0].children.length;	
				for (var s =0;s<l_scene;s++){
					if (scene.children[0].children[s].name.startsWith('pc-')){
							var nb= scene.children[0].children[s].name.split('pc-')[1];
							if (listEditedPipes.indexOf(""+nb)>-1){
								//if (UIColor=="black"){
								//	default_col=0xffffff;
								//}
								//else if (UIColor=="white"){
								//	default_col=0x888888;
								//}
								scene.children[0].children[s].material.lineWidth=1.0;
								scene.children[0].children[s].material.color=new THREE.Color( 0x0000ff );
								scene.children[0].children[s].material.opacity=0.7;
							}
							else{
								var default_col = 0xff0000;
								var index_diameter=0;
								if (_.isEmpty(user_latest_diameters)){
									index_diameter=team_latest_diameters[nb];
									//default_col= 0x00ff00;
								}
								else{
									if (user_latest_diameters.hasOwnProperty(nb)){
										index_diameter=user_latest_diameters[nb];
									}
									else{
										index_diameter=team_latest_diameters[nb];
									}
									
								}
								
								if (default_coloring_pipe){
									if (index_diameter!=0){
										default_col= 0x00ff00;
									}
								}
								else{
									if(needEvaluation){
										default_col= 0x888888;
									}
									else{
										
										if (user_pipes_leakage.hasOwnProperty(nb)){
											default_col=range_leakage_color(user_pipes_leakage[nb]);
										}
										else{
											default_col=range_leakage_color(team_pipes_leakage[nb]);
										}
									}
									
								}
								//if (user_latest_diameters[nb]!=0){
								//	default_col= 0x00ff00;
								//}
								scene.children[0].children[s].material.lineWidth=1.0;
								scene.children[0].children[s].material.color=new THREE.Color( default_col );
								scene.children[0].children[s].material.opacity=0.7;
							}
					}
				}
			}
			else{
				var m_group= lines.children;
				var l_scene = m_group.length;
				//console.log(scene.children[3].children.length)
				for (var s =0;s<l_scene;s++){
					if (m_group[s].type=="Mesh" ){
						if (m_group[s].name && (m_group[s].name.startsWith('pc-')) ){
							var nb= m_group[s].name.split('pc-')[1];
							if (listEditedPipes.indexOf(""+nb)>-1){
								if (UIColor=="black"){
									default_col=widget_color;
								}
								else if (UIColor=="white"){
									default_col=widget_color;
								}
							}
							else{
								var index_diameter=0;
								if (_.isEmpty(user_latest_diameters)){
									index_diameter=team_latest_diameters[nb];
									//default_col= 0x00ff00;
								}
								else{
									if (user_latest_diameters.hasOwnProperty(nb)){
										index_diameter=user_latest_diameters[nb];
									}
									else{
										index_diameter=team_latest_diameters[nb];
									}
									
								}
								var default_col = 0xff0000;
								if (default_coloring_pipe){
									if (index_diameter!=0){
										default_col= 0x00ff00;
									}
								}
								else{
									if(needEvaluation){
										default_col= 0x888888;
									}
									else{
										
										if (user_pipes_leakage.hasOwnProperty(nb)){
											default_col=range_leakage_color(user_pipes_leakage[nb]);
										}
										else{
											default_col=range_leakage_color(team_pipes_leakage[nb]);
										}
									}
								}
								
							}
							m_group[s].material.color=new THREE.Color( default_col );
						}
					}
				}
			}
			
			
		}
		
		renderer.render( scene, camera );

	}
	init();
	animate();
	
	
	d3.select("#r1").on("change", function() {
		if (this.checked){
			UIColor="black";			
			renderer.setClearColor( 0x000000 );
			widget_color = 0xffffff			
			mycol="white";
			init();
			var topinfo = '';

			//topinfo +='<table class="table-condensed" style="font-size:16px;border-style: solid;border-color: '+mycol+';border-width: 0px;color:'+mycol+'">';
			//topinfo +='<tr><td>Cost: </td><td>$'+d3.format(",.0f")(overall_cost)+'</td><td>Leakage: </td><td>'+leakage+'</td><td>Max age: </td><td>'+(water_age).toFixed(2)+'</td><td>Pressure deficit: </td><td>'+(pressure_deficit).toFixed(2)+'</td><td>No. deficit nodes: </td><td>'+nb_deficit_nodes+'</td></tr></table>'
			//var topinfo = '';

			topinfo +='<table class="table-condensed" style="font-size:16px;border-style: solid;border-color: '+mycol+';border-width: 0px;color:'+mycol+'">';
			if (game.game_mode=='aqualibrium'){
				topinfo +='<tr><td>Score: </td><td>'+parseFloat(overall_score).toFixed(3)+'</td><td>Reservoir 1: </td><td>'+(reservoir_1).toFixed(5)+'</td><td>Reservoir 2: </td><td>'+(reservoir_2).toFixed(5)+'</td><td>Reservoir 3: </td><td>'+(reservoir_3).toFixed(5)+'</td></tr></table>'
			}
			document.getElementById('info-top').innerHTML=topinfo;
			onWindowResize();
			updateWarning();
		}
		
	});
	d3.select("#r2").on("change", function() {
		if (this.checked){
			UIColor="white";
			renderer.setClearColor( 0xffffff );
			widget_color = 0x000000;
			mycol="black";
			init();
			var topinfo = '';

			var topinfo = '';

			topinfo +='<table class="table-condensed" style="font-size:16px;border-style: solid;border-color: '+mycol+';border-width: 0px;color:'+mycol+'">';
			if (game.game_mode=='aqualibrium'){
				topinfo +='<tr><td>Score: </td><td>'+parseFloat(overall_score).toFixed(3)+'</td><td>Reservoir 1: </td><td>'+(reservoir_1).toFixed(5)+'</td><td>Reservoir 2: </td><td>'+(reservoir_2).toFixed(5)+'</td><td>Reservoir 3: </td><td>'+(reservoir_3).toFixed(5)+'</td></tr></table>'
			}
			document.getElementById('info-top').innerHTML=topinfo;
			onWindowResize();
			updateWarning();
		}
		
	});
	
	d3.select("#rgd1").on("change", function() {
		if (this.checked){
			detailLevel=1;
			init();	
			onWindowResize();
		}
	});
	d3.select("#rgd2").on("change", function() {
		if (this.checked){
			detailLevel=2;
			init();
			onWindowResize();
		}
	});
	d3.select("#crgd1").on("change", function() {
		if (this.checked){
			range_p_color=d3.scale.linear().domain([min_max_diff_pressure[1],0,-0.0001,(min_max_diff_pressure[0]/2.0), min_max_diff_pressure[0]]).range(["#006622","#80ffaa","#ff8533","#ff0000","#800000"]);
			default_coloring_node=true;
			updatePressureNodesColors();
			onWindowResize();
		}
	});
	d3.select("#crgd2").on("change", function() {
		if (this.checked){
			range_p_color=d3.scale.linear().domain([min_max_age[0],((min_max_age[0]+min_max_age[1])/4.0),((min_max_age[0]+min_max_age[1])/2.0),min_max_age[1]]).range(["green","yellow","orange","red"]);
			default_coloring_node=false;
			updatePressureNodesColors();
			onWindowResize();
		}
	});
	
	d3.select("#pcrgd1").on("change", function() {
		if (this.checked){
			//range_p_color=d3.scale.linear().domain([min_max_diff_pressure[1],0,-0.0001,(min_max_diff_pressure[0]/2.0), min_max_diff_pressure[0]]).range(["#006622","#80ffaa","#ff8533","#ff0000","#800000"]);
			default_coloring_pipe=true;
			updatePipesColors();
			onWindowResize();
			//console.log(default_coloring_pipe)
			//updatePressureNodesColors();
		}
	});
	d3.select("#pcrgd2").on("change", function() {
		if (this.checked){
			//range_p_color=d3.scale.linear().domain([min_max_age[0],((min_max_age[0]+min_max_age[1])/4.0),((min_max_age[0]+min_max_age[1])/2.0),min_max_age[1]]).range(["green","yellow","orange","red"]);
			default_coloring_pipe=false;
			updatePipesColors();
			onWindowResize();
			//console.log(default_coloring_pipe)
			//updatePressureNodesColors();
		}
	});
	
	
	
	
	function onDocumentMouseDown( event ) {
		// //event.preventDefault();
		switch ( event.button ) {
			case 0: // left 
				if (event.shiftKey) {
					document.body.style.cursor = 'crosshair';
					if (isWebGl==false){
						// //if (INTERSECTED.name){
						if (INTERSECTED && INTERSECTED.name && INTERSECTED.name.startsWith('pc-')){
							if (document.querySelector('#x0').style.visibility=="visible"){
								//document.querySelector('#x0').style.visibility="hidden";
								
							}
							else{
								document.querySelector('#x0').style.visibility="visible";
								document.querySelector('#mycm').classList.toggle('show');
								document.querySelector('.menu-button').classList.toggle('open');
								document.querySelector('.circle').classList.toggle('open');
							}
							document.querySelector('.menu-button').style.top=(((window.innerHeight*0.7)*0.33)-90)+"px";
							document.querySelector('.menu-button').style.left=(((window.innerWidth*0.9))-146)+"px";
							
							
							
							document.getElementById('mycm').style.top=(((window.innerHeight*0.7)*0.33)-100)+"px";
							document.getElementById('mycm').style.left=(((window.innerWidth*0.9))-100)+"px";
							
							
							editedPipe= parseInt(INTERSECTED.name.split("pc-")[1]);
							
							if (listEditedPipes.indexOf(''+editedPipe)==-1){
								listEditedPipes.push(''+editedPipe);
								
							}
							else{
								var id =listEditedPipes.indexOf(''+editedPipe);
								listEditedPipes.splice(id, 1);
							}
							
							document.querySelector('#x0').style.top=435+'px'
							document.querySelector('#x0').style.left=25+'px'
							for (var b=0;b<items.length;b++){
								document.getElementById('c'+b).children[0].children[0].style.color="#ffffff";
							}
							if (_.isEmpty(user_latest_diameters)){
									
									document.getElementById('c'+1).children[0].children[0].style.color="#008000";
								}
								else{								
									if (user_latest_diameters.hasOwnProperty(editedPipe)){
										
										if (user_latest_diameters[editedPipe]==-1 || user_latest_diameters[editedPipe]=='-1'){
											var mv = diameters_2_index[all_pipes[editedPipe]['Diameter']];
											if (mv == 0){
												document.getElementById('c'+diameters_2_index[all_pipes[editedPipe]['Diameter']]).children[0].children[0].style.color="#008000";
											}
											else{
												document.getElementById('c'+1).children[0].children[0].style.color="#008000";
												
											}
										}
										else if (user_latest_diameters[editedPipe]==0){
											document.getElementById('c'+user_latest_diameters[editedPipe]).children[0].children[0].style.color="#008000";
										}
										else{
											document.getElementById('c'+(user_latest_diameters[editedPipe]+1)).children[0].children[0].style.color="#008000";
										}
									}
									else{
										if (all_changeable_pipes.hasOwnProperty(editedPipe)){
											document.getElementById('c'+1).children[0].children[0].style.color="#008000";
										}
										else{
											if (team_latest_diameters[editedPipe]==0){
												document.getElementById('c'+team_latest_diameters[editedPipe]).children[0].children[0].style.color="#008000";
											}
											
											else{
												document.getElementById('c'+(team_latest_diameters[editedPipe]+1)).children[0].children[0].style.color="#008000";
											}
										}
										
									}
								}
							
						}
						
					}
					else{
						
						
							if (INTERSECTED && INTERSECTED.name && INTERSECTED.name.startsWith('pc-')){
								
								if (document.querySelector('#x0').style.visibility=="visible"){
									//document.querySelector('#x0').style.visibility="hidden";
									
								}
								else{
									document.querySelector('#x0').style.visibility="visible";
									document.querySelector('#mycm').classList.toggle('show');
									document.querySelector('.menu-button').classList.toggle('open');
									document.querySelector('.circle').classList.toggle('open');
								}
								
								//
								document.getElementById('mycm').style.top=(((window.innerHeight*0.7)*0.33)-100)+"px";
								document.getElementById('mycm').style.left=(((window.innerWidth*0.9))-100)+"px";
								document.querySelector('.menu-button').style.top=(((window.innerHeight*0.7)*0.33)-90)+"px";
								document.querySelector('.menu-button').style.left=(((window.innerWidth*0.9))-146)+"px";
								
								
								editedPipe= parseInt(INTERSECTED.name.split("pc-")[1]);
								//console.log(editedPipe)
								if (listEditedPipes.indexOf(''+editedPipe)==-1){
									listEditedPipes.push(''+editedPipe);
									
								}
								else{
									var id =listEditedPipes.indexOf(''+editedPipe);
									listEditedPipes.splice(id, 1);
								}
								document.querySelector('#x0').style.top=435+'px';
								document.querySelector('#x0').style.left=25+'px';
								for (var b=0;b<items.length;b++){
									if (document.getElementById('c'+b)){
										document.getElementById('c'+b).children[0].children[0].style.color="#ffffff";
									}
								}
								if (_.isEmpty(user_latest_diameters)){
									
									document.getElementById('c'+1).children[0].children[0].style.color="#008000";
								}
								else{								
									if (user_latest_diameters.hasOwnProperty(editedPipe)){
										
										if (user_latest_diameters[editedPipe]==-1 || user_latest_diameters[editedPipe]=='-1'){
											var mv = diameters_2_index[all_pipes[editedPipe]['Diameter']];
											if (mv == 0){
												document.getElementById('c'+diameters_2_index[all_pipes[editedPipe]['Diameter']]).children[0].children[0].style.color="#008000";
											}
											else{
												//document.getElementById('c'+(diameters_2_index[all_pipes[editedPipe]['Diameter']]+1)).children[0].children[0].style.color="#008000";
												document.getElementById('c'+1).children[0].children[0].style.color="#008000";
											}
										}
										else if (user_latest_diameters[editedPipe]==0){
											document.getElementById('c'+user_latest_diameters[editedPipe]).children[0].children[0].style.color="#008000";
										}
										else{
											document.getElementById('c'+(user_latest_diameters[editedPipe]+1)).children[0].children[0].style.color="#008000";
										}
									}
									else{
										if (all_changeable_pipes.hasOwnProperty(editedPipe)){
											document.getElementById('c'+1).children[0].children[0].style.color="#008000";
										}
										else{
											//console.log(team_latest_diameters[editedPipe])
											if (team_latest_diameters[editedPipe]==0){
												document.getElementById('c'+team_latest_diameters[editedPipe]).children[0].children[0].style.color="#008000";
											}
											else if (team_latest_diameters[editedPipe]==-1){
												document.getElementById('c'+1).children[0].children[0].style.color="#008000";
											}
											else{
												document.getElementById('c'+(team_latest_diameters[editedPipe]+1)).children[0].children[0].style.color="#008000";
											}
										}
										
										
									}
								}
								
							}
							// else{
								
								
							// }
						
					}
				} 
				else {
					if (isWebGl==false){
						// //if (INTERSECTED.name){
						if (INTERSECTED && INTERSECTED.name && INTERSECTED.name.startsWith('pc-')){
							if (document.querySelector('#x0').style.visibility=="visible"){
								document.querySelector('#x0').style.visibility="hidden";
								
							}
							else{
								document.querySelector('#x0').style.visibility="visible";
								
							}
							document.querySelector('.menu-button').style.top=(((window.innerHeight*0.7)*0.33)-90)+"px";
							document.querySelector('.menu-button').style.left=(((window.innerWidth*0.9))-146)+"px";
							document.querySelector('.menu-button').classList.toggle('open');
							
							document.querySelector('#mycm').classList.toggle('show');
							document.getElementById('mycm').style.top=(((window.innerHeight*0.7)*0.33)-100)+"px";
							document.getElementById('mycm').style.left=(((window.innerWidth*0.9))-100)+"px";
							document.querySelector('.circle').classList.toggle('open');
							
							editedPipe= parseInt(INTERSECTED.name.split("pc-")[1]);
							listEditedPipes=[];
							document.querySelector('#x0').style.top=435+'px'
							document.querySelector('#x0').style.left=25+'px'
							for (var b=0;b<items.length;b++){
								document.getElementById('c'+b).children[0].children[0].style.color="#ffffff";
							}
							if (_.isEmpty(user_latest_diameters)){
									//console.log('pb 1')
									//console.log(team_latest_diameters[editedPipe])
									// if (team_latest_diameters[editedPipe]==0){								
										// document.getElementById('c'+team_latest_diameters[editedPipe]).children[0].children[0].style.color="#008000";
									// }
									// else if (team_latest_diameters[editedPipe]==-1){								
										// document.getElementById('c'+1).children[0].children[0].style.color="#008000";
									// }
									// else{														
										// document.getElementById('c'+(team_latest_diameters[editedPipe]+1)).children[0].children[0].style.color="#008000";
									// }
									document.getElementById('c'+1).children[0].children[0].style.color="#008000";
								}
								else{								
									if (user_latest_diameters.hasOwnProperty(editedPipe)){
										//console.log('pb 2 1')
										if (user_latest_diameters[editedPipe]==-1 || user_latest_diameters[editedPipe]=='-1'){
											var mv = diameters_2_index[all_pipes[editedPipe]['Diameter']];
											if (mv == 0){
												document.getElementById('c'+diameters_2_index[all_pipes[editedPipe]['Diameter']]).children[0].children[0].style.color="#008000";
											}
											else{
												document.getElementById('c'+1).children[0].children[0].style.color="#008000";
												//document.getElementById('c'+(diameters_2_index[all_pipes[editedPipe]['Diameter']]+1)).children[0].children[0].style.color="#008000";
											}
										}
										else if (user_latest_diameters[editedPipe]==0){
											document.getElementById('c'+user_latest_diameters[editedPipe]).children[0].children[0].style.color="#008000";
										}
										else{
											document.getElementById('c'+(user_latest_diameters[editedPipe]+1)).children[0].children[0].style.color="#008000";
										}
									}
									else{
										if (all_changeable_pipes.hasOwnProperty(editedPipe)){
											document.getElementById('c'+1).children[0].children[0].style.color="#008000";
										}
										else{
											if (team_latest_diameters[editedPipe]==0){
												document.getElementById('c'+team_latest_diameters[editedPipe]).children[0].children[0].style.color="#008000";
											}
											
											else{
												document.getElementById('c'+(team_latest_diameters[editedPipe]+1)).children[0].children[0].style.color="#008000";
											}
										}
										//console.log(team_latest_diameters[editedPipe])
										
									}
								}
							// document.getElementById('c'+user_latest_diameters[parseInt(INTERSECTED.name.split("vl")[1])]).children[0].children[0].style.color="#008000";
						}
						// else{
							
						// }
					}
					else{
						
						
							if (INTERSECTED && INTERSECTED.name && INTERSECTED.name.startsWith('pc-')){
								
								if (document.querySelector('#x0').style.visibility=="visible"){
									document.querySelector('#x0').style.visibility="hidden";
									
								}
								else{
									document.querySelector('#x0').style.visibility="visible";
									
								}
								
								document.querySelector('#mycm').classList.toggle('show');
								document.getElementById('mycm').style.top=(((window.innerHeight*0.7)*0.33)-100)+"px";
								document.getElementById('mycm').style.left=(((window.innerWidth*0.9))-100)+"px";
								document.querySelector('.menu-button').style.top=(((window.innerHeight*0.7)*0.33)-90)+"px";
								document.querySelector('.menu-button').style.left=(((window.innerWidth*0.9))-146)+"px";
								document.querySelector('.menu-button').classList.toggle('open');
								document.querySelector('.circle').classList.toggle('open');
								
								editedPipe= parseInt(INTERSECTED.name.split("pc-")[1]);
								listEditedPipes=[];
								document.querySelector('#x0').style.top=435+'px';
								document.querySelector('#x0').style.left=25+'px';
								for (var b=0;b<items.length;b++){
									if (document.getElementById('c'+b)){
										document.getElementById('c'+b).children[0].children[0].style.color="#ffffff";
									}
								}
								if (_.isEmpty(user_latest_diameters)){
									//console.log(user_latest_diameters)
									//console.log('pb 1')
									//console.log(team_latest_diameters[editedPipe])
									// if (team_latest_diameters[editedPipe]==0){								
										// document.getElementById('c'+team_latest_diameters[editedPipe]).children[0].children[0].style.color="#008000";
									// }
									// else if (team_latest_diameters[editedPipe]==-1){								
										// document.getElementById('c'+1).children[0].children[0].style.color="#008000";
									// }
									// else{														
										// document.getElementById('c'+(team_latest_diameters[editedPipe]+1)).children[0].children[0].style.color="#008000";
									// }
									document.getElementById('c'+1).children[0].children[0].style.color="#008000";
								}
								else{								
									if (user_latest_diameters.hasOwnProperty(editedPipe)){
										//console.log('pb 2 1')
										if (user_latest_diameters[editedPipe]==-1 || user_latest_diameters[editedPipe]=='-1'){
											//console.log(user_latest_diameters[editedPipe])
											var mv = diameters_2_index[all_pipes[editedPipe]['Diameter']];
											if (mv == 0){
												document.getElementById('c'+diameters_2_index[all_pipes[editedPipe]['Diameter']]).children[0].children[0].style.color="#008000";
											}
											else{
												//document.getElementById('c'+(diameters_2_index[all_pipes[editedPipe]['Diameter']]+1)).children[0].children[0].style.color="#008000";
												document.getElementById('c'+1).children[0].children[0].style.color="#008000";
											}
										}
										else if (user_latest_diameters[editedPipe]==0){
											document.getElementById('c'+user_latest_diameters[editedPipe]).children[0].children[0].style.color="#008000";
										}
										else{
											document.getElementById('c'+(user_latest_diameters[editedPipe]+1)).children[0].children[0].style.color="#008000";
										}
									}
									else{
										//console.log('pb 2 2')
										//console.log(team_latest_diameters[editedPipe])
										//console.log(user_latest_diameters)
										if (all_changeable_pipes.hasOwnProperty(editedPipe)){
											document.getElementById('c'+1).children[0].children[0].style.color="#008000";
										}
										else{
											if (team_latest_diameters[editedPipe]==0){
												document.getElementById('c'+team_latest_diameters[editedPipe]).children[0].children[0].style.color="#008000";
											}
											else if (team_latest_diameters[editedPipe]==-1){
												document.getElementById('c'+1).children[0].children[0].style.color="#008000";
											}
											else{
												document.getElementById('c'+(team_latest_diameters[editedPipe]+1)).children[0].children[0].style.color="#008000";
											}
										}
										
										//console.log(team_latest_diameters[editedPipe])
										
									}
								}
								//for (var b=0;b<items.length;b++){
								//	if (elem.id==('c'+b)){
								//		document.getElementById('c'+b).children[0].children[0].style.color="#008000";
								//	}
								//	else{
								//		document.getElementById('c'+b).children[0].children[0].style.color="#ffffff";
								//	}
								//}
								//document.getElementById('c'+user_latest_diameters[parseInt(INTERSECTED.name.split("mvl")[1])]).children[0].children[0].style.color="#ffffff";
							}
							// else{
								
								
							// }
						
					}
				}
				
				break;
			case 1: // middle
				break;
			case 2: // right
				break;
		}
	}
	
	
	function onWindowResize() {

		windowHalfX = (window.innerWidth*0.9) / 2;
		windowHalfY = (window.innerHeight-200);

		camera.aspect = (window.innerWidth*0.9) / (window.innerHeight-200);
		camera.updateProjectionMatrix();

		renderer.setSize( window.innerWidth*0.9, window.innerHeight-200 );
		
		d3_height=(window.innerHeight-200)/2;
		d3_svg.attr("width", d3_width);
		d3_svg.attr("height", d3_height+20);
		
		
		if(default_coloring_node){
			legend_psi.remove();
			legend_psi = d3_svg.append("g")
				.attr("class", "legend_psi")
				.attr("x", 0)
				.attr("y", 25)
				.attr("height", 100)
				.attr("width", 100);
			if (game.game_mode=='aqualibrium'){
				legend_bars.remove();
				legend_bars = d3_svg.append("g")
					.attr("class", "legend_bars")
					.attr("x", 0)
					.attr("y", 25)
					.attr("height", 100)
					.attr("width", 100);
				range_res=d3.scale.linear().domain([0.0,1.0]).range([0,(d3_height *0.4)]);
				res1_bar0= legend_bars.append("rect")
				  .attr("x", (window.innerWidth*0.05)+15)
				  .attr("y", (((d3_height *0.4)-range_res(reservoir_1))+95))//.attr("y", (7))
				  .attr("width", (d3_width *0.04))
				  .attr("height", range_res(reservoir_1))
				  .style("fill", "#3399ff");
				res1_bar= legend_bars.append("rect")
				  .attr("x", (window.innerWidth*0.05)+15)
				  .attr("y", 95)//.attr("y", (7))
				  .attr("width", (d3_width *0.04))
				  .attr("height", (d3_height *0.4))
				  .style("fill", "none")
				  .style("stroke", mycol)
				  .style("stroke-width", 1);
				legend_bars.append("text")
				  .attr("x",(window.innerWidth*0.05)+8) 
				  .attr("y", 88)
				  .attr("height",30)
				  .attr("width",100)
				  .style("fill", mycol).style("font-weight", "bold")//.style("font-style", "italic")
				  .style("font-size","large")
				  .text("Res1");
				res1_text = legend_bars.append("text")
				  .attr("x",(window.innerWidth*0.05)+8) 
				  .attr("y", 88+(d3_height *0.4)+25)
				  .attr("height",30)
				  .attr("width",100)
				  .style("fill", mycol).style("font-weight", "bold")//.style("font-style", "italic")
				  .style("font-size","large")
				  .text((reservoir_1).toFixed(3));  
				res2_bar0= legend_bars.append("rect")
				  .attr("x", (window.innerWidth*0.05)+80)
				  .attr("y", (((d3_height *0.4)-range_res(reservoir_2))+95))//.attr("y", (7))
				  .attr("width", (d3_width *0.04))
				  .attr("height", range_res(reservoir_2))
				  .style("fill", "#3399ff");
				res2_bar= legend_bars.append("rect")
				  .attr("x", (window.innerWidth*0.05)+80)
				  .attr("y", 95)//.attr("y", (7))
				  .attr("width", (d3_width *0.04))
				  .attr("height", (d3_height *0.4))
				  .style("fill", "none")
				  .style("stroke", mycol)
				  .style("stroke-width", 1);
				legend_bars.append("text")
				  .attr("x",(window.innerWidth*0.05)+73) 
				  .attr("y", 88)
				  .attr("height",30)
				  .attr("width",100)
				  .style("fill", mycol).style("font-weight", "bold")//.style("font-style", "italic")
				  .style("font-size","large")
				  .text("Res2");
				res2_text = legend_bars.append("text")
				  .attr("x",(window.innerWidth*0.05)+73) 
				  .attr("y", 88+(d3_height *0.4)+25)
				  .attr("height",30)
				  .attr("width",100)
				  .style("fill", mycol).style("font-weight", "bold")//.style("font-style", "italic")
				  .style("font-size","large")
				  .text((reservoir_2).toFixed(3));  
				res3_bar0= legend_bars.append("rect")
				  .attr("x", (window.innerWidth*0.05)+145)
				  .attr("y", (((d3_height *0.4)-range_res(reservoir_3))+95))//.attr("y", (7))
				  .attr("width", (d3_width *0.04))
				  .attr("height", range_res(reservoir_3))
				  .style("fill", "#3399ff");
				res3_bar= legend_bars.append("rect")
				  .attr("x", (window.innerWidth*0.05)+145)
				  .attr("y", 95)//.attr("y", (7))
				  .attr("width", (d3_width *0.04))
				  .attr("height", (d3_height *0.4))
				  .style("fill", "none")
				  .style("stroke", mycol)
				  .style("stroke-width", 1);
				legend_bars.append("text")
				  .attr("x",(window.innerWidth*0.05)+138) 
				  .attr("y", 88)
				  .attr("height",30)
				  .attr("width",100)
				  .style("fill", mycol).style("font-weight", "bold")//.style("font-style", "italic")
				  .style("font-size","large")
				  .text("Res3");
				res3_text = legend_bars.append("text")
				  .attr("x",(window.innerWidth*0.05)+138) 
				  .attr("y", 88+(d3_height *0.4)+25)
				  .attr("height",30)
				  .attr("width",100)
				  .style("fill", mycol).style("font-weight", "bold")//.style("font-style", "italic")
				  .style("font-size","large")
				  .text((reservoir_3).toFixed(3));  
			}
		}
		else{
			legend_psi.remove();
			legend_psi = d3_svg.append("g")
				.attr("class", "legend_psi")
				.attr("x", 0)
				.attr("y", 25)
				.attr("height", 100)
				.attr("width", 100);
			
		}
		
		

		stats.dom.style.top = parseInt(window.innerHeight-48 )+"px";
		stats.dom.style.left = 0+"px";
		document.getElementById('slideout').style.top= ((window.innerHeight)*0.20)+"px";
		
		document.getElementById('info-win').style.left=((window.innerWidth*0.05)+10)+"px";
		document.getElementById('info-win').style.top=(((window.innerHeight)*0.25)+185)+"px";
		document.getElementById('info-cost').style.left=((window.innerWidth*0.05+10))+"px";
		document.getElementById('info-cost').style.top=((window.innerHeight)*0.25)+"px";
		document.getElementById('info-top').style.left=((window.innerWidth*0.05)+320)+"px";
		document.getElementById('info-top').style.top=120+"px";
		document.getElementById('info-top').style.width=((window.innerWidth*0.9*0.6))+"px";
		//document.getElementById('mycm').style.top=(((window.innerHeight*0.7)*0.50)-100)+"px";
		//document.getElementById('mycm').style.left=(((window.innerWidth*0.9)*0.50)-100)+"px";
		//document.querySelector('.menu-button').style.top=(((window.innerHeight*0.7)*0.50)-90)+"px";
		//document.querySelector('.menu-button').style.left=(((window.innerWidth*0.9)*0.50)-146)+"px";
		
		document.querySelector('.menu-button').style.top=(((window.innerHeight*0.7)*0.33)-90)+"px";
		document.querySelector('.menu-button').style.left=(((window.innerWidth*0.9))-146)+"px";
		document.getElementById('mycm').style.top=(((window.innerHeight*0.7)*0.33)-100)+"px";
		document.getElementById('mycm').style.left=(((window.innerWidth*0.9))-100)+"px";
							
		
		document.querySelector('#x0').style.top=435+'px';
		document.querySelector('#x0').style.left=25+'px';
		//document.querySelector('#x1').style.top=105+'px'
		//document.querySelector('#x1').style.left=125+'px'
		// //document.getElementById('rdb').style.top=((window.innerHeight*0.29))+"px";
		// //document.getElementById('rdb').style.left=((window.innerWidth*0.307))+"px";

    }
	
	function generateSprite(parameters) {
		var message=parameters.message || 'label';
		var canvas = document.createElement( 'canvas' );
		var context = canvas.getContext( '2d' );
		var fontface = parameters.fontface || 'Helvetica';
		var fontsize = parameters.fontsize || 70;
		// get size data (height depends only on font size)
		var metrics = context.measureText(message);
		var textWidth = metrics.width;
		canvas.width = textWidth;
		canvas.height = fontsize;
		//if (game.game_mode!='aqualibrium'){
			//canvas.width = 128;
			//canvas.height = 128;
		//}
		//else{
			canvas.width = 128;
			canvas.height = 128;
		//}
		context.font = fontsize + "px " + fontface;
		// text color
		if (UIColor=="black"){
			context.fillStyle = 'rgba(255, 255, 255, 1.0)';
		}
		else if (UIColor=="white"){
			context.fillStyle = 'rgba(0, 0, 0, 1.0)';
		}
		//context.fillStyle = 0xffffff;
		//if (game.game_mode!='aqualibrium'){
			context.fillText(message, 5, 5+fontsize);
		//}
		//else{
		//	context.fillText(message, 5, 5+fontsize);
		//}
		return canvas;

	}
	
	function displayCostInfo(elem){
		if (game.game_mode=='aqualibrium'){
			var nb= parseInt(elem.id.split('c')[1]);
			
			var myinfo = '';
			
				
			
			
		}
		//var totalCost=0;
		//for (var i=0;i<user_latest_diameters.length;i++){
		//	totalCost+= (listVariableLinks[i]['Length']*nytCosts[user_latest_diameters[i]]);
		//}
		//myinfo +='<div style="border-radius: 10px;border-style: solid;border-color: '+mycol+';">';
		//myinfo +='<table class="table table-condensed" style="font-size:18px;color:'+mycol+'">';
		//var diff =(listVariableLinks[editedPipe]['Length']*nytCosts[nb])-(listVariableLinks[editedPipe]['Length']*nytCosts[user_latest_diameters[editedPipe]]);
		//var diffcolor="";
		//if (diff>=0){
		//	diffcolor="red"
		//}
		//else{
		//	diffcolor="green"
		//}
		//myinfo +='<thead><tr><th>Pipe &nbsp; &nbsp;'+listVariableLinks[editedPipe]['id']+'</th><th></th></tr></thead>'
		//myinfo +='<tr><td>Length: </td><td>'+(listVariableLinks[editedPipe]['Length']).toFixed(0)+'</td></tr>'
		//myinfo +='<tr><td>Price/ft: </td><td>'+format(nytCosts[nb])+'/ft</td></tr>'
		//myinfo +='<tr><td>Pipe cost: </td><td>'+format(listVariableLinks[editedPipe]['Length']*nytCosts[nb])+'</td></tr>'
		//var extra_diff="";
		//if(diff!=0){
		//	extra_diff='<span style="color:'+diffcolor+';font-weight:bold;"> ('+formatDiff(diff)+')</span>'
		//}
		//myinfo +='<tr><td>Total cost: </td><td>'+format(totalCost+(listVariableLinks[editedPipe]['Length']*nytCosts[nb])-((listVariableLinks[editedPipe]['Length']*nytCosts[user_latest_diameters[editedPipe]])))+''+extra_diff+'</td></tr></table>'
		//myinfo +='</div>';
		document.getElementById('info-cost').innerHTML=myinfo;
	}
	
	function clearCostInfo(elem){
		document.getElementById('info-cost').innerHTML="";
	}
	
	function activate(elem){
		//console.log(elem.id)
		for (var b=0;b<items.length;b++){
			if (document.getElementById('c'+b)){
									
				if (elem.id==('c'+b)){
					document.getElementById('c'+b).children[0].children[0].style.color="#008000";
				}
				else{
					document.getElementById('c'+b).children[0].children[0].style.color="#ffffff";
				}
			}
		}
		
		if (game.game_mode=='aqualibrium'){
			var get_default_pipe=false;
			if (editedPipe != -1){
				if (listEditedPipes.length>0){
					for (var idnb=0; idnb<listEditedPipes.length;idnb++){
						
						var selection= parseInt(elem.id.split("c")[1]);
						if (selection==0){
							user_latest_diameters[listEditedPipes[idnb]]=selection;
							needEvaluation=true;
						}
						else if (selection==1){
							user_latest_diameters[listEditedPipes[idnb]]=0;
							get_default_pipe=true;
							needEvaluation=true;
						}
						else{
							user_latest_diameters[listEditedPipes[idnb]]=selection-1;
							needEvaluation=true;
						}
					}
				}
				else{
					var selection= parseInt(elem.id.split("c")[1]);
					if (selection==0){
						user_latest_diameters[editedPipe]=selection;
						needEvaluation=true;
					}
					else if (selection==1){
						user_latest_diameters[editedPipe]=0;
						get_default_pipe=true;
						needEvaluation=true;
					}
					else{
						user_latest_diameters[editedPipe]=selection-1;
						needEvaluation=true;
					}
				}
			}
			//if (user_latest_diameters.hasOwnProperty("")){
				delete user_latest_diameters[""];
			//}
			//console.log(user_latest_diameters)
			//console.log(team_latest_diameters)
			var input_obj={};
			for (pipe in team_latest_diameters){
				if (team_latest_diameters[pipe] && (team_latest_diameters[pipe] != diameters_2_index[all_pipes[pipe]['Diameter']])){
					if (user_latest_diameters.hasOwnProperty(pipe)){
						input_obj[pipe]=user_latest_diameters[pipe];
					}
					else{
						input_obj[pipe]=team_latest_diameters[pipe];
					}
				}
			}
			for (pipe in user_latest_diameters){
				if (input_obj.hasOwnProperty(pipe)==false){
					input_obj[pipe]=user_latest_diameters[pipe];
				}
			}
			for (mpipe in game.modified_pipes){
					input_obj[mpipe]=game.modified_pipes[mpipe]
			}
			latest_input = ' pipes';
			for (pipe in input_obj){
				latest_input +=' "'+pipe+'" '+input_obj[pipe]
			}
			//console.log(latest_input)
			input_obj=null;
			//console.log(listEditedPipes)
			if (listEditedPipes.length>0){
				
				if (isWebGl==false){
					var l_scene = scene.children[0].children.length;		
					for (var s =0;s<l_scene;s++){
						
						if (scene.children[0].children[s].name.startsWith('j-')){							
							scene.children[0].children[s].material.color = new THREE.Color( 0xdddddd );						
						}
						else if (scene.children[0].children[s].name.startsWith('pc-')){
						//else if (scene.children[0].children[s].name=='pc-'+editedPipe){	
							var namep = scene.children[0].children[s].name.split('pc-')[1]
							if (listEditedPipes.indexOf(namep)!=-1){
								var index_diameter=0;
								if (get_default_pipe){
									index_diameter=0;
									user_latest_diameters[namep]=0;
								}
								else{
									if (_.isEmpty(user_latest_diameters)){
										index_diameter=team_latest_diameters[namep];
									}
									else{
										if (user_latest_diameters.hasOwnProperty(namep)){
											index_diameter=user_latest_diameters[namep];
										}
										else{
											index_diameter=team_latest_diameters[namep];
										}
										
									}
								}
								var default_col = 0xff0000;
								if (default_coloring_pipe){
									if (index_diameter!=0){
										default_col= 0x00ff00;
									}
								}
								else{
									default_col= 0x888888;
									
								}
								var material;// = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter/4), opacity: 0.7 } );
								if (index_diameter==0){
									material = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter/(network['pipe_diameters'].length/5)), opacity: 1.0 } );
								}
								else if (index_diameter==1){
									material = new THREE.LineBasicMaterial( { color : default_col, linewidth:6, opacity: 1.0 } );
								}
								else if (index_diameter==2){
									material = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter*8), opacity: 1.0 } );
								}
									
								
								
								scene.children[0].children[s].material=material;
							}
						}
					}
				}
				else{
					
						var m_group= scene.children[3].children;
						var l_scene = m_group.length;
						for (var s =0;s<l_scene;s++){
							if (m_group[s].type=="Mesh" ){
								
								if (m_group[s].name && (m_group[s].name.startsWith('pc-'))) {
									var namep = m_group[s].name.split('pc-')[1];
									
									if (listEditedPipes.indexOf(namep)!=-1){
										//console.log(namep)
										var array_points=[];
										for (var i=0;i< all_changeable_pipes[namep]['Vertices'].length;i++ ){
											array_points.push( new THREE.Vector3(((parseFloat(all_changeable_pipes[namep]['Vertices'][i][0])-left_coord)*scale_3d)-(max_3d_width*0.5),0, ((parseFloat(all_changeable_pipes[namep]['Vertices'][i][1])-low_coord)*scale_3d)-(max_3d_width*0.5) ));
										}
										var curve = new THREE.CatmullRomCurve3(array_points);
										var index_diameter=0;
										if (get_default_pipe){
											//console.log("default")
											index_diameter=0;
											user_latest_diameters[namep]=0;
										}
										else{
											if (_.isEmpty(user_latest_diameters)){
												index_diameter=team_latest_diameters[namep];
											}
											else{
												if (user_latest_diameters.hasOwnProperty(namep)){
													index_diameter=user_latest_diameters[namep];
												}
												else{
													index_diameter=team_latest_diameters[namep];
												}
												
											}
										}
										//console.log(editedPipe+":"+index_diameter)
										var rad=0.8+(index_diameter/(network['pipe_diameters'].length/3));
										if (game.game_mode=='aqualibrium'){
											if (index_diameter==0){
												rad=0.8+(0/(network['pipe_diameters'].length/2.8));
											}
											else if (index_diameter==1){
												rad=0.8+(0.5/(network['pipe_diameters'].length/2.8));
											}
											else if (index_diameter==2){
												rad=0.8+(index_diameter/(network['pipe_diameters'].length/3));
											}
										}
										
										var seg =1;
										if (array_points.length>2){
											seg = 12;
										}
										var geometry = new THREE.TubeGeometry(
											curve,  //path
											seg,    //segments
											rad,     //radius
											8,     //radiusSegments
											false  //closed
										);
										geometry.dynamic = true;
										m_group[s].geometry=geometry;
										var default_col = 0xff0000;
										if (default_coloring_pipe){
											if (index_diameter!=0){
												default_col= 0x00ff00;
											}
										}
										else{
											default_col= 0x888888;
											
										}
										m_group[s].material.color=new THREE.Color( default_col );
									}
								}
								if (m_group[s].name.startsWith('j-')){
									m_group[s].material.color=new THREE.Color( 0x888888 );
								}
							}
						}		
					
				}
			}
			else{
				if (isWebGl==false){
					var l_scene = scene.children[0].children.length;		
					for (var s =0;s<l_scene;s++){
						if (scene.children[0].children[s].name.startsWith('j-')){							
							scene.children[0].children[s].material.color = new THREE.Color( 0xdddddd );						
						}
						else if (scene.children[0].children[s].name=='pc-'+editedPipe){
							var index_diameter=0;
							if (get_default_pipe){
								index_diameter=0;
								user_latest_diameters[editedPipe]=0;
							}
							else{
								if (_.isEmpty(user_latest_diameters)){
									index_diameter=team_latest_diameters[editedPipe];
								}
								else{
									if (user_latest_diameters.hasOwnProperty(editedPipe)){
										index_diameter=user_latest_diameters[editedPipe];
									}
									else{
										index_diameter=team_latest_diameters[editedPipe];
									}
									
								}
							}
							var default_col = 0xff0000;
							if (default_coloring_pipe){
								if (index_diameter!=0){
									default_col= 0x00ff00;
								}
							}
							else{
								default_col= 0x888888;
								
							}
							var material;// = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter/4), opacity: 0.7 } );
							if (index_diameter==0){
								material = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter/(network['pipe_diameters'].length/5)), opacity: 1.0 } );
							}
							else if (index_diameter==1){
								material = new THREE.LineBasicMaterial( { color : default_col, linewidth:6, opacity: 1.0 } );
							}
							else if (index_diameter==2){
								material = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter*8), opacity: 1.0 } );
							}
								
							
							
							scene.children[0].children[s].material=material;
						}
					}
				}
				else{
					
						var m_group= scene.children[3].children;
						var l_scene = m_group.length;
						for (var s =0;s<l_scene;s++){
							if (m_group[s].type=="Mesh" ){
								if (m_group[s].name && (m_group[s].name=='pc-'+editedPipe)) {
									var array_points=[];
									for (var i=0;i< all_changeable_pipes[editedPipe]['Vertices'].length;i++ ){
										array_points.push( new THREE.Vector3(((parseFloat(all_changeable_pipes[editedPipe]['Vertices'][i][0])-left_coord)*scale_3d)-(max_3d_width*0.5),0, ((parseFloat(all_changeable_pipes[editedPipe]['Vertices'][i][1])-low_coord)*scale_3d)-(max_3d_width*0.5) ));
									}
									var curve = new THREE.CatmullRomCurve3(array_points);
									var index_diameter=0;
									if (get_default_pipe){
										//console.log("default")
										index_diameter=0;
										user_latest_diameters[editedPipe]=0;
									}
									else{
										if (_.isEmpty(user_latest_diameters)){
											index_diameter=team_latest_diameters[editedPipe];
										}
										else{
											if (user_latest_diameters.hasOwnProperty(editedPipe)){
												index_diameter=user_latest_diameters[editedPipe];
											}
											else{
												index_diameter=team_latest_diameters[editedPipe];
											}
											
										}
									}
									//console.log(editedPipe+":"+index_diameter)
									var rad=0.8+(index_diameter/(network['pipe_diameters'].length/3));
									if (game.game_mode=='aqualibrium'){
										if (index_diameter==0){
											rad=0.8+(0/(network['pipe_diameters'].length/2.8));
										}
										else if (index_diameter==1){
											rad=0.8+(0.5/(network['pipe_diameters'].length/2.8));
										}
										else if (index_diameter==2){
											rad=0.8+(index_diameter/(network['pipe_diameters'].length/3));
										}
									}
									
									var seg =1;
									if (array_points.length>2){
										seg = 12;
									}
									var geometry = new THREE.TubeGeometry(
										curve,  //path
										seg,    //segments
										rad,     //radius
										8,     //radiusSegments
										false  //closed
									);
									geometry.dynamic = true;
									m_group[s].geometry=geometry;
									var default_col = 0xff0000;
									if (default_coloring_pipe){
										if (index_diameter!=0){
											default_col= 0x00ff00;
										}
									}
									else{
										default_col= 0x888888;
										
									}
									m_group[s].material.color=new THREE.Color( default_col );
									
								}
								if (m_group[s].name.startsWith('j-')){
									m_group[s].material.color=new THREE.Color( 0x888888 );
								}
							}
						}		
					
				}
			}
			updateSpreadSheet();
			res1_bar0.transition(200)
			  .attr("y", (((d3_height *0.4)-range_res((0)))+95))//.attr("y", (7))
			  .attr("height", range_res((0)));
			res2_bar0.transition(200)
			  .attr("y", (((d3_height *0.4)-range_res((0)))+95))//.attr("y", (7))
			  .attr("height", range_res((0)));
			res3_bar0.transition(200)
			  .attr("y", (((d3_height *0.4)-range_res((0)))+95))//.attr("y", (7))
			  .attr("height", range_res((0)));
			
			res1_text.text(0);
			res2_text.text(0);  
			res3_text.text(0);  	
			overall_score=0.0;
			reservoir_1=0.0;
			reservoir_2=0.0;
			reservoir_3=0.0;
			
		}
		var topinfo = '';

		topinfo +='<table class="table-condensed" style="font-size:16px;border-style: solid;border-color: '+mycol+';border-width: 0px;color:'+mycol+'">';
		if (game.game_mode=='aqualibrium'){
			topinfo +='<tr><td>Score: </td><td>?</td><td>Reservoir 1: </td><td>?</td><td>Reservoir 2: </td><td>?</td><td>Reservoir 3: </td><td>?</td></tr></table>'
		}
		document.getElementById('info-top').innerHTML=topinfo;
		updateWarning();
		updateReservoirsLevels();
		
	}
	
	function activate2(elem){
		document.querySelector('#mycm').classList.remove('show');
		document.querySelector('.circle').classList.remove('open');
		editedPipe = -1;
		document.querySelector('#x0').style.visibility="hidden";
		
		document.querySelector('.menu-button').classList.remove('open');
		listEditedPipes=[];
	}
	
	function lowCostReset(){
		if (game.game_mode=='aqualibrium'){
			
			user_latest_diameters={};
				if (isWebGl==false){
					var l_scene = scene.children[0].children.length;		
					for (var s =0;s<l_scene;s++){
						//if (scene.children[0].children[s].name.startsWith('j-')){							
						//	scene.children[0].children[s].material.color = new THREE.Color( 0xdddddd );						
						//}
						if (scene.children[0].children[s].name.startsWith('pc-')){
							var cpipe= scene.children[0].children[s].name.split('pc-')[1];
							var index_diameter=0;
							if (game['pipes_roles'].hasOwnProperty(cpipe) && (game['pipes_roles'][cpipe]==member)){
								//index_diameter=diameters_2_index[network['pipes'][cpipe]['Diameter']];
								user_latest_diameters[cpipe]=0;
								//delete user_latest_diameters[cpipe];
								//console.log(cpipe+' : '+index_diameter)
							}
							//else{
							//	index_diameter=team_latest_diameters[cpipe];
							//}
							var default_col = 0xff0000;
							//if (default_coloring_pipe){
							//	if (index_diameter!=0){
							//		default_col= 0x00ff00;
							//	}
							//}
							//else{
							//	default_col= 0x888888;	
							//}
							var material = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter/4), opacity: 0.7 } );
							scene.children[0].children[s].material=material;
						}
					}
				}
				else{
					
					var m_group= scene.children[3].children;
					var l_scene = m_group.length;
					for (var s =0;s<l_scene;s++){
						if (m_group[s].type=="Mesh" ){
							if (m_group[s].name){ //&& (m_group[s].name=='pc-'+cpipe)) {
								if(m_group[s].name.startsWith('pc-')) {
									var cpipe= m_group[s].name.split('pc-')[1];
									var array_points=[];
									for (var i=0;i< all_changeable_pipes[cpipe]['Vertices'].length;i++ ){
										array_points.push( new THREE.Vector3(((parseFloat(all_changeable_pipes[cpipe]['Vertices'][i][0])-left_coord)*scale_3d)-(max_3d_width*0.5),0, ((parseFloat(all_changeable_pipes[cpipe]['Vertices'][i][1])-low_coord)*scale_3d)-(max_3d_width*0.5) ));
									}
									var curve = new THREE.CatmullRomCurve3(array_points);
									var index_diameter=0;
									var rad=0.8+(index_diameter/(network['pipe_diameters'].length/3));
									var seg =1;
									if (array_points.length>2){
										seg = 12;
									}
									var geometry = new THREE.TubeGeometry(
										curve,  //path
										seg,    //segments
										rad,     //radius
										8,     //radiusSegments
										false  //closed
									);
									geometry.dynamic = true;
									m_group[s].geometry=geometry;
									var default_col = 0xff0000;
									m_group[s].material.color=new THREE.Color( default_col );
								}
							}
							//if (m_group[s].name.startsWith('j-')){
							//	m_group[s].material.color=new THREE.Color( 0x888888 );
							//}
						}
					}		
					
				}
			//}
			var input_obj={};
			
			for (pipe in all_changeable_pipes){	
					team_latest_diameters[pipe]=0;
					user_latest_diameters[pipe]=0;
					input_obj[pipe]=0;
			}
			
			for (mpipe in game.modified_pipes){
					input_obj[mpipe]=game.modified_pipes[mpipe]
			}
			latest_input = ' pipes';
			for (pipe in input_obj){
				latest_input +=' "'+pipe+'" '+input_obj[pipe]
			}
			input_obj=null;
			//console.log(latest_input)
			// requestComputation();
			needEvaluation=true;
			//resetSpreadSheet();
			updateSpreadSheet();
			res1_bar0.transition(200)
			  .attr("y", (((d3_height *0.4)-range_res((0)))+95))//.attr("y", (7))
			  .attr("height", range_res((0)));
			res2_bar0.transition(200)
			  .attr("y", (((d3_height *0.4)-range_res((0)))+95))//.attr("y", (7))
			  .attr("height", range_res((0)));
			res3_bar0.transition(200)
			  .attr("y", (((d3_height *0.4)-range_res((0)))+95))//.attr("y", (7))
			  .attr("height", range_res((0)));
			res1_text.text('0');
			res2_text.text('0');
			res3_text.text('0');
			overall_score=0.0;
			reservoir_1=0.0;
			reservoir_2=0.0;
			reservoir_3=0.0;
		}
		var topinfo = '';

		topinfo +='<table class="table-condensed" style="font-size:16px;border-style: solid;border-color: '+mycol+';border-width: 0px;color:'+mycol+'">';
		if (game.game_mode=='aqualibrium'){
			topinfo +='<tr><td>Score: </td><td>?</td><td>Reservoir 1: </td><td>?</td><td>Reservoir 2: </td><td>?</td><td>Reservoir 3: </td><td>?</td></tr></table>'
		}
		document.getElementById('info-top').innerHTML=topinfo;
		updateWarning();
		updateReservoirsLevels();
	}
	
	function maxCostReset(){
		user_latest_diameters={};
		//console.log(network['pipe_diameters'].length)
		var max_d=network['pipe_diameters'].length;
		for (cpipe in all_changeable_pipes){
			user_latest_diameters[cpipe]=max_d;
		}
		//console.log('reset')
		//for (cpipe in all_changeable_pipes){
			if (isWebGl==false){
				var l_scene = scene.children[0].children.length;		
				for (var s =0;s<l_scene;s++){
					if (scene.children[0].children[s].name.startsWith('j-')){							
						scene.children[0].children[s].material.color = new THREE.Color( 0xdddddd );						
					}
					else if (scene.children[0].children[s].name.startsWith('pc-')){
						var cpipe= scene.children[0].children[s].name.split('pc-')[1];
						var index_diameter=0;
						if (_.isEmpty(user_latest_diameters)){
							index_diameter=team_latest_diameters[cpipe];
						}
						else{
							if (user_latest_diameters.hasOwnProperty(cpipe)){
								index_diameter=user_latest_diameters[cpipe];
							}
							else{
								index_diameter=team_latest_diameters[cpipe];
							}
							
						}
						var default_col = 0xff0000;						
						if (default_coloring_pipe){
							if (index_diameter!=0){
								default_col= 0x00ff00;
							}
						}
						else{
							default_col= 0x888888;
							
						}
						var material = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter/4), opacity: 0.7 } );
						scene.children[0].children[s].material=material;
					}
				}
			}
			else{
				
					var m_group= scene.children[3].children;
					var l_scene = m_group.length;
					for (var s =0;s<l_scene;s++){
						if (m_group[s].type=="Mesh" ){
							if (m_group[s].name){ //&& (m_group[s].name=='pc-'+cpipe)) {
								if(m_group[s].name.startsWith('pc-')) {
									var cpipe= m_group[s].name.split('pc-')[1];
									//if (m_group[s].name && (m_group[s].name=='pc-'+cpipe)) {
									var array_points=[];
									for (var i=0;i< all_changeable_pipes[cpipe]['Vertices'].length;i++ ){
										array_points.push( new THREE.Vector3(((parseFloat(all_changeable_pipes[cpipe]['Vertices'][i][0])-left_coord)*scale_3d)-(max_3d_width*0.5),0, ((parseFloat(all_changeable_pipes[cpipe]['Vertices'][i][1])-low_coord)*scale_3d)-(max_3d_width*0.5) ));
									}
									var curve = new THREE.CatmullRomCurve3(array_points);
									var index_diameter=0;
									if (_.isEmpty(user_latest_diameters)){
										index_diameter=team_latest_diameters[cpipe];
									}
									else{
										if (user_latest_diameters.hasOwnProperty(cpipe)){
											index_diameter=user_latest_diameters[cpipe];
										}
										else{
											index_diameter=team_latest_diameters[cpipe];
										}
										
									}
									var rad=0.8+(index_diameter/(network['pipe_diameters'].length/3));
									var seg =1;
									if (array_points.length>2){
										seg = 12;
									}
									var geometry = new THREE.TubeGeometry(
										curve,  //path
										seg,    //segments
										rad,     //radius
										8,     //radiusSegments
										false  //closed
									);
									geometry.dynamic = true;
									m_group[s].geometry=geometry;
									var default_col = 0xff0000;
									if (default_coloring_pipe){
										if (index_diameter!=0){
											default_col= 0x00ff00;
										}
									}
									else{
										default_col= 0x888888;
										
									}
									m_group[s].material.color=new THREE.Color( default_col );
								}
							}
							if (m_group[s].name.startsWith('j-') ){
								m_group[s].material.color=new THREE.Color( 0x888888 );
							}
						}
					}		
				
			}
		//}
		
		var input_obj={};
		for (pipe in team_latest_diameters){
			if (team_latest_diameters[pipe] != diameters_2_index[all_pipes[pipe]['Diameter']]){
				if (user_latest_diameters.hasOwnProperty(pipe)){
					input_obj[pipe]=user_latest_diameters[pipe];
				}
				else{
					input_obj[pipe]=team_latest_diameters[pipe];
				}
			}
		}
		for (pipe in user_latest_diameters){
			if (input_obj.hasOwnProperty(pipe)==false){
				input_obj[pipe]=user_latest_diameters[pipe];
			}
		}
		for (mpipe in game.modified_pipes){
				input_obj[mpipe]=game.modified_pipes[mpipe]
		}
		latest_input = ' pipes';
		for (pipe in input_obj){
			latest_input +=' "'+pipe+'" '+input_obj[pipe]
		}
		input_obj=null;
		//console.log(latest_input)
		// requestComputation();
		needEvaluation=true;
		resetSpreadSheet();
		var topinfo = '';

		topinfo +='<table class="table-condensed" style="font-size:16px;border-style: solid;border-color: '+mycol+';border-width: 0px;color:'+mycol+'">';
		if (game.game_mode=='aqualibrium'){
			topinfo +='<tr><td>Score: </td><td>?</td><td>Reservoir 1: </td><td>?</td><td>Reservoir 2: </td><td>?</td><td>Reservoir 3: </td><td>?</td></tr></table>'
		}
		document.getElementById('info-top').innerHTML=topinfo;
	}
	
	function requestComputation(){
		
		var input_obj={};
		if (game.game_mode=='aqualibrium'){
			for (pipe in team_latest_diameters){
				if (team_latest_diameters[pipe] && (team_latest_diameters[pipe] != diameters_2_index[all_pipes[pipe]['Diameter']])){
					if (user_latest_diameters.hasOwnProperty(pipe)){
						input_obj[pipe]=user_latest_diameters[pipe];
					}
					else{
						input_obj[pipe]=team_latest_diameters[pipe];
					}
				}
			}
		}
		for (pipe in user_latest_diameters){
			if (input_obj.hasOwnProperty(pipe)==false){
				input_obj[pipe]=user_latest_diameters[pipe];
			}
		}
		for (mpipe in game.modified_pipes){
				input_obj[mpipe]=game.modified_pipes[mpipe]
		}
		latest_input = ' pipes';
		for (pipe in input_obj){
			if (pipe!="" && isNaN(input_obj[pipe])==false){
				latest_input +=' "'+pipe+'" '+input_obj[pipe]
			}
		}
		var myparam = '"'+myuser.name+ '" "'+ game.game_mode+ '" "'+ game.name+ '" "'+ game.network_name+'" '+ game.time_points+ ' "evaluate" e'+ latest_input 
		io.socket.put('/playerevaluate', {history: myparam, mode: game_mode },function gotResponse(body, response) { });
		listEditedPipes=[];
	}
	
	function requestCommit(){
		//
			//console.log(latest_input);
			var d = new Date();
			var n = d.getTime();
			var input_obj={};
			
			if (game.game_mode=='aqualibrium'){
				for (pipe in team_latest_diameters){
					if (pipe!=='NaN' && team_latest_diameters[pipe] && (team_latest_diameters[pipe] != diameters_2_index[all_pipes[pipe]['Diameter']])){
						if (user_latest_diameters.hasOwnProperty(pipe)){
							input_obj[pipe]=user_latest_diameters[pipe];
						}
						else{
							input_obj[pipe]=team_latest_diameters[pipe];
						}
					}
				}
				
			}
			for (pipe in user_latest_diameters){
				if (pipe!=='NaN' && input_obj.hasOwnProperty(pipe)==false){
					input_obj[pipe]=user_latest_diameters[pipe];
				}
			}
			for (mpipe in game.modified_pipes){
					input_obj[mpipe]=game.modified_pipes[mpipe]
			}
			latest_input = ' pipes';
			if (input_obj.hasOwnProperty("")){
				delete input_obj[''];
			}
			for (pipe in input_obj){
				if (pipe!="" && isNaN(input_obj[pipe])==false){
					latest_input +=' "'+pipe+'" '+input_obj[pipe]
					//console.log(pipe)
				}
			}
			var pid = ""+myuser.name+n;
			//console.log(pid);
			pid = pid.replace(/\s/g,"_"); 
			//console.log(pid);
			var myparam = '"'+myuser.name+ '" "'+ game.game_mode+ '" "'+ game.name+ '" "'+ game.network_name+'" '+ game.time_points+ ' "'+pid+'" c'+ latest_input; 
			//console.log(myparam);
			//console.log(input_obj);
			var go_on=true;
			if (game.game_mode=='aqualibrium'){
				if (game.players_teams.hasOwnProperty(myuser.name) && game.players_teams[myuser.name]['team']==myuser.name){
					go_on=true;
				}
				else{
					go_on=false;
				}
			}
			if (go_on==true){
				document.getElementById('commit-btn').className += "disabled";
				document.getElementById('commit-btn').style.pointerEvents = "none";
				commit_id=myuser.name+''+n;
				commit_id=commit_id.replace(/\s/g,"_"); 
				commit_timer=0;
				if(myInterval==null){
					myInterval = window.setInterval(function (a,b) {
						commit_timer++;
						//console.log(commit_timer+' : '+commit_id)
						
						if (commit_id=='' || (!(commit_id))){
							commit_timer=0;
							clearInterval(myInterval);
							myInterval=null;
						}
						else if (commit_id!='' && commit_timer >= 30){
							commit_timer=0;
							clearInterval(myInterval);
							myInterval=null;
							if (server_maintenance==true){
								window.alert("Sorry ! The game server is undergoing some maintenance. Try again in a couple of hours. Thank you !" );
							}
							else{
								window.alert("The network did not seem to allow your commit to come through. \n Please try again." );
							}
							document.getElementById('commit-btn').className = "btn btn-danger";
							document.getElementById('commit-btn').style.pointerEvents = "auto";
						}
						
					},500);
				}
				io.socket.put('/playercommit', {history: myparam, mygame:game.name, myteam: team, player: myuser.name, mydate: n, mode: game_mode},function gotResponse(body, response) { });
				//console.log(myparam);
				d=null;
				listEditedPipes=[];
			}
		
		
		
	}
	
	function requestDMCommit(){
		//
			//console.log(latest_input);
			var d = new Date();
			var n = d.getTime();
			var pid = ""+myuser.name+n;
			pid = pid.replace(/\s/g,"_"); 
			var myparam = '"'+myuser.name+ '" "'+ game.game_mode+ '" "'+ game.name+ '" "'+ game.network_name+'" '+ game.time_points+ ' "'+pid+'" d'+ latest_input; 
			document.getElementById('commit-btn').className += "disabled";
			document.getElementById('commit-btn').style.pointerEvents = "none";
			commit_id=myuser.name+''+n;
			commit_id=commit_id.replace(/\s/g,"_"); 
			commit_timer=0;
			if(myInterval==null){
				myInterval = window.setInterval(function (a,b) {
					commit_timer++;
					console.log(commit_timer+' : '+commit_id)
					
					if (commit_id=='' || (!(commit_id))){
						commit_timer=0;
						clearInterval(myInterval);
						myInterval=null;
					}
					else if (commit_id!='' && commit_timer >= 30){
						commit_timer=0;
						clearInterval(myInterval);
						myInterval=null;
						window.alert("The network did not seem to allow your commit to come through. \n Please try again." )
						document.getElementById('commit-btn').className = "btn btn-danger";
						document.getElementById('commit-btn').style.pointerEvents = "auto";
					}
					
				},500);
			}
			io.socket.put('/dmcommit', {history: myparam, mygame:game.name, myteam: team, player: myuser.name, mydate: n, mode: game_mode},function gotResponse(body, response) { });
			//console.log(latest_input)
			d=null;
		listEditedPipes=[];
			
		
		
		
	}
	
	function updateReservoirsLevels(){
		if (game.game_mode=='aqualibrium'){
			if (isWebGl==true){
				var m_group= scene.children[3].children;
				var l_scene = m_group.length;
				for (var s =0;s<l_scene;s++){
					if (m_group[s].type=="Mesh" ){
						if(m_group[s].name.startsWith('w-')) {
							//console.log(m_group[s].name)
							var res= m_group[s].name.split('w-')[1];
							if (res=='Res1'){
								//var geometry = new THREE.CylinderGeometry(12/2, 12/2, 20, 50, 50, true);
								if (reservoir_1==0.0){
									m_group[s].scale.y=(0.00001);
									m_group[s].position.y = 0-(20*(0.00001*0.5));
								}
								else{
									m_group[s].scale.y=(reservoir_1);
									m_group[s].position.y = 0-(20*(reservoir_1*0.5));
								}
							}
							if (res=='Res2'){
								//var geometry = new THREE.CylinderGeometry(12/2, 12/2, 20, 50, 50, true);
								if (reservoir_1==0.0){
									m_group[s].scale.y=(0.00001);
									m_group[s].position.y = 0-(20*(0.00001*0.5));
								}
								else{
									//m_group[s].geometry.scale.y=(reservoir_1);
									m_group[s].scale.y=(reservoir_2);
									m_group[s].position.y = 0-(20*(reservoir_2*0.5));
								}
							}
							if (res=='Res3'){
								//var geometry = new THREE.CylinderGeometry(12/2, 12/2, 20, 50, 50, true);
								if (reservoir_1==0.0){
									m_group[s].scale.y=(0.00001);
									m_group[s].position.y = 0-(20*(0.00001*0.5));
								}
								else{
									//m_group[s].geometry.scale.y=(reservoir_1);
									m_group[s].scale.y=(reservoir_3);
									m_group[s].position.y = 0-(20*(reservoir_3*0.5));
								}
							}
						}
					}
				}
			}
		}
	}
	
	function updatePipesColors(){
		
		if (game.game_mode=='aqualibrium'){
			if (isWebGl==false){
				var l_scene = scene.children[0].children.length;		
				for (var s =0;s<l_scene;s++){
					
					if (scene.children[0].children[s].name.startsWith('pc-')){
						var cpipe= scene.children[0].children[s].name.split('pc-')[1];
						
						var index_diameter=0;
						if (_.isEmpty(user_latest_diameters)){
							index_diameter=team_latest_diameters[cpipe];
							//default_col= 0x00ff00;
						}
						else{
							if (user_latest_diameters.hasOwnProperty(cpipe)){
								index_diameter=user_latest_diameters[cpipe];
							}
							else{
								index_diameter=team_latest_diameters[cpipe];
							}
							
						}
							
						var default_col = 0xff0000;						
						if (default_coloring_pipe){
							if (index_diameter!=0){
								default_col= 0x00ff00;
							}
						}
						else{
							if(needEvaluation){
								default_col= 0x888888;
							}
							else{
								
								if (user_pipes_leakage.hasOwnProperty(cpipe)){
									default_col=range_leakage_color(user_pipes_leakage[cpipe]);
								}
								else{
									default_col=range_leakage_color(team_pipes_leakage[cpipe]);
								}
							}
							
						}
						var material;// = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter/4), opacity: 0.7 } );
						if (index_diameter==0){
							material = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter/(network['pipe_diameters'].length/5)), opacity: 1.0 } );
						}
						else if (index_diameter==1){
							material = new THREE.LineBasicMaterial( { color : default_col, linewidth:6, opacity: 1.0 } );
						}
						else if (index_diameter==2){
							material = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter*8), opacity: 1.0 } );
						}
						
						scene.children[0].children[s].material=material;
						
					}
				}
			}
			else{
				var m_group= scene.children[3].children;
				var l_scene = m_group.length;
				for (var s =0;s<l_scene;s++){
					if (m_group[s].type=="Mesh" ){
						if (m_group[s].name){ //&& (m_group[s].name=='pc-'+cpipe)) {
							if(m_group[s].name.startsWith('pc-')) {
								var cpipe= m_group[s].name.split('pc-')[1];
								var index_diameter=0;
								if (_.isEmpty(user_latest_diameters)){
									index_diameter=team_latest_diameters[cpipe];
									//default_col= 0x00ff00;
								}
								else{
									if (user_latest_diameters.hasOwnProperty(cpipe)){
										index_diameter=user_latest_diameters[cpipe];
									}
									else{
										index_diameter=team_latest_diameters[cpipe];
									}
									
								}
									
								var default_col = 0xff0000;
								//console.log(parseInt(index_diameter))
								if (parseInt(index_diameter)!=0){
									default_col= 0x00ff00;
								}
								
								
								m_group[s].material.color=new THREE.Color( default_col );
								
							}
						}
					}
				}		
			}
		}
	}
	
	
	function updatePressureNodesColors(){
		if (default_coloring_node){
			if (isWebGl==false){
				var l_scene = scene.children[0].children.length;	
					for (var s =0;s<l_scene;s++){
						if (scene.children[0].children[s].name.startsWith('j-')){
							var nb= parseInt(scene.children[0].children[s].name.split('j-')[1]);
							
							var mycolor = range_p_color(team_junctions_data[nb][0]);
							if (user_junctions_data.hasOwnProperty(nb)){
								mycolor = range_p_color(user_junctions_data[nb][0]);
							}
							
							scene.children[0].children[s].material.color = new THREE.Color( mycolor );					
						}
					}	
			}
			else{
				var m_group= scene.children[3].children;
				var l_scene = m_group.length;
				//console.log(scene.children[3].children.length)
				for (var s =0;s<l_scene;s++){
					if (m_group[s].type=="Mesh" ){
						if (m_group[s].name && (m_group[s].name.startsWith('j-')) ){
							var nb= parseInt(scene.children[3].children[s].name.split('j-')[1]);
							
							var mycolor = range_p_color(team_junctions_data[nb][0]);
							if (user_junctions_data.hasOwnProperty(nb)){
								mycolor = range_p_color(user_junctions_data[nb][0]);
							}
							
							m_group[s].material.color=new THREE.Color(mycolor );
						}
					}
				}
				
			}
		}
		else{
			if (isWebGl==false){
				var l_scene = scene.children[0].children.length;	
					for (var s =0;s<l_scene;s++){
						if (scene.children[0].children[s].name.startsWith('j-')){
							var nb= parseInt(scene.children[0].children[s].name.split('j-')[1]);
							
							var mycolor = range_p_color(team_junctions_data[nb][2]);
							if (user_junctions_data.hasOwnProperty(nb)){
								mycolor = range_p_color(user_junctions_data[nb][2]);
							}
							
							scene.children[0].children[s].material.color = new THREE.Color( mycolor );					
						}
					}	
			}
			else{
				var m_group= scene.children[3].children;
				var l_scene = m_group.length;
				//console.log(scene.children[3].children.length)
				for (var s =0;s<l_scene;s++){
					if (m_group[s].type=="Mesh" ){
						if (m_group[s].name && (m_group[s].name.startsWith('j-')) ){
							var nb= parseInt(scene.children[3].children[s].name.split('j-')[1]);
							
							var mycolor = range_p_color(team_junctions_data[nb][2]);
							if (user_junctions_data.hasOwnProperty(nb)){
								mycolor = range_p_color(user_junctions_data[nb][2]);
							}
							
							m_group[s].material.color=new THREE.Color(mycolor );
						}
					}
				}
				
			}
		}
		
	}
	
	d3.select("#mySessionSelect").on("change", function() {
		
		var selected_session=myhistory[this.value][1];
		user_latest_diameters={};
		//console.log(network['pipe_diameters'].length)
		//var max_d=network['pipe_diameters'].length;
		for (cpipe in selected_session){
			user_latest_diameters[cpipe]=parseInt(selected_session[cpipe]);
		}
		//console.log(user_latest_diameters)
		if (isWebGl==false){
			var l_scene = scene.children[0].children.length;		
			for (var s =0;s<l_scene;s++){
				if (scene.children[0].children[s].name.startsWith('j-')){							
					scene.children[0].children[s].material.color = new THREE.Color( 0xdddddd );						
				}
				else if (scene.children[0].children[s].name.startsWith('pc-')){
					var cpipe= scene.children[0].children[s].name.split('pc-')[1];
					var index_diameter=0;
					if (user_latest_diameters.hasOwnProperty(cpipe)){
						index_diameter=user_latest_diameters[cpipe]
						//console.log(index_diameter)
					}
					else{
						team_latest_diameters[cpipe]=diameters_2_index[all_changeable_pipes[cpipe]['Diameter']];
						index_diameter=team_latest_diameters[cpipe];
					}
					var default_col = 0xff0000;
					if (default_coloring_pipe){
						if (index_diameter!=0){
							default_col= 0x00ff00;
						}
					}
					else{
						default_col= 0x888888;
						
					}
					var material;// = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter/4), opacity: 0.7 } );
					if (game.game_mode!='aqualibrium'){
						material = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter/4), opacity: 0.7 } );
					}
					else{
						if (index_diameter==0){
							material = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter/(network['pipe_diameters'].length/5)), opacity: 1.0 } );
						}
						else if (index_diameter==1){
							material = new THREE.LineBasicMaterial( { color : default_col, linewidth:6, opacity: 1.0 } );
						}
						else if (index_diameter==2){
							material = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter*8), opacity: 1.0 } );
						}
					
					}
					scene.children[0].children[s].material=material;
				}
			}
		}
		else{
			
				var m_group= scene.children[3].children;
				var l_scene = m_group.length;
				for (var s =0;s<l_scene;s++){
					if (m_group[s].type=="Mesh" ){
						if (m_group[s].name){ //&& (m_group[s].name=='pc-'+cpipe)) {
							if(m_group[s].name.startsWith('pc-')) {
								var cpipe= m_group[s].name.split('pc-')[1];
								var array_points=[];
								for (var i=0;i< all_changeable_pipes[cpipe]['Vertices'].length;i++ ){
									array_points.push( new THREE.Vector3(((parseFloat(all_changeable_pipes[cpipe]['Vertices'][i][0])-left_coord)*scale_3d)-(max_3d_width*0.5),0, ((parseFloat(all_changeable_pipes[cpipe]['Vertices'][i][1])-low_coord)*scale_3d)-(max_3d_width*0.5) ));
								}
								var curve = new THREE.CatmullRomCurve3(array_points);
								var index_diameter=0;
								if (user_latest_diameters.hasOwnProperty(cpipe)){
									index_diameter=user_latest_diameters[cpipe]
									//console.log(index_diameter)
								}
								else{
									team_latest_diameters[cpipe]=diameters_2_index[all_changeable_pipes[cpipe]['Diameter']];
									index_diameter=team_latest_diameters[cpipe];
								}
									
								
								var rad=0.8+(index_diameter/(network['pipe_diameters'].length/3));
								if (game.game_mode=='aqualibrium'){
									if (index_diameter==0){
										rad=0.8+(0/(network['pipe_diameters'].length/2.8));
									}
									else if (index_diameter==1){
										rad=0.8+(0.5/(network['pipe_diameters'].length/2.8));
									}
									else if (index_diameter==2){
										rad=0.8+(index_diameter/(network['pipe_diameters'].length/3));
									}
								}
								var seg =1;
								if (array_points.length>2){
									seg = 12;
								}
								var geometry = new THREE.TubeGeometry(
									curve,  //path
									seg,    //segments
									rad,     //radius
									8,     //radiusSegments
									false  //closed
								);
								geometry.dynamic = true;
								m_group[s].geometry=geometry;
								var default_col = 0xff0000;
								if (default_coloring_pipe){
									if (index_diameter!=0){
										default_col= 0x00ff00;
									}
								}
								else{
									//team_pipes_leakage={};
									//user_pipes_leakage={};
									default_col= 0x888888;
									
								}
								m_group[s].material.color=new THREE.Color( default_col );
							}
						}
						if (m_group[s].name.startsWith('j-')){
							m_group[s].material.color=new THREE.Color( 0x888888 );
						}
					}
				}		
			
		}
		var input_obj={};
		if (game.game_mode=='aqualibrium'){
			for (pipe in team_latest_diameters){
				if (team_latest_diameters[pipe] && (team_latest_diameters[pipe] != diameters_2_index[all_pipes[pipe]['Diameter']])){
					if (user_latest_diameters.hasOwnProperty(pipe)){
						input_obj[pipe]=user_latest_diameters[pipe];
					}
					else{
						input_obj[pipe]=team_latest_diameters[pipe];
					}
				}
			}
		}
		for (pipe in user_latest_diameters){
			if (input_obj.hasOwnProperty(pipe)==false){
				input_obj[pipe]=user_latest_diameters[pipe];
			}
		}
		for (mpipe in game.modified_pipes){
				input_obj[mpipe]=game.modified_pipes[mpipe]
		}
		latest_input = ' pipes';
		for (pipe in input_obj){
			latest_input +=' "'+pipe+'" '+input_obj[pipe]
		}
		input_obj=null;
		
		//console.log(latest_input)
		// requestComputation();
		needEvaluation=true;
		updateSpreadSheet();
		
		var topinfo = '';
		if (game.game_mode=='aqualibrium'){
			res1_bar0.transition(200)
			  .attr("y", (((d3_height *0.4)-range_res((parseFloat(myhistory[this.value][0][4]))))+95))//.attr("y", (7))
			  .attr("height", range_res((parseFloat(myhistory[this.value][0][4]))));
			res2_bar0.transition(200)
			  .attr("y", (((d3_height *0.4)-range_res((parseFloat(myhistory[this.value][0][5]))))+95))//.attr("y", (7))
			  .attr("height", range_res((parseFloat(myhistory[this.value][0][5]))));
			res3_bar0.transition(200)
			  .attr("y", (((d3_height *0.4)-range_res((parseFloat(myhistory[this.value][0][6]))))+95))//.attr("y", (7))
			  .attr("height", range_res((parseFloat(myhistory[this.value][0][6]))));
			res1_text.text((parseFloat(myhistory[this.value][0][4])).toFixed(3));
			res2_text.text((parseFloat(myhistory[this.value][0][5])).toFixed(3));
			res3_text.text((parseFloat(myhistory[this.value][0][6])).toFixed(3));
			topinfo +='<table class="table-condensed" style="font-size:16px;border-style: solid;border-color: '+mycol+';border-width: 0px;color:'+mycol+'">';
			topinfo +='<tr><td>Score: </td><td>'+parseFloat(myhistory[this.value][0][7]).toFixed(3)+'</td><td>Reservoir 1: </td><td>'+(parseFloat(myhistory[this.value][0][4])).toFixed(5)+'</td><td>Reservoir 2: </td><td>'+(parseFloat(myhistory[this.value][0][5])).toFixed(5)+'</td><td>Reservoir 3: </td><td>'+(parseFloat(myhistory[this.value][0][6])).toFixed(5)+'</td></tr></table>'
			overall_score=parseFloat(myhistory[this.value][0][7]);
			reservoir_1=parseFloat(myhistory[this.value][0][4]);
			reservoir_2=parseFloat(myhistory[this.value][0][5]);
			reservoir_3=parseFloat(myhistory[this.value][0][6]);
		}
			document.getElementById('info-top').innerHTML=topinfo;	
			updateWarning();
			updateReservoirsLevels();
	});
	
	io.socket.put('/update', {history:[]},function gotResponse(body, response) {
	   //console.log('Server sending request ot server ');
	})
	
	io.socket.on('updateson', function gotHelloMessage (data) {
		if (data.game==game.name){
			updates_on=true;
			console.log('DM set updates on ');
		}
	})
	io.socket.on('updatesoff', function gotHelloMessage (data) {
		if (data.game==game.name){
			updates_on=false;
			document.getElementById('score-message').style.visibility="hidden";
			console.log('DM set updates off ');
		}
	})
	
	io.socket.on('betterscore', function gotHelloMessage (data) {
		console.log('Team '+data['team']+' has just found the best solution so far')
		if (updates_on){
			document.getElementById('score-message').style.visibility="visible";
			if (game.game_mode=='aqualibrium'){
				document.getElementById('score-message').innerHTML='<span style="color:white">Best solution- User <strong>'+ data['team']+'</strong>: score '+parseFloat(data['overall_score']).toFixed(3)+'</span>';
			}
		}
	});
	
	io.socket.on('endscore', function gotEndMessage (data) {
		//console.log(data.sessionBests);
		document.getElementById('high-score-table').style.visibility="visible";
		document.getElementById('high-score-table').style.width="500px";
		
		//document.getElementById('high-score-table').innerHTML=""+data;
		var hs_values=[];
		var listnames=[];
		var hs_object=[];
		
		if (game.game_mode=='aqualibrium'){
			for (var i=0;i<data['board'].length;i++){
				if (listnames.indexOf(data['board'][i]['team'])==-1){
					listnames.push(data['board'][i]['team']);
					hs_object.push('<span>'+(i+1)+' <strong>Player '+data['board'][i]['team']+'</strong> score '+parseFloat(data['board'][i]['overall_score']).toFixed(3)+'</span>');
					
				}
			}
		}
		var final_hs="<strong>The best scores</strong><br>";
		var limit = hs_object.length;
		if (limit>10){
		limit=10;
		}
		for (var i=0;i<hs_object.length;i++){
			final_hs+=hs_object[i]+"<br>"
		}
		
		document.getElementById('list_hs').innerHTML=final_hs;
	});
	
	io.socket.on('hellodm', function gotHelloMessage (data) {
		
	});
	
	io.socket.on('hello', function gotHelloMessage (data) {
		needEvaluation=false;
		if (data.name==myuser.name && (data.game==game.name) && (data.type=='e' || data.type=='E')){
			console.log('User `' + data.name + '` changed his network status with a network evaluation - new result available');
			if (game.game_mode=='aqualibrium'){
				//console.log(data.result)
				overall_score=parseFloat(data.result[8]);
				reservoir_1=parseFloat(data.result[5]);
				reservoir_2=parseFloat(data.result[6]);
				reservoir_3=parseFloat(data.result[7]);
				if (data.result[9]===true || data.result[9]==='true' || data.result[9]==="true"){
					score_valid=true;
				}
				
				team_junctions_data={}
				var indp=10;
				user_latest_diameters={};
				//console.log(team_junctions_data)
				for (var i =0; i<pipes_nb;i++){
					var pid= data.result[indp];
					indp++;
					var pipediam= parseInt(data.result[indp]);
					indp++;
					if (pid){
						if (pipediam!=-1){
							user_latest_diameters[pid]=pipediam;
							
							team_latest_diameters[pid]=pipediam;
							if (score_valid==false){
								user_latest_diameters[pid]=0;
								team_latest_diameters[pid]=0;
							}
						}
						else{
							
							team_latest_diameters[pid]=diameters_2_index[all_pipes[pid]['Diameter']];
							if (score_valid==false){
								
								team_latest_diameters[pid]=0;
							}
						}
					}
				}
				
				res1_bar0.transition(200)
				  .attr("y", (((d3_height *0.4)-range_res((reservoir_1)))+95))//.attr("y", (7))
				  .attr("height", range_res((reservoir_1)));
				res2_bar0.transition(200)
				  .attr("y", (((d3_height *0.4)-range_res((reservoir_2)))+95))//.attr("y", (7))
				  .attr("height", range_res((reservoir_2)));
				res3_bar0.transition(200)
				  .attr("y", (((d3_height *0.4)-range_res((reservoir_3)))+95))//.attr("y", (7))
				  .attr("height", range_res((reservoir_3)));
				res1_text.text((reservoir_1).toFixed(3));
				res2_text.text((reservoir_2).toFixed(3));  
				res3_text.text((reservoir_3).toFixed(3));  				
				// update topinfo message with total cost etc...
				var topinfo = '';
				topinfo +='<table class="table-condensed" style="font-size:16px;border-style: solid;border-color: '+mycol+';border-width: 0px;color:'+mycol+'">';
				topinfo +='<tr><td>Score: </td><td>'+parseFloat(overall_score).toFixed(3)+'</td><td>Reservoir 1: </td><td>'+(reservoir_1).toFixed(5)+'</td><td>Reservoir 2: </td><td>'+(reservoir_2).toFixed(5)+'</td><td>Reservoir 3: </td><td>'+(reservoir_3).toFixed(5)+'</td></tr></table>'
				document.getElementById('info-top').innerHTML=topinfo;	
				updatePipesColors();
				updateReservoirsLevels();
			}
			updateSpreadSheet();
		}
		else if ( ((team==myuser.name) ||(game.players_teams[data.name] && team==game.players_teams[data.name]['team'])) && (data.game==game.name) && (data.type=='c' || data.type=='C')){
			console.log('User `' + data.name + '` changed team network status with a network evaluation - new result available');
			//console.log(team)
			
			//console.log(game.players_teams[data.name]['team'])
			console.log(data.jobid)
			if (myuser.name==data.name){
				if (commit_id==data.jobid){
					//console.log(data.jobid)
					document.getElementById('commit-btn').className = "btn btn-danger";
					document.getElementById('commit-btn').style.pointerEvents = "auto";
					commit_id='';
					if (game.team_size==1){
						io.socket.put('/committed', {jobid:data.jobid, game:game.name, team:myuser.name, mode: game_mode},function gotResponse(body, response) {
						   console.log('Sending aknowledgment of receipt to server ');
						});
					}
					else{
						io.socket.put('/committed', {jobid:data.jobid, game:game.name, team:game.players_teams[data.name]['team'], mode: game_mode},function gotResponse(body, response) {
						   console.log('Sending aknowledgment of receipt to server ');
						});
					}
					
				}
				else{
					//commit_id==''
					if (game.team_size==1){
						io.socket.put('/committed', {jobid:data.jobid, game:game.name, team:myuser.name, mode: game_mode},function gotResponse(body, response) {
						   console.log('Sending aknowledgment of receipt to server ');
						});
					}
					else{
						io.socket.put('/committed', {jobid:data.jobid, game:game.name, team:game.players_teams[data.name]['team'], mode: game_mode},function gotResponse(body, response) {
						   console.log('Sending aknowledgment of receipt to server ');
						});
					}
					//console.log(' a forgotten commit with job id '+data.jobid+'was just sent by server. We will apply it anyway.')
					//io.socket.put('/committed', {jobid:data.jobid},function gotResponse(body, response) {
					//   console.log('Sending aknowledgment of receipt to server ');
					//})
				}
			}
			
			
			if (game.game_mode=='aqualibrium'){
				if (myuser.name==data.name){
					console.log("active")
					overall_score=parseFloat(data.result[8]);
					reservoir_1=parseFloat(data.result[5]);
					reservoir_2=parseFloat(data.result[6]);
					reservoir_3=parseFloat(data.result[7]);
					if (data.result[9]===true || data.result[9]==='true' || data.result[9]==="true"){
						score_valid=true;
					}
					
					//console.log(user_junctions_data)
					user_latest_diameters={};
					var indp=10;
					for (var i =0; i<pipes_nb;i++){
						var pid= data.result[indp];
						indp++;
						var pipediam= parseInt(data.result[indp]);
						indp++;
						if (pid){
							if (all_changeable_pipes.hasOwnProperty(pid)){
								//console.log(pipediam)
								if (pipediam!=-1 && pipediam!='-1'){
									
									user_latest_diameters[pid]=pipediam;
									team_latest_diameters[pid]=pipediam;
								}
								else{
									delete user_latest_diameters[pid];
									team_latest_diameters[pid]=pipediam;
								}
							}
							else{
								if (pipediam!=-1 && pipediam!='-1'){
									
									team_latest_diameters[pid]=pipediam;
								}
								else{
									if (team_latest_diameters[pid]){
										team_latest_diameters[pid]=diameters_2_index[all_pipes[pid]['Diameter']];
									}
								}
							}
						}
					}
					//console.log(user_latest_diameters)
					//console.log(team_latest_diameters)
					// update color of junctions
					//updatePressureNodesColors();
					
					// update pipes not under control of the user after the whole team network is changed
					// the user pipes diameters should not be changed by the team update
					var def_line_col;
					// lines
					if (UIColor=="black"){
						def_line_col=0xffffff;
					}
					else if (UIColor=="white"){
						def_line_col=0x888888;
					}
					if (isWebGl==false){
						var l_scene = scene.children[0].children.length;		
						for (var s =0;s<l_scene;s++){
							if (scene.children[0].children[s].name){
								if(scene.children[0].children[s].name.startsWith('pc-')) {
									var cpipe= scene.children[0].children[s].name.split('pc-')[1];
									var index_diameter=0;
									if (_.isEmpty(user_latest_diameters)){
										index_diameter=team_latest_diameters[cpipe];
									}
									else{
										if (user_latest_diameters.hasOwnProperty(cpipe)){
											index_diameter=user_latest_diameters[cpipe];
										}
										else{
											index_diameter=team_latest_diameters[cpipe];
										}
										
									}
									//console.log(index_diameter)
									if (index_diameter === undefined) {
										index_diameter=0;
										
									}
									//console.log(index_diameter)
									//var material;// = new THREE.LineBasicMaterial( { color : default_col, linewidth:2+(index_diameter/4), opacity: 0.7 } );
									if (index_diameter==0){
										material = new THREE.LineBasicMaterial( { color : def_line_col, linewidth:2+(index_diameter/(network['pipe_diameters'].length/5)), opacity: 1.0 } );
									}
									else if (index_diameter==1){
										material = new THREE.LineBasicMaterial( { color : def_line_col, linewidth:6, opacity: 1.0 } );
									}
									else if (index_diameter==2){
										material = new THREE.LineBasicMaterial( { color : def_line_col, linewidth:2+(index_diameter*8), opacity: 1.0 } );
									}
									
									//var material = new THREE.LineBasicMaterial( { color : def_line_col, linewidth:2+(index_diameter/4), opacity: 0.7 } );
									scene.children[0].children[s].material=material;
								}
							}
						}
					}
					else{
						var m_group= scene.children[3].children;
						var l_scene = m_group.length;
						//console.log(l_scene)
						for (var s =0;s<l_scene;s++){
							if (m_group[s].type=="Mesh" ){
								if (m_group[s].name){ //&& (m_group[s].name=='pc-'+cpipe)) {
									if(m_group[s].name.startsWith('pf-')) {
										var cpipe= m_group[s].name.split('pf-')[1];
										var array_points=[];
										for (var i=0;i< all_pipes[cpipe]['Vertices'].length;i++ ){
											 //array_points.push( new THREE.Vector3(((parseFloat(all_pipes[cpipe]['Vertices'][i][0])-left_coord)*scale_3d)-(max_3d_width*0.5),0, ((parseFloat(all_pipes[cpipe]['Vertices'][i][1])-low_coord)*scale_3d)-(max_3d_width*0.5) ));
											var ypos=0.0;
											if (game.game_mode=='aqualibrium'){
												if (i==0 && all_fixed_pipes[cpipe]['Node1']=='Source'){
													ypos = -10-((20)*0.5);
												}
												else if (i==1 && all_fixed_pipes[cpipe]['Node2']=='Source'){
													ypos = -10-((20)*0.5);
												}
												
											}
											else{
												
											}
											array_points.push( new THREE.Vector3(((parseFloat(all_fixed_pipes[cpipe]['Vertices'][i][0])-left_coord)*scale_3d)-(max_3d_width*0.5),ypos, ((parseFloat(all_fixed_pipes[cpipe]['Vertices'][i][1])-low_coord)*scale_3d)-(max_3d_width*0.5) ));
										}
										var curve = new THREE.CatmullRomCurve3(array_points);
										var index_diameter=0;
										if (_.isEmpty(user_latest_diameters)){
											 index_diameter=team_latest_diameters[cpipe];
										}
										else{
											if (user_latest_diameters.hasOwnProperty(cpipe)){
												index_diameter=user_latest_diameters[cpipe];
											}
											else{
												index_diameter=team_latest_diameters[cpipe];
											}
											
										}
										var rad=0.8+(index_diameter/(network['pipe_diameters'].length/3));
										var seg =1;
										if (array_points.length>2){
											seg = 12;
										}
										var geometry = new THREE.TubeGeometry(
											curve,  //path
											seg,    //segments
											rad,     //radius
											8,     //radiusSegments
											false  //closed
										);
										geometry.dynamic = true;
										m_group[s].geometry=geometry;
										
									}
								}
								
							}
						}
						updatePipesColors();	
					}
					
					res1_bar0.transition(200)
					  .attr("y", (((d3_height *0.4)-range_res((reservoir_1)))+95))//.attr("y", (7))
					  .attr("height", range_res((reservoir_1)));
					res2_bar0.transition(200)
					  .attr("y", (((d3_height *0.4)-range_res((reservoir_2)))+95))//.attr("y", (7))
					  .attr("height", range_res((reservoir_2)));
					res3_bar0.transition(200)
					  .attr("y", (((d3_height *0.4)-range_res((reservoir_3)))+95))//.attr("y", (7))
					  .attr("height", range_res((reservoir_3)));
					res1_text.text((reservoir_1).toFixed(3));
					res2_text.text((reservoir_2).toFixed(3));  
					res3_text.text((reservoir_3).toFixed(3));  	
					// update topinfo message with total cost etc...
					var topinfo = '';
					topinfo +='<table class="table-condensed" style="font-size:16px;border-style: solid;border-color: '+mycol+';border-width: 0px;color:'+mycol+'">';
					topinfo +='<tr><td>Score: </td><td>'+parseFloat(overall_score).toFixed(3)+'</td><td>Reservoir 1: </td><td>'+(reservoir_1).toFixed(5)+'</td><td>Reservoir 2: </td><td>'+(reservoir_2).toFixed(5)+'</td><td>Reservoir 3: </td><td>'+(reservoir_3).toFixed(5)+'</td></tr></table>'
					document.getElementById('info-top').innerHTML=topinfo;	
					// update myhistory + selectvar 
					//console.log(data.result)
					var compact_history_start=data.result.slice(1, 10);
					//console.log(compact_history_start)
					var compact_history_end= {};
					for (var i=data.result.length-1-(changeable_pipes_nb*2),j=data.result.length-1;i<j;i+=2){
						if (data.result[i+1]!=-1 && data.result[i]!="" && data.result[i]!=null){
							compact_history_end[data.result[i]]=parseInt(data.result[i+1]);
						}
					}
					//console.log(compact_history_end)
					myhistory.push([compact_history_start, compact_history_end])
					var opt = document.createElement('option');
					opt.value = myhistory.length-1;
					//opt.innerHTML = "result "+(myhistory.length)+" - cost "+parseFloat(myhistory[myhistory.length-1][0][3]).toFixed(1)+" - Pressure diff "+parseFloat(myhistory[myhistory.length-1][0][6]).toFixed(1)+"- age "+parseFloat(myhistory[myhistory.length-1][0][5]).toFixed(1)+" - leakage "+parseFloat(myhistory[myhistory.length-1][0][4]).toFixed(2);
					opt.innerHTML = "result "+(myhistory.length)+" - score "+parseFloat(myhistory[myhistory.length-1][0][7]).toFixed(3)+" - res1 "+parseFloat(myhistory[myhistory.length-1][0][4]).toFixed(3)+"- res2 "+parseFloat(myhistory[myhistory.length-1][0][5]).toFixed(3)+" - res3 "+parseFloat(myhistory[myhistory.length-1][0][6]).toFixed(3);
					mySelect.appendChild(opt);
					mySelect.value = myhistory.length-1;
					updateReservoirsLevels();
				}
			}
			updateSpreadSheet();
		}
		else if ( ((team==myuser.name) ||(game.players_teams[data.name] && team==game.players_teams[data.name]['team'])) && (data.game==game.name) && (data.type=='d' || data.type=='D')){
			console.log('User `' + data.name + '` changed dm team network status with a network evaluation - new result available');
			
			
			updateSpreadSheet();
		}
		
	});
	
	function closeAlert(){
		document.getElementById('high-score-table').style.visibility="hidden";
	}
	function closeInfo(){
		document.getElementById('info-table').style.visibility="hidden";
	}
	
	function updateWarning(){
		if (game.game_mode=='aqualibrium'){
			var cnt_closed=0;
			var cnt_small=0;
			var cnt_big=0;
			//for (pipe in team_latest_diameters){
			//		if (input_obj.hasOwnProperty(pipe)==false){
			//}
			//console.log(user_latest_diameters)
			for (pipe in user_latest_diameters){
				
				if ((!isNaN(parseInt(pipe))) && user_latest_diameters[pipe]==0){
					cnt_closed++;
				}
				else if (user_latest_diameters[pipe]==1){
					cnt_small++;
				}
				else if (user_latest_diameters[pipe]==2){
					cnt_big++;
				}
				else{}
			}
			if (cnt_closed>8 || cnt_small>12 || cnt_big >12){
				aqua_valid=false;
			}
			else{
				aqua_valid=true;
			}
			//console.log(cnt_closed)
			
			//console.log(all_reservoirs)
			//console.log(all_pipes)
			var reservoir_junctions={};
			for (pipe in all_pipes){
				if (all_pipes[pipe] && (all_reservoirs.hasOwnProperty(all_pipes[pipe]['Node1']))){
					reservoir_junctions[all_pipes[pipe]['Node2']]=1;
				}
				if (all_pipes[pipe] && (all_reservoirs.hasOwnProperty(all_pipes[pipe]['Node2']))){
					reservoir_junctions[all_pipes[pipe]['Node1']]=1;
				}
			}
			//console.log(reservoir_junctions)
			var active_nodes={};
			for (pipe in user_latest_diameters){
				if (user_latest_diameters[pipe]!=0){
					if (all_pipes[pipe]){
						var nd1 = all_pipes[pipe]['Node1'];
						if (active_nodes.hasOwnProperty(nd1)){
							active_nodes[nd1]+=1;
						}
						else{
							active_nodes[nd1]=1;
						}
						var nd2 = all_pipes[pipe]['Node2'];
						if (active_nodes.hasOwnProperty(nd2)){
							active_nodes[nd2]+=1;
						}
						else{
							active_nodes[nd2]=1;
						}
						
					}
				}
			}
			//console.log(active_nodes)
			var isolated_pipe=false;
			for (elem in active_nodes){
				if ((active_nodes[elem]==1) && (reservoir_junctions.hasOwnProperty(elem)==false)){
					//console.log(elem)
					isolated_pipe=true;
					aqua_valid=false;
				}
			}
			
			//console.log(" nb closed:"+cnt_closed+" nb small:"+cnt_small+" nb big:"+cnt_big);
			var myinfo = '';
			if (aqua_valid==false){
				myinfo +='<div style="border-style: solid;border-color: '+mycol+';">';
				myinfo +='<table class="table table-condensed" style="font-size:20px;width:180px;color:'+mycol+'">';
				myinfo +='<tr><td colspan="2"><img src="images/warning.png" alt="" border=0 height=100 width=100></img></td></tr>';
				if (cnt_closed>8 ){
					myinfo +='<tr><td>More than 8 closed pipes !</td><td></td></tr>'
				}
				if (cnt_small>12){
					myinfo +='<tr><td>More than 12 3.7mm pipes !</td><td></td></tr>'
				} 
				if (cnt_big >12){
					myinfo +='<tr><td>More than 12 7.1mm pipes !</td><td></td></tr>'
				}
				if (isolated_pipe){
					myinfo +='<tr><td>Dead end pipes not allowed ! !</td><td></td></tr>'
				}
				
				myinfo +='</table></div>';
				//document.getElementById('clickMe').className += " disabled";
				 $('#clickMe').addClass('disabled');
				 $('#commit-btn').addClass('disabled');
				//document.getElementById('commit-btn').className += " disabled";
			}
			else{
				$('#clickMe').removeClass('disabled');
				 $('#commit-btn').removeClass('disabled');
			}
			document.getElementById('info-warning').innerHTML=myinfo;
			
			
		}
	}
	

	</script>
  </body>
</html>
